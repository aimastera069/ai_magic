目錄：/www/wwwroot/xart004.heatgroups.top/wp-content/plugins/ai_plateform_v2/files_2025/public/css
檔名：public.css
==================================================
/**
 * AI Magic Publisher Public Styles
 * Version: 1.0.0
 */

/* Gallery Layout */
.aimagic-gallery {
    display: grid;
    gap: 20px;
    margin: 20px 0;
}

.aimagic-gallery.columns-2 {
    grid-template-columns: repeat(2, 1fr);
}

.aimagic-gallery.columns-3 {
    grid-template-columns: repeat(3, 1fr);
}

.aimagic-gallery.columns-4 {
    grid-template-columns: repeat(4, 1fr);
}

.gallery-item {
    background: #fff;
    border-radius: 8px;
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
    transition: transform 0.2s ease;
}

.gallery-item:hover {
    transform: translateY(-5px);
}

.gallery-item-inner {
    overflow: hidden;
}

.gallery-item-image {
    position: relative;
    padding-top: 75%;
}

.gallery-item-image img {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    object-fit: cover;
}

.gallery-item-content {
    padding: 15px;
}

.gallery-item-title {
    margin: 0 0 10px;
    font-size: 1.1em;
}

.gallery-item-meta {
    font-size: 0.9em;
    color: #666;
}

/* User Stats */
.aimagic-user-stats {
    background: #fff;
    border-radius: 8px;
    padding: 20px;
    margin: 20px 0;
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
}

.stats-section {
    margin-bottom: 20px;
}

.stats-section:last-child {
    margin-bottom: 0;
}

.quota-bar {
    background: #f0f0f0;
    border-radius: 4px;
    height: 20px;
    margin: 10px 0;
    overflow: hidden;
}

.quota-progress {
    background: linear-gradient(90deg, #4CAF50, #8BC34A);
    height: 100%;
    transition: width 0.3s ease;
}

.quota-text {
    font-size: 0.9em;
    margin: 5px 0;
}

.quota-reset {
    font-size: 0.8em;
    color: #666;
}

.stats-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(120px, 1fr));
    gap: 15px;
    margin-top: 15px;
}

.stat-item {
    text-align: center;
    padding: 10px;
    background: #f8f9fa;
    border-radius: 4px;
}

.stat-value {
    display: block;
    font-size: 1.5em;
    font-weight: bold;
    color: #2196F3;
}

.stat-label {
    display: block;
    font-size: 0.9em;
    color: #666;
    margin-top: 5px;
}

/* Latest Content */
.aimagic-latest-content {
    margin: 20px 0;
}

.content-item {
    display: grid;
    grid-template-columns: 200px 1fr;
    gap: 20px;
    margin-bottom: 20px;
    padding-bottom: 20px;
    border-bottom: 1px solid #eee;
}

.content-item:last-child {
    margin-bottom: 0;
    padding-bottom: 0;
    border-bottom: none;
}

.content-thumbnail img {
    width: 100%;
    height: 150px;
    object-fit: cover;
    border-radius: 4px;
}

.content-title {
    margin: 0 0 10px;
    font-size: 1.2em;
}

.content-excerpt {
    margin-bottom: 10px;
    color: #666;
}

.content-meta {
    font-size: 0.9em;
    color: #666;
}

.meta-platform {
    display: inline-block;
    padding: 2px 8px;
    border-radius: 3px;
    font-size: 0.8em;
    margin-left: 10px;
}

/* Responsive Adjustments */
@media screen and (max-width: 782px) {
    .aimagic-gallery {
        grid-template-columns: repeat(2, 1fr) !important;
    }

    .content-item {
        grid-template-columns: 1fr;
    }

    .content-thumbnail {
        margin-bottom: 15px;
    }
}

@media screen and (max-width: 480px) {
    .aimagic-gallery {
        grid-template-columns: 1fr !important;
    }

    .stats-grid {
        grid-template-columns: 1fr;
    }
}

/* Dark Mode Support */
@media (prefers-color-scheme: dark) {
    .gallery-item,
    .aimagic-user-stats {
        background: #2d2d2d;
    }

    .gallery-item-title a,
    .content-title a {
        color: #fff;
    }

    .gallery-item-meta,
    .content-meta,
    .content-excerpt {
        color: #bbb;
    }

    .stat-item {
        background: #383838;
    }

    .quota-bar {
        background: #383838;
    }

    .quota-text,
    .quota-reset {
        color: #bbb;
    }
}

/* Print Styles */
@media print {
    .aimagic-gallery,
    .aimagic-user-stats,
    .aimagic-latest-content {
        break-inside: avoid;
    }
}

目錄：/www/wwwroot/xart004.heatgroups.top/wp-content/plugins/ai_plateform_v2/files_2025
檔名：ai-magic-publisher.php
==================================================
<?php
/**
 * Plugin Name: AI Magic Publisher
 * Plugin URI: https://github.com/aimastera069/ai-magic-publisher
 * Description: AI-powered content publishing platform with LINE and WeChat integration
 * Version: 1.0.0
 * Author: aimastera069
 * Author URI: https://github.com/aimastera069
 * License: GPL v2 or later
 * Text Domain: ai-magic-publisher
 * Domain Path: /languages
 * Requires PHP: 8.1
 * Requires at least: 6.7.2
 */

if (!defined('ABSPATH')) {
    exit;
}

// Plugin Constants
define('AIMAGIC_VERSION', '1.0.0');
define('AIMAGIC_PLUGIN_DIR', plugin_dir_path(__FILE__));
define('AIMAGIC_PLUGIN_URL', plugin_dir_url(__FILE__));
define('AIMAGIC_PLUGIN_BASENAME', plugin_basename(__FILE__));

// Autoloader for plugin classes
spl_autoload_register(function ($class) {
    $prefix = 'AIMagic\\';
    $base_dir = AIMAGIC_PLUGIN_DIR . 'includes/';

    $len = strlen($prefix);
    if (strncmp($prefix, $class, $len) !== 0) {
        return;
    }

    $relative_class = substr($class, $len);
    $file = $base_dir . str_replace('\\', '/', $relative_class) . '.php';

    if (file_exists($file)) {
        require $file;
    }
});

// Plugin Activation Hook
register_activation_hook(__FILE__, array('AIMagic\\Core\\Activator', 'activate'));

// Plugin Deactivation Hook
register_deactivation_hook(__FILE__, array('AIMagic\\Core\\Deactivator', 'deactivate'));

// Initialize Plugin
function aimagic_init() {
    $plugin = new AIMagic\Core\Plugin();
    $plugin->run();
}
add_action('plugins_loaded', 'aimagic_init');

目錄：/www/wwwroot/xart004.heatgroups.top/wp-content/plugins/ai_plateform_v2/files_2025/admin/partials
檔名：admin-display.php
==================================================
<?php
/**
 * Main admin dashboard template
 *
 * @package AI_Magic_Publisher
 */

if (!defined('ABSPATH')) {
    exit;
}

$current_user = wp_get_current_user();
$stats = array(
    'tasks_today' => $this->get_tasks_count('today'),
    'tasks_total' => $this->get_tasks_count(),
    'users_active' => $this->get_users_count('active'),
    'users_total' => $this->get_users_count(),
);
?>

<div class="wrap aimagic-dashboard">
    <h1><?php _e('AI Magic Publisher Dashboard', 'ai-magic-publisher'); ?></h1>
    
    <div class="welcome-panel">
        <div class="welcome-panel-content">
            <h2><?php printf(__('Welcome, %s!', 'ai-magic-publisher'), esc_html($current_user->display_name)); ?></h2>
            <p class="about-description">
                <?php _e('Current system time (UTC):', 'ai-magic-publisher'); ?> 
                <strong><?php echo esc_html('2025-03-26 18:18:53'); ?></strong>
            </p>
            
            <div class="welcome-panel-column-container">
                <div class="welcome-panel-column">
                    <h3><?php _e('Quick Stats', 'ai-magic-publisher'); ?></h3>
                    <ul>
                        <li>
                            <?php printf(
                                __('Tasks Today: <strong>%d</strong>', 'ai-magic-publisher'),
                                $stats['tasks_today']
                            ); ?>
                        </li>
                        <li>
                            <?php printf(
                                __('Total Tasks: <strong>%d</strong>', 'ai-magic-publisher'),
                                $stats['tasks_total']
                            ); ?>
                        </li>
                        <li>
                            <?php printf(
                                __('Active Users: <strong>%d</strong>', 'ai-magic-publisher'),
                                $stats['users_active']
                            ); ?>
                        </li>
                        <li>
                            <?php printf(
                                __('Total Users: <strong>%d</strong>', 'ai-magic-publisher'),
                                $stats['users_total']
                            ); ?>
                        </li>
                    </ul>
                </div>
                <div class="welcome-panel-column">
                    <h3><?php _e('Quick Links', 'ai-magic-publisher'); ?></h3>
                    <ul>
                        <li>
                            <a href="<?php echo admin_url('admin.php?page=ai-magic-publisher-tasks'); ?>" class="button button-primary">
                                <?php _e('Manage Tasks', 'ai-magic-publisher'); ?>
                            </a>
                        </li>
                        <li>
                            <a href="<?php echo admin_url('admin.php?page=ai-magic-publisher-users'); ?>" class="button">
                                <?php _e('Manage Users', 'ai-magic-publisher'); ?>
                            </a>
                        </li>
                        <li>
                            <a href="<?php echo admin_url('admin.php?page=ai-magic-publisher-settings'); ?>" class="button">
                                <?php _e('Settings', 'ai-magic-publisher'); ?>
                            </a>
                        </li>
                    </ul>
                </div>
                <div class="welcome-panel-column welcome-panel-last">
                    <h3><?php _e('System Status', 'ai-magic-publisher'); ?></h3>
                    <?php $this->display_system_status(); ?>
                </div>
            </div>
        </div>
    </div>

    <div class="aimagic-dashboard-widgets metabox-holder">
        <div class="postbox-container">
            <div class="meta-box-sortables">
                <div class="postbox">
                    <h2 class="hndle"><span><?php _e('Recent Tasks', 'ai-magic-publisher'); ?></span></h2>
                    <div class="inside">
                        <?php $this->display_recent_tasks(); ?>
                    </div>
                </div>
            </div>
        </div>
        
        <div class="postbox-container">
            <div class="meta-box-sortables">
                <div class="postbox">
                    <h2 class="hndle"><span><?php _e('Latest Users', 'ai-magic-publisher'); ?></span></h2>
                    <div class="inside">
                        <?php $this->display_latest_users(); ?>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

目錄：/www/wwwroot/xart004.heatgroups.top/wp-content/plugins/ai_plateform_v2/files_2025/admin/partials
檔名：admin-tenants.php
==================================================
<?php
/**
 * Tenants management page template
 *
 * @package AI_Magic_Publisher
 */

if (!defined('ABSPATH')) {
    exit;
}

// Initialize the list table
$list_table = new \AIMagic\Admin\Lists\TenantsList();
$list_table->prepare_items();

// Handle form submissions
$message = '';
$message_type = 'updated';

if (isset($_POST['submit']) && isset($_POST['action']) && $_POST['action'] === 'create_tenant') {
    check_admin_referer('create_tenant');
    
    $tenant_name = sanitize_text_field($_POST['tenant_name']);
    $result = create_new_tenant($tenant_name);
    
    if (is_wp_error($result)) {
        $message = $result->get_error_message();
        $message_type = 'error';
    } else {
        $message = __('Tenant created successfully.', 'ai-magic-publisher');
    }
}
?>

<div class="wrap">
    <h1 class="wp-heading-inline">
        <?php _e('Tenants Management', 'ai-magic-publisher'); ?>
    </h1>
    
    <?php if (current_user_can('manage_options')): ?>
        <a href="#" class="page-title-action" id="add-new-tenant">
            <?php _e('Add New Tenant', 'ai-magic-publisher'); ?>
        </a>
    <?php endif; ?>

    <hr class="wp-header-end">

    <?php if (!empty($message)): ?>
        <div class="<?php echo esc_attr($message_type); ?> notice is-dismissible">
            <p><?php echo esc_html($message); ?></p>
        </div>
    <?php endif; ?>

    <!-- Add New Tenant Form (Hidden by default) -->
    <div id="add-tenant-form" style="display: none;" class="aimagic-form-container">
        <form method="post" action="">
            <?php wp_nonce_field('create_tenant'); ?>
            <input type="hidden" name="action" value="create_tenant">
            
            <table class="form-table">
                <tr>
                    <th scope="row">
                        <label for="tenant_name"><?php _e('Tenant Name', 'ai-magic-publisher'); ?></label>
                    </th>
                    <td>
                        <input type="text" name="tenant_name" id="tenant_name" class="regular-text" required>
                        <p class="description">
                            <?php _e('Enter a unique name for the tenant.', 'ai-magic-publisher'); ?>
                        </p>
                    </td>
                </tr>
            </table>
            
            <?php submit_button(__('Create Tenant', 'ai-magic-publisher')); ?>
        </form>
    </div>

    <!-- Tenants List Table -->
    <form method="post">
        <?php
        // Display search box
        $list_table->search_box(__('Search Tenants', 'ai-magic-publisher'), 'aimagic-tenant-search');
        
        // Display filters
        $list_table->views();
        
        // Display the list table
        $list_table->display();
        ?>
    </form>
</div>

<script type="text/javascript">
jQuery(document).ready(function($) {
    // Toggle add tenant form
    $('#add-new-tenant').on('click', function(e) {
        e.preventDefault();
        $('#add-tenant-form').slideToggle();
    });

    // Confirm delete actions
    $('.delete-tenant').on('click', function(e) {
        if (!confirm(<?php echo json_encode(__('Are you sure you want to delete this tenant? All associated users and tasks will be deleted. This action cannot be undone.', 'ai-magic-publisher')); ?>)) {
            e.preventDefault();
        }
    });

    // Handle tenant status toggle
    $('.toggle-tenant-status').on('click', function(e) {
        e.preventDefault();
        var tenantId = $(this).data('tenant-id');
        var newStatus = $(this).data('new-status');
        
        $.ajax({
            url: ajaxurl,
            type: 'POST',
            data: {
                action: 'aimagic_toggle_tenant_status',
                tenant_id: tenantId,
                new_status: newStatus,
                nonce: <?php echo json_encode(wp_create_nonce('aimagic_toggle_tenant_status')); ?>
            },
            success: function(response) {
                if (response.success) {
                    location.reload();
                } else {
                    alert(response.data.message);
                }
            }
        });
    });

    // Copy API key to clipboard
    $('.copy-api-key').on('click', function(e) {
        e.preventDefault();
        var apiKey = $(this).data('api-key');
        
        navigator.clipboard.writeText(apiKey).then(function() {
            alert(<?php echo json_encode(__('API key copied to clipboard!', 'ai-magic-publisher')); ?>);
        }).catch(function() {
            alert(<?php echo json_encode(__('Failed to copy API key. Please try again.', 'ai-magic-publisher')); ?>);
        });
    });
});
</script>

目錄：/www/wwwroot/xart004.heatgroups.top/wp-content/plugins/ai_plateform_v2/files_2025/admin/partials
檔名：admin-tasks.php
==================================================
<?php
/**
 * Tasks management page template
 *
 * @package AI_Magic_Publisher
 */

if (!defined('ABSPATH')) {
    exit;
}

// Initialize the list table
$list_table = new \AIMagic\Admin\Lists\TasksList();
$list_table->prepare_items();

// Handle bulk actions
$message = '';
if ('delete' === $list_table->current_action()) {
    $message = sprintf(
        __('Items deleted: %d', 'ai-magic-publisher'),
        count($_REQUEST['bulk-delete'])
    );
}
?>

<div class="wrap">
    <h1 class="wp-heading-inline">
        <?php _e('Tasks Management', 'ai-magic-publisher'); ?>
    </h1>
    
    <?php if (current_user_can('manage_options')): ?>
        <a href="<?php echo admin_url('admin.php?page=ai-magic-publisher-tasks&action=new'); ?>" class="page-title-action">
            <?php _e('Add New Task', 'ai-magic-publisher'); ?>
        </a>
    <?php endif; ?>

    <hr class="wp-header-end">

    <?php if (!empty($message)): ?>
        <div class="updated notice is-dismissible">
            <p><?php echo esc_html($message); ?></p>
        </div>
    <?php endif; ?>

    <form method="post">
        <?php
        // Display search box
        $list_table->search_box(__('Search Tasks', 'ai-magic-publisher'), 'aimagic-task-search');
        
        // Display filters
        $list_table->views();
        
        // Display the list table
        $list_table->display();
        ?>
    </form>
</div>

<script type="text/javascript">
jQuery(document).ready(function($) {
    // Confirm delete actions
    $('.delete-task').on('click', function(e) {
        if (!confirm(<?php echo json_encode(__('Are you sure you want to delete this task?', 'ai-magic-publisher')); ?>)) {
            e.preventDefault();
        }
    });

    // Handle retry task action
    $('.retry-task').on('click', function(e) {
        e.preventDefault();
        var taskId = $(this).data('task-id');
        
        $.ajax({
            url: ajaxurl,
            type: 'POST',
            data: {
                action: 'aimagic_retry_task',
                task_id: taskId,
                nonce: <?php echo json_encode(wp_create_nonce('aimagic_retry_task')); ?>
            },
            success: function(response) {
                if (response.success) {
                    location.reload();
                } else {
                    alert(response.data.message);
                }
            }
        });
    });
});
</script>

目錄：/www/wwwroot/xart004.heatgroups.top/wp-content/plugins/ai_plateform_v2/files_2025/admin/partials
檔名：admin-users.php
==================================================
<?php
/**
 * Users management page template
 *
 * @package AI_Magic_Publisher
 */

if (!defined('ABSPATH')) {
    exit;
}

// Initialize the list table
$list_table = new \AIMagic\Admin\Lists\UsersList();
$list_table->prepare_items();

// Handle messages
$message = '';
if (isset($_REQUEST['message'])) {
    switch ($_REQUEST['message']) {
        case 'quota_reset':
            $message = __('Quota has been reset successfully.', 'ai-magic-publisher');
            break;
        case 'deleted':
            $message = __('User(s) deleted successfully.', 'ai-magic-publisher');
            break;
    }
}
?>

<div class="wrap">
    <h1 class="wp-heading-inline">
        <?php _e('Users Management', 'ai-magic-publisher'); ?>
    </h1>
    
    <?php if (current_user_can('manage_options')): ?>
        <a href="<?php echo admin_url('admin.php?page=ai-magic-publisher-users&action=new'); ?>" class="page-title-action">
            <?php _e('Add New User', 'ai-magic-publisher'); ?>
        </a>
    <?php endif; ?>

    <hr class="wp-header-end">

    <?php if (!empty($message)): ?>
        <div class="updated notice is-dismissible">
            <p><?php echo esc_html($message); ?></p>
        </div>
    <?php endif; ?>

    <form method="post">
        <div class="tablenav top">
            <?php
            // Add custom bulk actions if needed
            $list_table->bulk_actions();
            
            // Add custom filters
            $tenants = get_aimagic_tenants();
            if (!empty($tenants)) {
                ?>
                <div class="alignleft actions">
                    <select name="tenant_id">
                        <option value=""><?php _e('All Tenants', 'ai-magic-publisher'); ?></option>
                        <?php foreach ($tenants as $tenant): ?>
                            <option value="<?php echo esc_attr($tenant->id); ?>" <?php selected(isset($_REQUEST['tenant_id']) ? $_REQUEST['tenant_id'] : '', $tenant->id); ?>>
                                <?php echo esc_html($tenant->name); ?>
                            </option>
                        <?php endforeach; ?>
                    </select>
                    <?php submit_button(__('Filter', 'ai-magic-publisher'), '', 'filter_action', false); ?>
                </div>
                <?php
            }
            ?>
        </div>

        <?php
        // Display search box
        $list_table->search_box(__('Search Users', 'ai-magic-publisher'), 'aimagic-user-search');
        
        // Display the list table
        $list_table->display();
        ?>
    </form>
</div>

<script type="text/javascript">
jQuery(document).ready(function($) {
    // Confirm delete actions
    $('.delete-user').on('click', function(e) {
        if (!confirm(<?php echo json_encode(__('Are you sure you want to delete this user? This action cannot be undone.', 'ai-magic-publisher')); ?>)) {
            e.preventDefault();
        }
    });

    // Handle quota reset action
    $('.reset-quota').on('click', function(e) {
        e.preventDefault();
        var userId = $(this).data('user-id');
        
        if (confirm(<?php echo json_encode(__('Are you sure you want to reset this user\'s quota?', 'ai-magic-publisher')); ?>)) {
            $.ajax({
                url: ajaxurl,
                type: 'POST',
                data: {
                    action: 'aimagic_reset_user_quota',
                    user_id: userId,
                    nonce: <?php echo json_encode(wp_create_nonce('aimagic_reset_quota')); ?>
                },
                success: function(response) {
                    if (response.success) {
                        location.reload();
                    } else {
                        alert(response.data.message);
                    }
                }
            });
        }
    });
});
</script>

目錄：/www/wwwroot/xart004.heatgroups.top/wp-content/plugins/ai_plateform_v2/files_2025/admin/partials
檔名：admin-settings.php
==================================================
<?php
/**
 * Plugin settings page template
 *
 * @package AI_Magic_Publisher
 */

if (!defined('ABSPATH')) {
    exit;
}
?>

<div class="wrap">
    <h1><?php _e('AI Magic Publisher Settings', 'ai-magic-publisher'); ?></h1>

    <form method="post" action="options.php">
        <?php
        settings_fields('aimagic_settings');
        do_settings_sections('aimagic_settings');
        ?>

        <div class="aimagic-settings-container">
            <!-- API Settings Section -->
            <div class="aimagic-settings-section">
                <h2><?php _e('API Settings', 'ai-magic-publisher'); ?></h2>
                <table class="form-table">
                    <tr>
                        <th scope="row">
                            <label for="aimagic_gpt4_api_key">
                                <?php _e('GPT-4 API Key', 'ai-magic-publisher'); ?>
                            </label>
                        </th>
                        <td>
                            <input type="password" 
                                   id="aimagic_gpt4_api_key" 
                                   name="aimagic_gpt4_api_key" 
                                   value="<?php echo esc_attr(get_option('aimagic_gpt4_api_key')); ?>" 
                                   class="regular-text">
                            <p class="description">
                                <?php _e('Enter your OpenAI GPT-4 API key.', 'ai-magic-publisher'); ?>
                            </p>
                        </td>
                    </tr>
                </table>
            </div>

            <!-- LINE Platform Settings -->
            <div class="aimagic-settings-section">
                <h2><?php _e('LINE Platform Settings', 'ai-magic-publisher'); ?></h2>
                <table class="form-table">
                    <tr>
                        <th scope="row">
                            <label for="aimagic_line_channel_secret">
                                <?php _e('Channel Secret', 'ai-magic-publisher'); ?>
                            </label>
                        </th>
                        <td>
                            <input type="password" 
                                   id="aimagic_line_channel_secret" 
                                   name="aimagic_line_channel_secret" 
                                   value="<?php echo esc_attr(get_option('aimagic_line_channel_secret')); ?>" 
                                   class="regular-text">
                        </td>
                    </tr>
                    <tr>
                        <th scope="row">
                            <label for="aimagic_line_channel_token">
                                <?php _e('Channel Access Token', 'ai-magic-publisher'); ?>
                            </label>
                        </th>
                        <td>
                            <input type="password" 
                                   id="aimagic_line_channel_token" 
                                   name="aimagic_line_channel_token" 
                                   value="<?php echo esc_attr(get_option('aimagic_line_channel_token')); ?>" 
                                   class="regular-text">
                        </td>
                    </tr>
                    <tr>
                        <th scope="row">
                            <?php _e('Webhook URL', 'ai-magic-publisher'); ?>
                        </th>
                        <td>
                            <code><?php echo esc_url(get_rest_url(null, 'aimagic/v1/webhook/line')); ?></code>
                            <button type="button" class="button copy-webhook-url" data-url="<?php echo esc_url(get_rest_url(null, 'aimagic/v1/webhook/line')); ?>">
                                <?php _e('Copy', 'ai-magic-publisher'); ?>
                            </button>
                        </td>
                    </tr>
                </table>
            </div>

            <!-- WeChat Platform Settings -->
            <div class="aimagic-settings-section">
                <h2><?php _e('WeChat Platform Settings', 'ai-magic-publisher'); ?></h2>
                <table class="form-table">
                    <tr>
                        <th scope="row">
                            <label for="aimagic_wechat_app_id">
                                <?php _e('App ID', 'ai-magic-publisher'); ?>
                            </label>
                        </th>
                        <td>
                            <input type="text" 
                                   id="aimagic_wechat_app_id" 
                                   name="aimagic_wechat_app_id" 
                                   value="<?php echo esc_attr(get_option('aimagic_wechat_app_id')); ?>" 
                                   class="regular-text">
                        </td>
                    </tr>
                    <tr>
                        <th scope="row">
                            <label for="aimagic_wechat_app_secret">
                                <?php _e('App Secret', 'ai-magic-publisher'); ?>
                            </label>
                        </th>
                        <td>
                            <input type="password" 
                                   id="aimagic_wechat_app_secret" 
                                   name="aimagic_wechat_app_secret" 
                                   value="<?php echo esc_attr(get_option('aimagic_wechat_app_secret')); ?>" 
                                   class="regular-text">
                        </td>
                    </tr>
                    <tr>
                        <th scope="row">
                            <label for="aimagic_wechat_token">
                                <?php _e('Token', 'ai-magic-publisher'); ?>
                            </label>
                        </th>
                        <td>
                            <input type="text" 
                                   id="aimagic_wechat_token" 
                                   name="aimagic_wechat_token" 
                                   value="<?php echo esc_attr(get_option('aimagic_wechat_token')); ?>" 
                                   class="regular-text">
                        </td>
                    </tr>
                    <tr>
                        <th scope="row">
                            <?php _e('Webhook URL', 'ai-magic-publisher'); ?>
                        </th>
                        <td>
                            <code><?php echo esc_url(get_rest_url(null, 'aimagic/v1/webhook/wechat')); ?></code>
                            <button type="button" class="button copy-webhook-url" data-url="<?php echo esc_url(get_rest_url(null, 'aimagic/v1/webhook/wechat')); ?>">
                                <?php _e('Copy', 'ai-magic-publisher'); ?>
                            </button>
                        </td>
                    </tr>
                </table>
            </div>
        </div>

        <?php submit_button(); ?>
    </form>
</div>

<script type="text/javascript">
jQuery(document).ready(function($) {
    // Handle copy webhook URL
    $('.copy-webhook-url').on('click', function() {
        var url = $(this).data('url');
        navigator.clipboard.writeText(url).then(function() {
            alert(<?php echo json_encode(__('Webhook URL copied to clipboard!', 'ai-magic-publisher')); ?>);
        }).catch(function() {
            alert(<?php echo json_encode(__('Failed to copy URL. Please try again.', 'ai-magic-publisher')); ?>);
        });
    });

    // Add password visibility toggle for sensitive fields
    $('.aimagic-settings-container input[type="password"]').each(function() {
        var $input = $(this);
        var $toggle = $('<button type="button" class="button show-hide-password">' + 
                       <?php echo json_encode(__('Show', 'ai-magic-publisher')); ?> + '</button>');
        
        $input.after($toggle);
        
        $toggle.on('click', function(e) {
            e.preventDefault();
            if ($input.attr('type') === 'password') {
                $input.attr('type', 'text');
                $toggle.text(<?php echo json_encode(__('Hide', 'ai-magic-publisher')); ?>);
            } else {
                $input.attr('type', 'password');
                $toggle.text(<?php echo json_encode(__('Show', 'ai-magic-publisher')); ?>);
            }
        });
    });

    // Form validation
    $('form').on('submit', function(e) {
        var gpt4Key = $('#aimagic_gpt4_api_key').val();
        if (!gpt4Key) {
            alert(<?php echo json_encode(__('GPT-4 API Key is required.', 'ai-magic-publisher')); ?>);
            e.preventDefault();
            return false;
        }
    });
});
</script>

目錄：/www/wwwroot/xart004.heatgroups.top/wp-content/plugins/ai_plateform_v2/files_2025/admin/css
檔名：admin.css
==================================================
/**
 * AI Magic Publisher Admin Styles
 * Version: 1.0.0
 */

/* Dashboard Styles */
.aimagic-dashboard .welcome-panel {
    padding-bottom: 23px;
}

.aimagic-dashboard .welcome-panel-content {
    max-width: none;
}

.aimagic-dashboard .welcome-panel-column-container {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
    gap: 20px;
    margin: 20px 0;
}

.aimagic-dashboard .welcome-panel-column {
    padding: 0 10px;
}

/* Status Badges */
.status-badge {
    display: inline-block;
    padding: 4px 8px;
    border-radius: 3px;
    font-size: 12px;
    font-weight: 500;
    line-height: 1;
    text-transform: uppercase;
}

.status-pending {
    background-color: #f0f6fc;
    color: #1a73e8;
    border: 1px solid #1a73e8;
}

.status-processing {
    background-color: #fff8e1;
    color: #f57c00;
    border: 1px solid #f57c00;
}

.status-completed {
    background-color: #e8f5e9;
    color: #2e7d32;
    border: 1px solid #2e7d32;
}

.status-failed {
    background-color: #fce8e8;
    color: #d32f2f;
    border: 1px solid #d32f2f;
}

.status-active {
    background-color: #e8f5e9;
    color: #2e7d32;
    border: 1px solid #2e7d32;
}

.status-inactive {
    background-color: #f5f5f5;
    color: #757575;
    border: 1px solid #757575;
}

/* Platform Badges */
.platform-badge {
    display: inline-block;
    padding: 4px 8px;
    border-radius: 3px;
    font-size: 12px;
    font-weight: 500;
}

.platform-line {
    background-color: #00c300;
    color: #ffffff;
}

.platform-wechat {
    background-color: #07c160;
    color: #ffffff;
}

/* List Table Enhancements */
.wp-list-table .column-actions {
    width: 120px;
}

.wp-list-table .column-status,
.wp-list-table .column-platform {
    width: 100px;
    text-align: center;
}

.wp-list-table .column-created_at,
.wp-list-table .column-updated_at {
    width: 150px;
}

.wp-list-table .column-quota_daily,
.wp-list-table .column-quota_used {
    width: 100px;
    text-align: right;
}

/* Form Styles */
.aimagic-form-container {
    background: #fff;
    border: 1px solid #ccd0d4;
    box-shadow: 0 1px 1px rgba(0, 0, 0, 0.04);
    margin: 20px 0;
    padding: 20px;
}

.aimagic-settings-container {
    max-width: 1200px;
}

.aimagic-settings-section {
    background: #fff;
    border: 1px solid #ccd0d4;
    box-shadow: 0 1px 1px rgba(0, 0, 0, 0.04);
    margin-bottom: 20px;
    padding: 20px;
}

.aimagic-settings-section h2 {
    margin-top: 0;
    padding-bottom: 10px;
    border-bottom: 1px solid #eee;
}

/* API Key and Sensitive Fields */
.api-key-field {
    position: relative;
    display: flex;
    align-items: center;
    gap: 10px;
}

.api-key-field .show-hide-password {
    flex-shrink: 0;
}

/* Dashboard Widgets */
.aimagic-dashboard-widgets {
    margin-top: 20px;
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(400px, 1fr));
    gap: 20px;
}

.aimagic-dashboard-widgets .postbox {
    margin-bottom: 0;
}

/* System Status Indicators */
.system-status-list {
    margin: 0;
    padding: 0;
    list-style: none;
}

.system-status-item {
    display: flex;
    align-items: center;
    margin-bottom: 10px;
}

.status-indicator {
    width: 12px;
    height: 12px;
    border-radius: 50%;
    margin-right: 10px;
}

.status-good {
    background-color: #2e7d32;
}

.status-warning {
    background-color: #f57c00;
}

.status-error {
    background-color: #d32f2f;
}

/* Quick Stats Cards */
.quick-stats-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
    gap: 15px;
    margin: 15px 0;
}

.stat-card {
    background: #fff;
    border: 1px solid #ccd0d4;
    border-radius: 4px;
    padding: 15px;
    text-align: center;
}

.stat-card h3 {
    margin: 0 0 10px 0;
    color: #23282d;
}

.stat-value {
    font-size: 24px;
    font-weight: 600;
    color: #1e88e5;
}

/* Task Details Modal */
.task-details-modal {
    position: fixed;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    background: #fff;
    padding: 20px;
    border-radius: 4px;
    box-shadow: 0 5px 15px rgba(0, 0, 0, 0.3);
    z-index: 160000;
    max-width: 800px;
    width: 90%;
    max-height: 90vh;
    overflow-y: auto;
}

.task-details-modal-backdrop {
    position: fixed;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: rgba(0, 0, 0, 0.7);
    z-index: 159999;
}

/* Loading States */
.aimagic-loading {
    position: relative;
    pointer-events: none;
    opacity: 0.7;
}

.aimagic-loading::after {
    content: '';
    position: absolute;
    top: 50%;
    left: 50%;
    width: 20px;
    height: 20px;
    margin: -10px 0 0 -10px;
    border: 2px solid #1e88e5;
    border-top-color: transparent;
    border-radius: 50%;
    animation: aimagic-spinner 0.6s linear infinite;
}

@keyframes aimagic-spinner {
    to {
        transform: rotate(360deg);
    }
}

/* Responsive Adjustments */
@media screen and (max-width: 782px) {
    .aimagic-dashboard .welcome-panel-column-container {
        grid-template-columns: 1fr;
    }

    .aimagic-dashboard-widgets {
        grid-template-columns: 1fr;
    }

    .wp-list-table .column-actions,
    .wp-list-table .column-status,
    .wp-list-table .column-platform {
        width: auto;
    }

    .task-details-modal {
        width: 95%;
        margin: 10px;
    }
}

/* RTL Support */
.rtl .status-indicator {
    margin-right: 0;
    margin-left: 10px;
}

.rtl .wp-list-table .column-quota_daily,
.rtl .wp-list-table .column-quota_used {
    text-align: left;
}

/* Accessibility Improvements */
.aimagic-settings-container input:focus,
.aimagic-settings-container button:focus {
    outline: 2px solid #2271b1;
    outline-offset: 1px;
}

.screen-reader-text {
    border: 0;
    clip: rect(1px, 1px, 1px, 1px);
    clip-path: inset(50%);
    height: 1px;
    margin: -1px;
    overflow: hidden;
    padding: 0;
    position: absolute;
    width: 1px;
    word-wrap: normal !important;
}

/* Dark Mode Support */
@media (prefers-color-scheme: dark) {
    body.admin-color-modern {
        .aimagic-settings-section,
        .aimagic-form-container,
        .stat-card {
            background: #1e1e1e;
            border-color: #3c434a;
        }

        .status-badge {
            border-color: #3c434a;
        }

        .stat-value {
            color: #3498db;
        }

        .system-status-item {
            color: #bbc8d4;
        }
    }
}

/* Custom Animations */
.aimagic-fade-in {
    animation: aimagic-fade-in 0.3s ease-in-out;
}

@keyframes aimagic-fade-in {
    from {
        opacity: 0;
        transform: translateY(-10px);
    }
    to {
        opacity: 1;
        transform: translateY(0);
    }
}

/* Toast Notifications */
.aimagic-toast {
    position: fixed;
    bottom: 20px;
    right: 20px;
    padding: 12px 24px;
    background: #323232;
    color: #fff;
    border-radius: 4px;
    box-shadow: 0 2px 5px rgba(0, 0, 0, 0.2);
    z-index: 170000;
    animation: aimagic-toast-in 0.3s ease-out;
}

@keyframes aimagic-toast-in {
    from {
        transform: translateY(100%);
        opacity: 0;
    }
    to {
        transform: translateY(0);
        opacity: 1;
    }
}

/* Print Styles */
@media print {
    .aimagic-dashboard-widgets,
    .aimagic-settings-container {
        display: block;
    }

    .no-print {
        display: none !important;
    }

    .status-badge,
    .platform-badge {
        border: 1px solid #000;
        color: #000;
        background: none !important;
    }
}

目錄：/www/wwwroot/xart004.heatgroups.top/wp-content/plugins/ai_plateform_v2/files_2025/admin/views
檔名：admin-prompts.php
==================================================
<?php
if (!defined('ABSPATH')) exit;

// Check current user capabilities
if (!current_user_can('manage_options')) {
    wp_die(__('You do not have sufficient permissions to access this page.'));
}

// Load the Prompts List Table class
require_once AIMAGIC_PLUGIN_DIR . 'includes/admin/class-admin-prompts-list.php';

// Create an instance of our list table
$prompts_list_table = new AIMagic\Admin\Prompts_List_Table();
$prompts_list_table->prepare_items();
?>

<div class="wrap">
    <h1 class="wp-heading-inline"><?php _e('AI Prompts', 'aimagic'); ?></h1>
    <a href="<?php echo admin_url('admin.php?page=aimagic-prompts&action=add'); ?>" class="page-title-action">
        <?php _e('Add New', 'aimagic'); ?>
    </a>
    <hr class="wp-header-end">

    <!-- Prompt Statistics -->
    <div class="prompt-stats">
        <?php
        global $wpdb;
        $stats = $wpdb->get_row("
            SELECT 
                COUNT(*) as total_prompts,
                COUNT(CASE WHEN status = 'active' THEN 1 END) as active_prompts,
                SUM(usage_count) as total_uses,
                AVG(success_rate) as avg_success_rate,
                COUNT(DISTINCT category) as categories_count,
                COUNT(DISTINCT language) as languages_count
            FROM {$wpdb->prefix}aimagic_prompts
        ");
        ?>
        <div class="stat-card">
            <h3><?php _e('Total Prompts', 'aimagic'); ?></h3>
            <div class="stat-value"><?php echo number_format_i18n($stats->total_prompts); ?></div>
        </div>
        <div class="stat-card">
            <h3><?php _e('Active Prompts', 'aimagic'); ?></h3>
            <div class="stat-value"><?php echo number_format_i18n($stats->active_prompts); ?></div>
        </div>
        <div class="stat-card">
            <h3><?php _e('Total Uses', 'aimagic'); ?></h3>
            <div class="stat-value"><?php echo number_format_i18n($stats->total_uses); ?></div>
        </div>
        <div class="stat-card">
            <h3><?php _e('Success Rate', 'aimagic'); ?></h3>
            <div class="stat-value"><?php echo number_format($stats->avg_success_rate, 1); ?>%</div>
        </div>
        <div class="stat-card">
            <h3><?php _e('Categories', 'aimagic'); ?></h3>
            <div class="stat-value"><?php echo number_format_i18n($stats->categories_count); ?></div>
        </div>
        <div class="stat-card">
            <h3><?php _e('Languages', 'aimagic'); ?></h3>
            <div class="stat-value"><?php echo number_format_i18n($stats->languages_count); ?></div>
        </div>
    </div>

    <!-- Category Overview -->
    <div class="category-overview">
        <h2><?php _e('Categories Overview', 'aimagic'); ?></h2>
        <?php
        $categories = $wpdb->get_results("
            SELECT 
                category,
                COUNT(*) as prompt_count,
                SUM(usage_count) as usage_count,
                AVG(success_rate) as success_rate
            FROM {$wpdb->prefix}aimagic_prompts
            GROUP BY category
            ORDER BY prompt_count DESC
        ");
        ?>
        <div class="category-grid">
            <?php foreach ($categories as $category): ?>
            <div class="category-card">
                <h3><?php echo esc_html($category->category); ?></h3>
                <div class="category-stats">
                    <div class="stat">
                        <span class="label"><?php _e('Prompts:', 'aimagic'); ?></span>
                        <span class="value"><?php echo number_format_i18n($category->prompt_count); ?></span>
                    </div>
                    <div class="stat">
                        <span class="label"><?php _e('Uses:', 'aimagic'); ?></span>
                        <span class="value"><?php echo number_format_i18n($category->usage_count); ?></span>
                    </div>
                    <div class="stat">
                        <span class="label"><?php _e('Success:', 'aimagic'); ?></span>
                        <span class="value"><?php echo number_format($category->success_rate, 1); ?>%</span>
                    </div>
                </div>
            </div>
            <?php endforeach; ?>
        </div>
    </div>

    <!-- Filters -->
    <form method="post">
        <div class="tablenav top">
            <div class="alignleft actions">
                <select name="category" id="filter-by-category">
                    <option value=""><?php _e('All Categories', 'aimagic'); ?></option>
                    <?php
                    $categories = $wpdb->get_col("SELECT DISTINCT category FROM {$wpdb->prefix}aimagic_prompts ORDER BY category ASC");
                    foreach ($categories as $category) {
                        echo sprintf(
                            '<option value="%s" %s>%s</option>',
                            esc_attr($category),
                            selected(isset($_GET['category']) ? $_GET['category'] : '', $category, false),
                            esc_html($category)
                        );
                    }
                    ?>
                </select>
                <select name="language" id="filter-by-language">
                    <option value=""><?php _e('All Languages', 'aimagic'); ?></option>
                    <?php
                    $languages = $wpdb->get_col("SELECT DISTINCT language FROM {$wpdb->prefix}aimagic_prompts ORDER BY language ASC");
                    foreach ($languages as $language) {
                        echo sprintf(
                            '<option value="%s" %s>%s</option>',
                            esc_attr($language),
                            selected(isset($_GET['language']) ? $_GET['language'] : '', $language, false),
                            esc_html($language)
                        );
                    }
                    ?>
                </select>
                <select name="status" id="filter-by-status">
                    <option value=""><?php _e('All Statuses', 'aimagic'); ?></option>
                    <option value="active" <?php selected(isset($_GET['status']) ? $_GET['status'] : '', 'active'); ?>>
                        <?php _e('Active', 'aimagic'); ?>
                    </option>
                    <option value="inactive" <?php selected(isset($_GET['status']) ? $_GET['status'] : '', 'inactive'); ?>>
                        <?php _e('Inactive', 'aimagic'); ?>
                    </option>
                    <option value="testing" <?php selected(isset($_GET['status']) ? $_GET['status'] : '', 'testing'); ?>>
                        <?php _e('Testing', 'aimagic'); ?>
                    </option>
                </select>
                <select name="sort" id="sort-by">
                    <option value="usage" <?php selected(isset($_GET['sort']) ? $_GET['sort'] : '', 'usage'); ?>>
                        <?php _e('Sort by Usage', 'aimagic'); ?>
                    </option>
                    <option value="success" <?php selected(isset($_GET['sort']) ? $_GET['sort'] : '', 'success'); ?>>
                        <?php _e('Sort by Success Rate', 'aimagic'); ?>
                    </option>
                    <option value="newest" <?php selected(isset($_GET['sort']) ? $_GET['sort'] : '', 'newest'); ?>>
                        <?php _e('Sort by Newest', 'aimagic'); ?>
                    </option>
                </select>
                <?php submit_button(__('Filter', 'aimagic'), 'action', 'filter_action', false); ?>
                <?php submit_button(__('Test Selected', 'aimagic'), 'secondary', 'test_selected', false); ?>
            </div>
        </div>

        <?php
        // Display search box and table
        $prompts_list_table->search_box('Search Prompts', 'search_prompts');
        $prompts_list_table->display();
        ?>
    </form>
</div>

<style>
.prompt-stats {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
    gap: 20px;
    margin: 20px 0;
}

.stat-card {
    background: #fff;
    padding: 20px;
    border-radius: 8px;
    box-shadow: 0 1px 3px rgba(0,0,0,0.1);
}

.stat-card h3 {
    margin: 0 0 10px 0;
    font-size: 14px;
    color: #666;
}

.stat-card .stat-value {
    font-size: 24px;
    font-weight: bold;
    color: #2271b1;
}

.category-overview {
    background: #fff;
    padding: 20px;
    border-radius: 8px;
    box-shadow: 0 1px 3px rgba(0,0,0,0.1);
    margin: 20px 0;
}

.category-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
    gap: 15px;
    margin-top: 15px;
}

.category-card {
    border: 1px solid #ddd;
    border-radius: 6px;
    padding: 15px;
}

.category-card h3 {
    margin: 0 0 10px 0;
    font-size: 16px;
}

.category-stats {
    display: grid;
    grid-template-columns: repeat(3, 1fr);
    gap: 10px;
}

.category-stats .stat {
    text-align: center;
}

.category-stats .label {
    display: block;
    font-size: 12px;
    color: #666;
}

.category-stats .value {
    display: block;
    font-size: 16px;
    font-weight: bold;
    color: #2271b1;
}

.column-usage,
.column-success_rate {
    width: 150px;
}

.usage-bar {
    height: 8px;
    background: #f0f0f1;
    border-radius: 4px;
    overflow: hidden;
}

.usage-bar-fill {
    height: 100%;
    background: #2271b1;
    transition: width 0.3s ease;
}

.success-high {
    color: #00a32a;
}

.success-medium {
    color: #dba617;
}

.success-low {
    color: #d63638;
}

.status-active {
    color: #00a32a;
}

.status-inactive {
    color: #72777c;
}

.status-testing {
    color: #2271b1;
}
</style>

<script type="text/javascript">
jQuery(document).ready(function($) {
    // Handle filter changes
    $('#filter-by-category, #filter-by-language, #filter-by-status, #sort-by').change(function() {
        $(this).closest('form').submit();
    });

    // Handle test selected prompts
    $('#test_selected').click(function(e) {
        e.preventDefault();
        var selected = $('input[name="prompts[]"]:checked').map(function() {
            return $(this).val();
        }).get();

        if (selected.length === 0) {
            alert('<?php _e('Please select prompts to test.', 'aimagic'); ?>');
            return;
        }

        // Show testing progress
        var $button = $(this);
        $button.prop('disabled', true).text('<?php _e('Testing...', 'aimagic'); ?>');

        // Test each selected prompt
        testPrompts(selected).then(function() {
            location.reload();
        }).catch(function(error) {
            alert(error);
            $button.prop('disabled', false).text('<?php _e('Test Selected', 'aimagic'); ?>');
        });
    });

    function testPrompts(promptIds) {
        return new Promise(function(resolve, reject) {
            var tested = 0;
            var errors = [];

            promptIds.forEach(function(id) {
                $.ajax({
                    url: ajaxurl,
                    method: 'POST',
                    data: {
                        action: 'test_prompt',
                        prompt_id: id,
                        nonce: '<?php echo wp_create_nonce('test_prompt'); ?>'
                    },
                    success: function() {
                        tested++;
                        if (tested === promptIds.length) {
                            if (errors.length > 0) {
                                reject(errors.join('\n'));
                            } else {
                                resolve();
                            }
                        }
                    },
                    error: function(xhr) {
                        tested++;
                        errors.push('Prompt #' + id + ': ' + xhr.responseText);
                        if (tested === promptIds.length) {
                            reject(errors.join('\n'));
                        }
                    }
                });
            });
        });
    }

    // Initialize tooltips
    $('.usage-bar').tooltip({
        items: '.usage-bar',
        content: function() {
            return $(this).data('tooltip');
        }
    });
});
</script>

目錄：/www/wwwroot/xart004.heatgroups.top/wp-content/plugins/ai_plateform_v2/files_2025/admin/views
檔名：admin-contents.php
==================================================
<?php
if (!defined('ABSPATH')) exit;

// Check current user capabilities
if (!current_user_can('manage_options')) {
    wp_die(__('You do not have sufficient permissions to access this page.'));
}

// Load the Contents List Table class
require_once AIMAGIC_PLUGIN_DIR . 'includes/admin/class-admin-contents-list.php';

// Create an instance of our list table
$contents_list_table = new AIMagic\Admin\Contents_List_Table();
$contents_list_table->prepare_items();
?>

<div class="wrap">
    <h1 class="wp-heading-inline"><?php _e('AI Generated Contents', 'aimagic'); ?></h1>
    <a href="<?php echo admin_url('admin.php?page=aimagic-contents&action=add'); ?>" class="page-title-action">
        <?php _e('Add New', 'aimagic'); ?>
    </a>
    <hr class="wp-header-end">

    <!-- Content Statistics -->
    <div class="content-stats">
        <?php
        global $wpdb;
        $stats = $wpdb->get_row("
            SELECT 
                COUNT(*) as total_contents,
                COUNT(CASE WHEN content_type = 'text' THEN 1 END) as text_contents,
                COUNT(CASE WHEN content_type = 'image' THEN 1 END) as image_contents,
                COUNT(CASE WHEN content_type = 'video' THEN 1 END) as video_contents,
                SUM(storage_size) as total_storage,
                AVG(generation_time) as avg_generation_time
            FROM {$wpdb->prefix}aimagic_contents
        ");
        ?>
        <div class="stat-card">
            <h3><?php _e('Total Contents', 'aimagic'); ?></h3>
            <div class="stat-value"><?php echo number_format_i18n($stats->total_contents); ?></div>
        </div>
        <div class="stat-card">
            <h3><?php _e('Text Contents', 'aimagic'); ?></h3>
            <div class="stat-value"><?php echo number_format_i18n($stats->text_contents); ?></div>
        </div>
        <div class="stat-card">
            <h3><?php _e('Image Contents', 'aimagic'); ?></h3>
            <div class="stat-value"><?php echo number_format_i18n($stats->image_contents); ?></div>
        </div>
        <div class="stat-card">
            <h3><?php _e('Video Contents', 'aimagic'); ?></h3>
            <div class="stat-value"><?php echo number_format_i18n($stats->video_contents); ?></div>
        </div>
        <div class="stat-card">
            <h3><?php _e('Storage Used', 'aimagic'); ?></h3>
            <div class="stat-value"><?php echo size_format($stats->total_storage); ?></div>
        </div>
        <div class="stat-card">
            <h3><?php _e('Avg. Generation Time', 'aimagic'); ?></h3>
            <div class="stat-value"><?php echo number_format($stats->avg_generation_time, 2); ?>s</div>
        </div>
    </div>

    <!-- Filters -->
    <form method="post">
        <div class="tablenav top">
            <div class="alignleft actions">
                <select name="type" id="filter-by-type">
                    <option value=""><?php _e('All Types', 'aimagic'); ?></option>
                    <option value="text" <?php selected(isset($_GET['type']) ? $_GET['type'] : '', 'text'); ?>>
                        <?php _e('Text', 'aimagic'); ?>
                    </option>
                    <option value="image" <?php selected(isset($_GET['type']) ? $_GET['type'] : '', 'image'); ?>>
                        <?php _e('Image', 'aimagic'); ?>
                    </option>
                    <option value="video" <?php selected(isset($_GET['type']) ? $_GET['type'] : '', 'video'); ?>>
                        <?php _e('Video', 'aimagic'); ?>
                    </option>
                </select>
                <select name="status" id="filter-by-status">
                    <option value=""><?php _e('All Statuses', 'aimagic'); ?></option>
                    <option value="published" <?php selected(isset($_GET['status']) ? $_GET['status'] : '', 'published'); ?>>
                        <?php _e('Published', 'aimagic'); ?>
                    </option>
                    <option value="draft" <?php selected(isset($_GET['status']) ? $_GET['status'] : '', 'draft'); ?>>
                        <?php _e('Draft', 'aimagic'); ?>
                    </option>
                    <option value="archived" <?php selected(isset($_GET['status']) ? $_GET['status'] : '', 'archived'); ?>>
                        <?php _e('Archived', 'aimagic'); ?>
                    </option>
                </select>
                <select name="organization" id="filter-by-organization">
                    <option value=""><?php _e('All Organizations', 'aimagic'); ?></option>
                    <?php
                    $organizations = $wpdb->get_results("
                        SELECT id, name 
                        FROM {$wpdb->prefix}aimagic_organizations 
                        WHERE status = 'active' 
                        ORDER BY name ASC
                    ");
                    foreach ($organizations as $org) {
                        echo sprintf(
                            '<option value="%d" %s>%s</option>',
                            $org->id,
                            selected(isset($_GET['organization']) ? $_GET['organization'] : '', $org->id, false),
                            esc_html($org->name)
                        );
                    }
                    ?>
                </select>
                <input type="date" name="date_from" id="filter-date-from" value="<?php 
                    echo isset($_GET['date_from']) ? esc_attr($_GET['date_from']) : ''; 
                ?>" placeholder="<?php _e('From Date', 'aimagic'); ?>">
                <input type="date" name="date_to" id="filter-date-to" value="<?php 
                    echo isset($_GET['date_to']) ? esc_attr($_GET['date_to']) : ''; 
                ?>" placeholder="<?php _e('To Date', 'aimagic'); ?>">
                <?php submit_button(__('Filter', 'aimagic'), 'action', 'filter_action', false); ?>
                <?php submit_button(__('Export Selected', 'aimagic'), 'secondary', 'export_selected', false); ?>
            </div>
        </div>

        <?php
        // Display search box and table
        $contents_list_table->search_box('Search Contents', 'search_contents');
        $contents_list_table->display();
        ?>
    </form>
</div>

<style>
.content-stats {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
    gap: 20px;
    margin: 20px 0;
}

.stat-card {
    background: #fff;
    padding: 20px;
    border-radius: 8px;
    box-shadow: 0 1px 3px rgba(0,0,0,0.1);
}

.stat-card h3 {
    margin: 0 0 10px 0;
    font-size: 14px;
    color: #666;
}

.stat-card .stat-value {
    font-size: 24px;
    font-weight: bold;
    color: #2271b1;
}

.column-preview {
    width: 150px;
}

.preview-thumbnail {
    max-width: 100px;
    max-height: 100px;
    border-radius: 4px;
}

.preview-text {
    max-height: 100px;
    overflow: hidden;
    text-overflow: ellipsis;
    display: -webkit-box;
    -webkit-line-clamp: 4;
    -webkit-box-orient: vertical;
}

.status-published {
    color: #00a32a;
}

.status-draft {
    color: #dba617;
}

.status-archived {
    color: #72777c;
}

.generation-info {
    font-size: 12px;
    color: #666;
}

.usage-info {
    display: flex;
    align-items: center;
    gap: 10px;
}

.usage-count {
    background: #f0f0f1;
    padding: 2px 6px;
    border-radius: 3px;
    font-size: 12px;
}
</style>

<script type="text/javascript">
jQuery(document).ready(function($) {
    // Handle filter changes
    $('#filter-by-type, #filter-by-status, #filter-by-organization').change(function() {
        $(this).closest('form').submit();
    });

    // Handle date range validation
    $('#filter-date-from, #filter-date-to').change(function() {
        var fromDate = $('#filter-date-from').val();
        var toDate = $('#filter-date-to').val();
        
        if (fromDate && toDate && fromDate > toDate) {
            alert('<?php _e('From date cannot be later than To date', 'aimagic'); ?>');
            $(this).val('');
        }
    });

    // Handle bulk export
    $('#export_selected').click(function(e) {
        e.preventDefault();
        var selected = $('input[name="contents[]"]:checked').map(function() {
            return $(this).val();
        }).get();

        if (selected.length === 0) {
            alert('<?php _e('Please select contents to export.', 'aimagic'); ?>');
            return;
        }

        // Create form for export
        var $form = $('<form>')
            .attr('method', 'post')
            .attr('action', ajaxurl)
            .append($('<input>')
                .attr('type', 'hidden')
                .attr('name', 'action')
                .attr('value', 'export_contents')
            )
            .append($('<input>')
                .attr('type', 'hidden')
                .attr('name', 'contents')
                .attr('value', selected.join(','))
            )
            .append($('<input>')
                .attr('type', 'hidden')
                .attr('name', 'nonce')
                .attr('value', '<?php echo wp_create_nonce('export_contents'); ?>')
            );

        $('body').append($form);
        $form.submit();
    });

    // Initialize tooltips
    $('.preview-thumbnail').tooltip({
        items: 'img',
        content: function() {
            return $('<img>').attr('src', $(this).attr('src'));
        }
    });
});
</script>

目錄：/www/wwwroot/xart004.heatgroups.top/wp-content/plugins/ai_plateform_v2/files_2025/admin/views
檔名：admin-ai-resources.php
==================================================
<?php
if (!defined('ABSPATH')) exit;

// Check current user capabilities
if (!current_user_can('manage_options')) {
    wp_die(__('You do not have sufficient permissions to access this page.'));
}

// Load the AI Resources List Table class
require_once AIMAGIC_PLUGIN_DIR . 'includes/admin/class-admin-ai-resources-list.php';

// Create an instance of our list table
$ai_resources_list_table = new AIMagic\Admin\AI_Resources_List_Table();
$ai_resources_list_table->prepare_items();
?>

<div class="wrap">
    <h1 class="wp-heading-inline"><?php _e('AI Resources', 'aimagic'); ?></h1>
    <a href="<?php echo admin_url('admin.php?page=aimagic-ai-resources&action=add'); ?>" class="page-title-action">
        <?php _e('Add New', 'aimagic'); ?>
    </a>
    <hr class="wp-header-end">

    <!-- Resource Overview -->
    <div class="resource-overview">
        <?php
        global $wpdb;
        $stats = $wpdb->get_row("
            SELECT 
                COUNT(*) as total_resources,
                COUNT(CASE WHEN status = 'active' THEN 1 END) as active_resources,
                SUM(total_requests) as total_requests,
                AVG(success_rate) as avg_success_rate
            FROM {$wpdb->prefix}aimagic_ai_resources
        ");
        ?>
        <div class="stat-card">
            <h3><?php _e('Total Resources', 'aimagic'); ?></h3>
            <div class="stat-value"><?php echo number_format_i18n($stats->total_resources); ?></div>
        </div>
        <div class="stat-card">
            <h3><?php _e('Active Resources', 'aimagic'); ?></h3>
            <div class="stat-value"><?php echo number_format_i18n($stats->active_resources); ?></div>
        </div>
        <div class="stat-card">
            <h3><?php _e('Total Requests', 'aimagic'); ?></h3>
            <div class="stat-value"><?php echo number_format_i18n($stats->total_requests); ?></div>
        </div>
        <div class="stat-card">
            <h3><?php _e('Avg Success Rate', 'aimagic'); ?></h3>
            <div class="stat-value"><?php echo number_format($stats->avg_success_rate, 1); ?>%</div>
        </div>
    </div>

    <!-- Health Check -->
    <div class="resource-health">
        <h2><?php _e('Resource Health', 'aimagic'); ?></h2>
        <?php
        $health_checks = $wpdb->get_results("
            SELECT r.name, h.*
            FROM {$wpdb->prefix}aimagic_ai_resources r
            JOIN {$wpdb->prefix}aimagic_resource_health h ON r.id = h.resource_id
            WHERE r.status = 'active'
            ORDER BY h.last_check DESC
        ");
        ?>
        <div class="health-grid">
            <?php foreach ($health_checks as $check): ?>
            <div class="health-card <?php echo esc_attr($check->status); ?>">
                <h4><?php echo esc_html($check->name); ?></h4>
                <div class="status-indicator"></div>
                <div class="health-details">
                    <p><?php echo esc_html($check->status_message); ?></p>
                    <small><?php echo human_time_diff(strtotime($check->last_check), current_time('timestamp')); ?> ago</small>
                </div>
            </div>
            <?php endforeach; ?>
        </div>
    </div>

    <!-- Filters -->
    <form method="post">
        <div class="tablenav top">
            <div class="alignleft actions">
                <select name="type" id="filter-by-type">
                    <option value=""><?php _e('All Types', 'aimagic'); ?></option>
                    <option value="text"><?php _e('Text Generation', 'aimagic'); ?></option>
                    <option value="image"><?php _e('Image Generation', 'aimagic'); ?></option>
                    <option value="video"><?php _e('Video Generation', 'aimagic'); ?></option>
                    <option value="audio"><?php _e('Audio Processing', 'aimagic'); ?></option>
                </select>
                <select name="provider" id="filter-by-provider">
                    <option value=""><?php _e('All Providers', 'aimagic'); ?></option>
                    <option value="openai"><?php _e('OpenAI', 'aimagic'); ?></option>
                    <option value="google"><?php _e('Google AI', 'aimagic'); ?></option>
                    <option value="azure"><?php _e('Azure AI', 'aimagic'); ?></option>
                    <option value="custom"><?php _e('Custom', 'aimagic'); ?></option>
                </select>
                <select name="status" id="filter-by-status">
                    <option value=""><?php _e('All Statuses', 'aimagic'); ?></option>
                    <option value="active"><?php _e('Active', 'aimagic'); ?></option>
                    <option value="inactive"><?php _e('Inactive', 'aimagic'); ?></option>
                    <option value="error"><?php _e('Error', 'aimagic'); ?></option>
                </select>
                <?php submit_button(__('Filter', 'aimagic'), 'action', 'filter_action', false); ?>
                <?php submit_button(__('Test Selected', 'aimagic'), 'secondary', 'test_selected', false); ?>
            </div>
        </div>

        <?php
        // Display search box and table
        $ai_resources_list_table->search_box('Search Resources', 'search_resources');
        $ai_resources_list_table->display();
        ?>
    </form>
</div>

<style>
.resource-overview {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
    gap: 20px;
    margin: 20px 0;
}

.stat-card {
    background: #fff;
    padding: 20px;
    border-radius: 8px;
    box-shadow: 0 1px 3px rgba(0,0,0,0.1);
}

.stat-card h3 {
    margin: 0 0 10px 0;
    font-size: 14px;
    color: #666;
}

.stat-card .stat-value {
    font-size: 24px;
    font-weight: bold;
    color: #2271b1;
}

.resource-health {
    background: #fff;
    padding: 20px;
    border-radius: 8px;
    box-shadow: 0 1px 3px rgba(0,0,0,0.1);
    margin: 20px 0;
}

.health-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
    gap: 15px;
    margin-top: 15px;
}

.health-card {
    border: 1px solid #ddd;
    border-radius: 6px;
    padding: 15px;
    position: relative;
}

.health-card h4 {
    margin: 0 0 10px 0;
}

.health-card .status-indicator {
    width: 10px;
    height: 10px;
    border-radius: 50%;
    position: absolute;
    top: 15px;
    right: 15px;
}

.health-card.healthy .status-indicator {
    background: #00a32a;
}

.health-card.warning .status-indicator {
    background: #dba617;
}

.health-card.error .status-indicator {
    background: #d63638;
}

.health-details small {
    color: #666;
    display: block;
    margin-top: 5px;
}

.column-status {
    width: 100px;
}

.column-provider {
    width: 120px;
}

.column-usage {
    width: 150px;
}

.column-latency {
    width: 100px;
}

.usage-bar {
    height: 8px;
    background: #f0f0f1;
    border-radius: 4px;
    overflow: hidden;
}

.usage-bar-fill {
    height: 100%;
    background: #2271b1;
    transition: width 0.3s ease;
}

.usage-warning .usage-bar-fill {
    background: #dba617;
}

.usage-critical .usage-bar-fill {
    background: #d63638;
}
</style>

<script type="text/javascript">
jQuery(document).ready(function($) {
    // Handle filter changes
    $('#filter-by-type, #filter-by-provider, #filter-by-status').change(function() {
        var type = $('#filter-by-type').val();
        var provider = $('#filter-by-provider').val();
        var status = $('#filter-by-status').val();
        var url = new URL(window.location.href);
        
        if (type) url.searchParams.set('type', type);
        else url.searchParams.delete('type');
        
        if (provider) url.searchParams.set('provider', provider);
        else url.searchParams.delete('provider');
        
        if (status) url.searchParams.set('status', status);
        else url.searchParams.delete('status');
        
        window.location.href = url.toString();
    });

    // Handle test selected resources
    $('#test_selected').click(function(e) {
        e.preventDefault();
        var selected = $('input[name="resources[]"]:checked').map(function() {
            return $(this).val();
        }).get();

        if (selected.length === 0) {
            alert('<?php _e('Please select resources to test.', 'aimagic'); ?>');
            return;
        }

        // Show testing progress
        var $button = $(this);
        $button.prop('disabled', true).text('<?php _e('Testing...', 'aimagic'); ?>');

        // Test each selected resource
        testResources(selected).then(function() {
            location.reload();
        }).catch(function(error) {
            alert(error);
            $button.prop('disabled', false).text('<?php _e('Test Selected', 'aimagic'); ?>');
        });
    });

    function testResources(resourceIds) {
        return new Promise(function(resolve, reject) {
            var tested = 0;
            var errors = [];

            resourceIds.forEach(function(id) {
                $.ajax({
                    url: ajaxurl,
                    method: 'POST',
                    data: {
                        action: 'test_ai_resource',
                        resource_id: id,
                        nonce: '<?php echo wp_create_nonce('test_ai_resource'); ?>'
                    },
                    success: function() {
                        tested++;
                        if (tested === resourceIds.length) {
                            if (errors.length > 0) {
                                reject(errors.join('\n'));
                            } else {
                                resolve();
                            }
                        }
                    },
                    error: function(xhr) {
                        tested++;
                        errors.push('Resource #' + id + ': ' + xhr.responseText);
                        if (tested === resourceIds.length) {
                            reject(errors.join('\n'));
                        }
                    }
                });
            });
        });
    }

    // Update health status periodically
    function updateHealthStatus() {
        $.ajax({
            url: ajaxurl,
            data: {
                action: 'get_resource_health',
                nonce: '<?php echo wp_create_nonce('get_resource_health'); ?>'
            },
            success: function(response) {
                if (response.success) {
                    $('.health-grid').html(response.data);
                }
            }
        });
    }

    // Update health status every 5 minutes
    setInterval(updateHealthStatus, 300000);
});
</script>

目錄：/www/wwwroot/xart004.heatgroups.top/wp-content/plugins/ai_plateform_v2/files_2025/admin/views
檔名：admin-tenants.php
==================================================
<?php
if (!defined('ABSPATH')) exit;

// Check current user capabilities
if (!current_user_can('manage_options')) {
    wp_die(__('You do not have sufficient permissions to access this page.'));
}

// Load the Tenants List Table class
require_once AIMAGIC_PLUGIN_DIR . 'includes/admin/class-admin-tenants-list.php';

// Create an instance of our list table
$tenants_list_table = new AIMagic\Admin\Tenants_List_Table();
$tenants_list_table->prepare_items();
?>

<div class="wrap">
    <h1 class="wp-heading-inline"><?php _e('Tenants', 'aimagic'); ?></h1>
    <a href="<?php echo admin_url('admin.php?page=aimagic-tenants&action=add'); ?>" class="page-title-action">
        <?php _e('Add New', 'aimagic'); ?>
    </a>
    <hr class="wp-header-end">

    <?php
    // Show messages
    if (isset($_GET['message'])) {
        $message = '';
        switch ($_GET['message']) {
            case '1':
                $message = __('Tenant created successfully.', 'aimagic');
                break;
            case '2':
                $message = __('Tenant updated successfully.', 'aimagic');
                break;
            case '3':
                $message = __('Tenant(s) deleted successfully.', 'aimagic');
                break;
            case '4':
                $message = __('API key regenerated successfully.', 'aimagic');
                break;
        }
        if ($message) {
            echo '<div class="updated notice is-dismissible"><p>' . $message . '</p></div>';
        }
    }
    ?>

    <form method="post">
        <div class="tablenav top">
            <div class="alignleft actions">
                <select name="status" id="filter-by-status">
                    <option value=""><?php _e('All Statuses', 'aimagic'); ?></option>
                    <option value="active"><?php _e('Active', 'aimagic'); ?></option>
                    <option value="suspended"><?php _e('Suspended', 'aimagic'); ?></option>
                    <option value="trial"><?php _e('Trial', 'aimagic'); ?></option>
                </select>
                <select name="plan" id="filter-by-plan">
                    <option value=""><?php _e('All Plans', 'aimagic'); ?></option>
                    <option value="free"><?php _e('Free', 'aimagic'); ?></option>
                    <option value="basic"><?php _e('Basic', 'aimagic'); ?></option>
                    <option value="premium"><?php _e('Premium', 'aimagic'); ?></option>
                    <option value="enterprise"><?php _e('Enterprise', 'aimagic'); ?></option>
                </select>
                <?php submit_button(__('Filter', 'aimagic'), 'action', 'filter_action', false); ?>
            </div>
        </div>

        <?php
        // Display search box and table
        $tenants_list_table->search_box('Search Tenants', 'search_tenants');
        $tenants_list_table->display();
        ?>
    </form>
</div>

<script type="text/javascript">
jQuery(document).ready(function($) {
    // Handle status filter changes
    $('#filter-by-status, #filter-by-plan').change(function() {
        var status = $('#filter-by-status').val();
        var plan = $('#filter-by-plan').val();
        var url = new URL(window.location.href);
        
        if (status) url.searchParams.set('status', status);
        else url.searchParams.delete('status');
        
        if (plan) url.searchParams.set('plan', plan);
        else url.searchParams.delete('plan');
        
        window.location.href = url.toString();
    });

    // Handle bulk actions
    $('.regenerate-api-key').click(function(e) {
        e.preventDefault();
        if (!confirm('<?php _e('Are you sure you want to regenerate the API key? The old key will stop working immediately.', 'aimagic'); ?>')) {
            return;
        }
        var tenantId = $(this).data('tenant-id');
        $.post(ajaxurl, {
            action: 'regenerate_tenant_api_key',
            tenant_id: tenantId,
            nonce: '<?php echo wp_create_nonce('regenerate_tenant_api_key'); ?>'
        }, function(response) {
            if (response.success) {
                location.reload();
            } else {
                alert(response.data.message);
            }
        });
    });

    // Usage monitoring
    function updateUsageStats() {
        $('.usage-bar').each(function() {
            var tenantId = $(this).data('tenant-id');
            var $bar = $(this);
            $.get(ajaxurl, {
                action: 'get_tenant_usage',
                tenant_id: tenantId,
                nonce: '<?php echo wp_create_nonce('get_tenant_usage'); ?>'
            }, function(response) {
                if (response.success) {
                    var usage = response.data;
                    $bar.find('.usage-current').width(usage.percentage + '%');
                    $bar.find('.usage-text').text(usage.current + ' / ' + usage.limit);
                }
            });
        });
    }

    // Update usage stats every minute
    setInterval(updateUsageStats, 60000);
    updateUsageStats();
});
</script>

<style>
.usage-bar {
    width: 100%;
    height: 20px;
    background: #f0f0f1;
    border-radius: 3px;
    overflow: hidden;
    position: relative;
}
.usage-current {
    height: 100%;
    background: #2271b1;
    transition: width 0.3s ease;
}
.usage-warning .usage-current {
    background: #dba617;
}
.usage-critical .usage-current {
    background: #d63638;
}
.usage-text {
    position: absolute;
    width: 100%;
    text-align: center;
    color: #000;
    line-height: 20px;
    font-size: 12px;
}
</style>

目錄：/www/wwwroot/xart004.heatgroups.top/wp-content/plugins/ai_plateform_v2/files_2025/admin/views
檔名：admin-tasks.php
==================================================
<?php
if (!defined('ABSPATH')) exit;

// Check current user capabilities
if (!current_user_can('manage_options')) {
    wp_die(__('You do not have sufficient permissions to access this page.'));
}

// Load the Tasks List Table class
require_once AIMAGIC_PLUGIN_DIR . 'includes/admin/class-admin-tasks-list.php';

// Create an instance of our list table
$tasks_list_table = new AIMagic\Admin\Tasks_List_Table();
$tasks_list_table->prepare_items();

// Handle bulk actions
if (isset($_POST['action']) && -1 != $_POST['action']) {
    $tasks_list_table->process_bulk_action();
}
?>

<div class="wrap">
    <h1 class="wp-heading-inline"><?php _e('AI Tasks', 'aimagic'); ?></h1>
    <a href="<?php echo admin_url('admin.php?page=aimagic-tasks&action=add'); ?>" class="page-title-action">
        <?php _e('Add New', 'aimagic'); ?>
    </a>
    <hr class="wp-header-end">

    <?php
    // Show messages
    if (isset($_GET['message'])) {
        $message = '';
        switch ($_GET['message']) {
            case '1':
                $message = __('Task created successfully.', 'aimagic');
                break;
            case '2':
                $message = __('Task updated successfully.', 'aimagic');
                break;
            case '3':
                $message = __('Task(s) deleted successfully.', 'aimagic');
                break;
        }
        if ($message) {
            echo '<div class="updated notice is-dismissible"><p>' . $message . '</p></div>';
        }
    }
    ?>

    <form method="post">
        <?php
        // Display filters
        $status_filter = isset($_GET['status']) ? sanitize_text_field($_GET['status']) : '';
        $type_filter = isset($_GET['type']) ? sanitize_text_field($_GET['type']) : '';
        ?>
        <div class="tablenav top">
            <div class="alignleft actions">
                <select name="status" id="filter-by-status">
                    <option value=""><?php _e('All Statuses', 'aimagic'); ?></option>
                    <option value="pending" <?php selected($status_filter, 'pending'); ?>><?php _e('Pending', 'aimagic'); ?></option>
                    <option value="processing" <?php selected($status_filter, 'processing'); ?>><?php _e('Processing', 'aimagic'); ?></option>
                    <option value="completed" <?php selected($status_filter, 'completed'); ?>><?php _e('Completed', 'aimagic'); ?></option>
                    <option value="failed" <?php selected($status_filter, 'failed'); ?>><?php _e('Failed', 'aimagic'); ?></option>
                </select>
                <select name="type" id="filter-by-type">
                    <option value=""><?php _e('All Types', 'aimagic'); ?></option>
                    <option value="text" <?php selected($type_filter, 'text'); ?>><?php _e('Text', 'aimagic'); ?></option>
                    <option value="image" <?php selected($type_filter, 'image'); ?>><?php _e('Image', 'aimagic'); ?></option>
                    <option value="video" <?php selected($type_filter, 'video'); ?>><?php _e('Video', 'aimagic'); ?></option>
                </select>
                <?php submit_button(__('Filter', 'aimagic'), 'action', 'filter_action', false); ?>
            </div>
        </div>

        <?php
        // Display search box and table
        $tasks_list_table->search_box('Search Tasks', 'search_tasks');
        $tasks_list_table->display();
        ?>
    </form>
</div>

<script type="text/javascript">
jQuery(document).ready(function($) {
    // Handle status filter change
    $('#filter-by-status, #filter-by-type').change(function() {
        var status = $('#filter-by-status').val();
        var type = $('#filter-by-type').val();
        var url = new URL(window.location.href);
        
        if (status) url.searchParams.set('status', status);
        else url.searchParams.delete('status');
        
        if (type) url.searchParams.set('type', type);
        else url.searchParams.delete('type');
        
        window.location.href = url.toString();
    });

    // Handle bulk actions
    $('.tablenav-pages a, .manage-column.sortable a, .manage-column.sorted a').on('click', function(e) {
        e.preventDefault();
        var query = this.search.substring(1);
        var data = {
            paged: /paged=([^&]+)/.test(query) ? RegExp.$1 : 1,
            order: /order=([^&]+)/.test(query) ? RegExp.$1 : 'asc',
            orderby: /orderby=([^&]+)/.test(query) ? RegExp.$1 : 'title'
        };
        $.extend(data, {
            action: 'update_tasks_list',
            nonce: '<?php echo wp_create_nonce('update_tasks_list'); ?>'
        });
        $.ajax({
            url: ajaxurl,
            data: data,
            success: function(response) {
                var $response = $(response);
                $('#the-list').html($response.find('#the-list').html());
                $('.tablenav.top .tablenav-pages').html($response.find('.tablenav.top .tablenav-pages').html());
                $('.tablenav.bottom .tablenav-pages').html($response.find('.tablenav.bottom .tablenav-pages').html());
            }
        });
    });
});
</script>

目錄：/www/wwwroot/xart004.heatgroups.top/wp-content/plugins/ai_plateform_v2/files_2025/admin/views
檔名：admin-payments-edit.php
==================================================
<?php
if (!defined('ABSPATH')) exit;

// Check current user capabilities
if (!current_user_can('manage_options')) {
    wp_die(__('You do not have sufficient permissions to access this page.'));
}

$payment_id = isset($_GET['id']) ? intval($_GET['id']) : 0;
$action = $payment_id ? 'edit' : 'add';
$payment = null;

if ($action === 'edit') {
    global $wpdb;
    $payment = $wpdb->get_row($wpdb->prepare(
        "SELECT p.*, t.name as tenant_name 
        FROM {$wpdb->prefix}aimagic_payments p
        LEFT JOIN {$wpdb->prefix}aimagic_tenants t ON p.tenant_id = t.id
        WHERE p.id = %d",
        $payment_id
    ));

    if (!$payment) {
        wp_die(__('Payment not found.'));
    }
}

// Handle form submission
if ($_POST && check_admin_referer('aimagic_payment_' . $action)) {
    $tenant_id = intval($_POST['tenant_id']);
    $amount = floatval($_POST['amount']);
    $currency = sanitize_text_field($_POST['currency']);
    $payment_method = sanitize_text_field($_POST['payment_method']);
    $description = sanitize_textarea_field($_POST['description']);

    global $wpdb;
    
    if ($action === 'edit') {
        $wpdb->update(
            $wpdb->prefix . 'aimagic_payments',
            [
                'amount' => $amount,
                'currency' => $currency,
                'description' => $description,
                'updated_at' => current_time('mysql')
            ],
            ['id' => $payment_id],
            ['%f', '%s', '%s', '%s'],
            ['%d']
        );
        $message = 2; // Updated
    } else {
        // Generate transaction ID
        $transaction_id = 'MANUAL-' . strtoupper(uniqid());
        
        $wpdb->insert(
            $wpdb->prefix . 'aimagic_payments',
            [
                'tenant_id' => $tenant_id,
                'transaction_id' => $transaction_id,
                'amount' => $amount,
                'currency' => $currency,
                'payment_method' => $payment_method,
                'status' => 'completed',
                'description' => $description,
                'created_at' => current_time('mysql'),
                'updated_at' => current_time('mysql')
            ],
            ['%d', '%s', '%f', '%s', '%s', '%s', '%s', '%s', '%s']
        );
        $message = 1; // Created
    }

    wp_redirect(admin_url('admin.php?page=aimagic-payments&message=' . $message));
    exit;
}

// Get tenants for dropdown
$tenants = $wpdb->get_results(
    "SELECT id, name FROM {$wpdb->prefix}aimagic_tenants WHERE status = 'active' ORDER BY name ASC"
);
?>

<div class="wrap">
    <h1><?php echo $action === 'edit' ? __('Edit Payment', 'aimagic') : __('Add Manual Payment', 'aimagic'); ?></h1>

    <form method="post" action="">
        <?php wp_nonce_field('aimagic_payment_' . $action); ?>

        <table class="form-table">
            <?php if ($action === 'add'): ?>
            <tr>
                <th scope="row"><label for="tenant_id"><?php _e('Tenant', 'aimagic'); ?></label></th>
                <td>
                    <select name="tenant_id" id="tenant_id" required>
                        <option value=""><?php _e('Select Tenant', 'aimagic'); ?></option>
                        <?php foreach ($tenants as $tenant): ?>
                            <option value="<?php echo $tenant->id; ?>">
                                <?php echo esc_html($tenant->name); ?>
                            </option>
                        <?php endforeach; ?>
                    </select>
                </td>
            </tr>
            <?php else: ?>
            <tr>
                <th scope="row"><?php _e('Tenant', 'aimagic'); ?></th>
                <td><?php echo esc_html($payment->tenant_name); ?></td>
            </tr>
            <tr>
                <th scope="row"><?php _e('Transaction ID', 'aimagic'); ?></th>
                <td><code><?php echo esc_html($payment->transaction_id); ?></code></td>
            </tr>
            <?php endif; ?>
            <tr>
                <th scope="row"><label for="amount"><?php _e('Amount', 'aimagic'); ?></label></th>
                <td>
                    <input name="amount" type="number" id="amount" value="<?php 
                        echo esc_attr($payment ? $payment->amount : ''); 
                    ?>" class="regular-text" step="0.01" required>
                </td>
            </tr>
            <tr>
                <th scope="row"><label for="currency"><?php _e('Currency', 'aimagic'); ?></label></th>
                <td>
                    <select name="currency" id="currency" required>
                        <option value="USD" <?php selected($payment ? $payment->currency : '', 'USD'); ?>>USD</option>
                        <option value="EUR" <?php selected($payment ? $payment->currency : '', 'EUR'); ?>>EUR</option>
                        <option value="GBP" <?php selected($payment ? $payment->currency : '', 'GBP'); ?>>GBP</option>
                        <option value="JPY" <?php selected($payment ? $payment->currency : '', 'JPY'); ?>>JPY</option>
                    </select>
                </td>
            </tr>
            <?php if ($action === 'add'): ?>
            <tr>
                <th scope="row"><label for="payment_method"><?php _e('Payment Method', 'aimagic'); ?></label></th>
                <td>
                    <select name="payment_method" id="payment_method" required>
                        <option value="manual"><?php _e('Manual', 'aimagic'); ?></option>
                        <option value="bank_transfer"><?php _e('Bank Transfer', 'aimagic'); ?></option>
                        <option value="credit_card"><?php _e('Credit Card', 'aimagic'); ?></option>
                    </select>
                </td>
            </tr>
            <?php else: ?>
            <tr>
                <th scope="row"><?php _e('Payment Method', 'aimagic'); ?></th>
                <td><?php echo esc_html(ucfirst(str_replace('_', ' ', $payment->payment_method))); ?></td>
            </tr>
            <tr>
                <th scope="row"><?php _e('Status', 'aimagic'); ?></th>
                <td>
                    <span class="status-<?php echo esc_attr($payment->status); ?>">
                        <?php echo ucfirst($payment->status); ?>
                    </span>
                </td>
            </tr>
            <?php endif; ?>
            <tr>
                <th scope="row"><label for="description"><?php _e('Description', 'aimagic'); ?></label></th>
                <td>
                    <textarea name="description" id="description" rows="3" class="large-text"><?php 
                        echo esc_textarea($payment ? $payment->description : ''); 
                    ?></textarea>
                </td>
            </tr>
            <?php if ($action === 'edit'): ?>
            <tr>
                <th scope="row"><?php _e('Created', 'aimagic'); ?></th>
                <td><?php echo wp_date('Y-m-d H:i:s', strtotime($payment->created_at)); ?></td>
            </tr>
            <?php if ($payment->refunded): ?>
            <tr>
                <th scope="row"><?php _e('Refunded', 'aimagic'); ?></th>
                <td>
                    <?php echo wp_date('Y-m-d H:i:s', strtotime($payment->refunded_at)); ?>
                    <br>
                    <em><?php echo esc_html($payment->refund_reason); ?></em>
                </td>
            </tr>
            <?php endif; ?>
            <?php endif; ?>
        </table>

        <?php submit_button($action === 'edit' ? __('Update Payment', 'aimagic') : __('Create Payment', 'aimagic')); ?>
    </form>

    <?php if ($action === 'edit' && $payment->status === 'completed' && !$payment->refunded): ?>
    <div class="card">
        <h2><?php _e('Refund Payment', 'aimagic'); ?></h2>
        <form method="post" action="<?php echo admin_url('admin.php?page=aimagic-payments&action=refund&id=' . $payment_id); ?>">
            <?php wp_nonce_field('refund_payment_' . $payment_id); ?>
            <table class="form-table">
                <tr>
                    <th scope="row"><label for="refund_reason"><?php _e('Refund Reason', 'aimagic'); ?></label></th>
                    <td>
                        <textarea name="refund_reason" id="refund_reason" rows="3" class="large-text" required></textarea>
                    </td>
                </tr>
            </table>
            <?php submit_button(__('Process Refund', 'aimagic'), 'delete'); ?>
        </form>
    </div>
    <?php endif; ?>
</div>

目錄：/www/wwwroot/xart004.heatgroups.top/wp-content/plugins/ai_plateform_v2/files_2025/admin/views
檔名：admin-prompts-edit.php
==================================================
<?php
if (!defined('ABSPATH')) exit;

// Check current user capabilities
if (!current_user_can('manage_options')) {
    wp_die(__('You do not have sufficient permissions to access this page.'));
}

$prompt_id = isset($_GET['id']) ? intval($_GET['id']) : 0;
$action = $prompt_id ? 'edit' : 'add';
$prompt = null;

if ($action === 'edit') {
    global $wpdb;
    $prompt = $wpdb->get_row($wpdb->prepare(
        "SELECT p.*, COUNT(pl.id) as total_uses
        FROM {$wpdb->prefix}aimagic_prompts p
        LEFT JOIN {$wpdb->prefix}aimagic_prompt_logs pl ON p.id = pl.prompt_id
        WHERE p.id = %d
        GROUP BY p.id",
        $prompt_id
    ));

    if (!$prompt) {
        wp_die(__('Prompt not found.'));
    }
}

// Handle form submission
if ($_POST && check_admin_referer('aimagic_prompt_' . $action)) {
    $title = sanitize_text_field($_POST['title']);
    $description = sanitize_textarea_field($_POST['description']);
    $prompt_text = sanitize_textarea_field($_POST['prompt_text']);
    $category = sanitize_text_field($_POST['category']);
    $language = sanitize_text_field($_POST['language']);
    $usage_limit = intval($_POST['usage_limit']);
    $variables = isset($_POST['variables']) ? array_map('sanitize_text_field', $_POST['variables']) : [];
    $examples = isset($_POST['examples']) ? array_map('sanitize_textarea_field', $_POST['examples']) : [];
    $required_params = isset($_POST['required_params']) ? array_map('sanitize_text_field', $_POST['required_params']) : [];
    $status = sanitize_text_field($_POST['status']);

    global $wpdb;
    
    if ($action === 'edit') {
        $wpdb->update(
            $wpdb->prefix . 'aimagic_prompts',
            [
                'title' => $title,
                'description' => $description,
                'prompt' => $prompt_text,
                'category' => $category,
                'language' => $language,
                'usage_limit' => $usage_limit,
                'variables' => json_encode($variables),
                'examples' => json_encode($examples),
                'required_params' => json_encode($required_params),
                'status' => $status,
                'updated_at' => current_time('mysql')
            ],
            ['id' => $prompt_id],
            ['%s', '%s', '%s', '%s', '%s', '%d', '%s', '%s', '%s', '%s', '%s'],
            ['%d']
        );
        $message = 2; // Updated
    } else {
        $wpdb->insert(
            $wpdb->prefix . 'aimagic_prompts',
            [
                'title' => $title,
                'description' => $description,
                'prompt' => $prompt_text,
                'category' => $category,
                'language' => $language,
                'usage_limit' => $usage_limit,
                'variables' => json_encode($variables),
                'examples' => json_encode($examples),
                'required_params' => json_encode($required_params),
                'status' => $status,
                'success_rate' => 0,
                'usage_count' => 0,
                'created_at' => current_time('mysql'),
                'updated_at' => current_time('mysql')
            ],
            ['%s', '%s', '%s', '%s', '%s', '%d', '%s', '%s', '%s', '%s', '%f', '%d', '%s', '%s']
        );
        $message = 1; // Created
    }

    wp_redirect(admin_url('admin.php?page=aimagic-prompts&message=' . $message));
    exit;
}

// Get categories and languages for dropdowns
$categories = $wpdb->get_col("SELECT DISTINCT category FROM {$wpdb->prefix}aimagic_prompts ORDER BY category ASC");
$languages = [
    'en' => 'English',
    'es' => 'Español',
    'fr' => 'Français',
    'de' => 'Deutsch',
    'it' => 'Italiano',
    'pt' => 'Português',
    'ru' => 'Русский',
    'ja' => '日本語',
    'zh' => '中文',
    'ko' => '한국어'
];
?>

<div class="wrap">
    <h1><?php echo $action === 'edit' ? __('Edit Prompt', 'aimagic') : __('Add New Prompt', 'aimagic'); ?></h1>

    <form method="post" action="">
        <?php wp_nonce_field('aimagic_prompt_' . $action); ?>

        <div id="poststuff">
            <div id="post-body" class="metabox-holder columns-2">
                <div id="post-body-content">
                    <!-- Main Prompt Details -->
                    <div class="postbox">
                        <div class="postbox-header">
                            <h2><?php _e('Prompt Details', 'aimagic'); ?></h2>
                        </div>
                        <div class="inside">
                            <p>
                                <label for="title"><?php _e('Title', 'aimagic'); ?></label>
                                <input name="title" type="text" id="title" value="<?php 
                                    echo esc_attr($prompt ? $prompt->title : ''); 
                                ?>" class="large-text" required>
                            </p>
                            <p>
                                <label for="description"><?php _e('Description', 'aimagic'); ?></label>
                                <textarea name="description" id="description" rows="3" class="large-text"><?php 
                                    echo esc_textarea($prompt ? $prompt->description : ''); 
                                ?></textarea>
                            </p>
                            <p>
                                <label for="prompt_text"><?php _e('Prompt Text', 'aimagic'); ?></label>
                                <textarea name="prompt_text" id="prompt_text" rows="10" class="large-text code" required><?php 
                                    echo esc_textarea($prompt ? $prompt->prompt : ''); 
                                ?></textarea>
                                <span class="description"><?php _e('Use {{variable}} syntax for dynamic variables', 'aimagic'); ?></span>
                            </p>
                            <p>
                                <label for="category"><?php _e('Category', 'aimagic'); ?></label>
                                <select name="category" id="category" required>
                                    <?php foreach ($categories as $cat): ?>
                                        <option value="<?php echo esc_attr($cat); ?>" <?php 
                                            selected($prompt ? $prompt->category : '', $cat); 
                                        ?>>
                                            <?php echo esc_html($cat); ?>
                                        </option>
                                    <?php endforeach; ?>
                                    <option value="new"><?php _e('+ Add New Category', 'aimagic'); ?></option>
                                </select>
                                <input type="text" id="new_category" style="display:none;" placeholder="<?php 
                                    esc_attr_e('Enter new category name', 'aimagic'); 
                                ?>">
                            </p>
                            <p>
                                <label for="language"><?php _e('Language', 'aimagic'); ?></label>
                                <select name="language" id="language" required>
                                    <?php foreach ($languages as $code => $name): ?>
                                        <option value="<?php echo esc_attr($code); ?>" <?php 
                                            selected($prompt ? $prompt->language : '', $code); 
                                        ?>>
                                            <?php echo esc_html($name); ?>
                                        </option>
                                    <?php endforeach; ?>
                                </select>
                            </p>
                            <p>
                                <label for="usage_limit"><?php _e('Usage Limit', 'aimagic'); ?></label>
                                <input name="usage_limit" type="number" id="usage_limit" value="<?php 
                                    echo esc_attr($prompt ? $prompt->usage_limit : '1000'); 
                                ?>" class="small-text" min="0" required>
                                <span class="description"><?php _e('Maximum number of uses (0 for unlimited)', 'aimagic'); ?></span>
                            </p>
                        </div>
                    </div>

                    <!-- Variables -->
                    <div class="postbox">
                        <div class="postbox-header">
                            <h2><?php _e('Variables', 'aimagic'); ?></h2>
                        </div>
                        <div class="inside">
                            <div id="variables-container">
                                <?php
                                $variables = $prompt ? json_decode($prompt->variables, true) : [];
                                if (!empty($variables)):
                                    foreach ($variables as $var):
                                ?>
                                <div class="variable-row">
                                    <input type="text" name="variables[]" value="<?php echo esc_attr($var); ?>" class="regular-text">
                                    <button type="button" class="button remove-variable"><?php _e('Remove', 'aimagic'); ?></button>
                                </div>
                                <?php
                                    endforeach;
                                endif;
                                ?>
                            </div>
                            <button type="button" class="button" id="add-variable">
                                <?php _e('Add Variable', 'aimagic'); ?>
                            </button>
                            <p class="description">
                                <?php _e('Define variables that can be used in the prompt text (without {{}} brackets)', 'aimagic'); ?>
                            </p>
                        </div>
                    </div>

                    <!-- Examples -->
                    <div class="postbox">
                        <div class="postbox-header">
                            <h2><?php _e('Examples', 'aimagic'); ?></h2>
                        </div>
                        <div class="inside">
                            <div id="examples-container">
                                <?php
                                $examples = $prompt ? json_decode($prompt->examples, true) : [];
                                if (!empty($examples)):
                                    foreach ($examples as $example):
                                ?>
                                <div class="example-row">
                                    <textarea name="examples[]" rows="3" class="large-text"><?php 
                                        echo esc_textarea($example); 
                                    ?></textarea>
                                    <button type="button" class="button remove-example"><?php _e('Remove', 'aimagic'); ?></button>
                                </div>
                                <?php
                                    endforeach;
                                endif;
                                ?>
                            </div>
                            <button type="button" class="button" id="add-example">
                                <?php _e('Add Example', 'aimagic'); ?>
                            </button>
                            <p class="description">
                                <?php _e('Add example inputs and outputs to help users understand the prompt', 'aimagic'); ?>
                            </p>
                        </div>
                    </div>

                    <!-- Required Parameters -->
                    <div class="postbox">
                        <div class="postbox-header">
                            <h2><?php _e('Required Parameters', 'aimagic'); ?></h2>
                        </div>
                        <div class="inside">
                            <div id="params-container">
                                <?php
                                $required_params = $prompt ? json_decode($prompt->required_params, true) : [];
                                if (!empty($required_params)):
                                    foreach ($required_params as $param):
                                ?>
                                <div class="param-row">
                                    <input type="text" name="required_params[]" value="<?php echo esc_attr($param); ?>" class="regular-text">
                                    <button type="button" class="button remove-param"><?php _e('Remove', 'aimagic'); ?></button>
                                </div>
                                <?php
                                    endforeach;
                                endif;
                                ?>
                            </div>
                            <button type="button" class="button" id="add-param">
                                <?php _e('Add Parameter', 'aimagic'); ?>
                            </button>
                            <p class="description">
                                <?php _e('Define required parameters that must be provided when using this prompt', 'aimagic'); ?>
                            </p>
                        </div>
                    </div>
                </div>

                <div id="postbox-container-1" class="postbox-container">
                    <!-- Status -->
                    <div class="postbox">
                        <div class="postbox-header">
                            <h2><?php _e('Status', 'aimagic'); ?></h2>
                        </div>
                        <div class="inside">
                            <select name="status" id="status">
                                <option value="active" <?php selected($prompt ? $prompt->status : '', 'active'); ?>>
                                    <?php _e('Active', 'aimagic'); ?>
                                </option>
                                <option value="inactive" <?php selected($prompt ? $prompt->status : '', 'inactive'); ?>>
                                    <?php _e('Inactive', 'aimagic'); ?>
                                </option>
                                <option value="testing" <?php selected($prompt ? $prompt->status : '', 'testing'); ?>>
                                    <?php _e('Testing', 'aimagic'); ?>
                                </option>
                            </select>

                            <?php submit_button(
                                $action === 'edit' ? __('Update Prompt', 'aimagic') : __('Create Prompt', 'aimagic'),
                                'primary',
                                'submit',
                                false
                            ); ?>

                            <?php if ($action === 'edit'): ?>
                            <button type="button" class="button" id="test-prompt">
                                <?php _e('Test Prompt', 'aimagic'); ?>
                            </button>
                            <?php endif; ?>
                        </div>
                    </div>

                    <?php if ($action === 'edit'): ?>
                    <!-- Information -->
                    <div class="postbox">
                        <div class="postbox-header">
                            <h2><?php _e('Information', 'aimagic'); ?></h2>
                        </div>
                        <div class="inside">
                            <p>
                                <strong><?php _e('Total Uses:', 'aimagic'); ?></strong>
                                <span><?php echo number_format_i18n($prompt->total_uses); ?></span>
                            </p>
                            <p>
                                <strong><?php _e('Success Rate:', 'aimagic'); ?></strong>
                                <span><?php echo number_format($prompt->success_rate, 1); ?>%</span>
                            </p>
                            <p>
                                <strong><?php _e('Created:', 'aimagic'); ?></strong>
                                <span><?php echo wp_date('Y-m-d H:i:s', strtotime($prompt->created_at)); ?></span>
                            </p>
                            <p>
                                <strong><?php _e('Last Modified:', 'aimagic'); ?></strong>
                                <span><?php echo wp_date('Y-m-d H:i:s', strtotime($prompt->updated_at)); ?></span>
                            </p>
                        </div>
                    </div>

                    <!-- Usage Statistics -->
                    <div class="postbox">
                        <div class="postbox-header">
                            <h2><?php _e('Usage Statistics', 'aimagic'); ?></h2>
                        </div>
                        <div class="inside">
                            <div id="usage-chart"></div>
                        </div>
                    </div>
                    <?php endif; ?>
                </div>
            </div>
        </div>
    </form>

    <?php if ($action === 'edit'): ?>
    <!-- Prompt Test Modal -->
    <div id="prompt-test-modal" class="modal" style="display:none;">
        <div class="modal-content">
            <h2><?php _e('Test Prompt', 'aimagic'); ?></h2>
            <div class="test-form">
                <div id="test-variables"></div>
                <div class="test-actions">
                    <button type="button" class="button button-primary" id="run-test">
                        <?php _e('Run Test', 'aimagic'); ?>
                    </button>
                    <button type="button" class="button" id="close-modal">
                        <?php _e('Close', 'aimagic'); ?>
                    </button>
                </div>
            </div>
            <div class="test-results" style="display:none;">
                <h3><?php _e('Results', 'aimagic'); ?></h3>
                <pre id="test-output"></pre>
            </div>
        </div>
    </div>
    <?php endif; ?>
</div>

<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
<script type="text/javascript">
jQuery(document).ready(function($) {
    // Handle category selection
    $('#category').change(function() {
        if ($(this).val() === 'new') {
            $('#new_category').show().focus();
        } else {
            $('#new_category').hide();
        }
    });

    $('#new_category').keyup(function() {
        var value = $(this).val();
        if (value) {
            var option = new Option(value, value, true, true);
            $('#category').append(option).val(value);
        }
    });

    // Handle variables
    $('#add-variable').click(function() {
        var row = $('<div class="variable-row">')
            .append('<input type="text" name="variables[]" class="regular-text">')
            .append('<button type="button" class="button remove-variable">Remove</button>');
        $('#variables-container').append(row);
    });

    $(document).on('click', '.remove-variable', function() {
        $(this).closest('.variable-row').remove();
    });

    // Handle examples
    $('#add-example').click(function() {
        var row = $('<div class="example-row">')
            .append('<textarea name="examples[]" rows="3" class="large-text"></textarea>')
            .append('<button type="button" class="button remove-example">Remove</button>');
        $('#examples-container').append(row);
    });

    $(document).on('click', '.remove-example', function() {
        $(this).closest('.example-row').remove();
    });

    // Handle parameters
    $('#add-param').click(function() {
        var row = $('<div class="param-row">')
            .append('<input type="text" name="required_params[]" class="regular-text">')
            .append('<button type="button" class="button remove-param">Remove</button>');
        $('#params-container').append(row);
    });

    $(document).on('click', '.remove-param', function() {
        $(this).closest('.param-row').remove();
    });

    <?php if ($action === 'edit'): ?>
    // Load usage chart
    $.ajax({
        url: ajaxurl,
        data: {
            action: 'get_prompt_usage',
            prompt_id: <?php echo $prompt_id; ?>,
            nonce: '<?php echo wp_create_nonce('get_prompt_usage'); ?>'
        },
        success: function(response) {
            if (response.success) {
                var ctx = document.getElementById('usage-chart').getContext('2d');
                new Chart(ctx, {
                    type: 'line',
                    data: response.data,
                    options: {
                        responsive: true,
                        scales: {
                            y: {
                                beginAtZero: true
                            }
                        }
                    }
                });
            }
        }
    });

    // Handle prompt testing
    $('#test-prompt').click(function() {
        var variables = <?php echo json_encode($variables); ?>;
        var container = $('#test-variables').empty();
        
        variables.forEach(function(variable) {
            container.append(
                '<p>' +
                '<label>' + variable + '</label>' +
                '<input type="text" class="regular-text" data-var="' + variable + '">' +
                '</p>'
            );
        });

        $('#prompt-test-modal').show();
    });

    $('#close-modal').click(function() {
        $('#prompt-test-modal').hide();
        $('.test-results').hide();
    });

    $('#run-test').click(function() {
        var $button = $(this);
        var variables = {};
        
        $('#test-variables input').each(function() {
            variables[$(this).data('var')] = $(this).val();
        });

        $button.prop('disabled', true).text('<?php _e('Testing...', 'aimagic'); ?>');
        
        $.ajax({
            url: ajaxurl,
            method: 'POST',
            data: {
                action: 'test_prompt',
                prompt_id: <?php echo $prompt_id; ?>,
                variables: variables,
                nonce: '<?php echo wp_create_nonce('test_prompt'); ?>'
            },
            success: function(response) {
                $('.test-results').show();
                if (response.success) {
                    $('#test-output').html(response.data.output);
                } else {
                    $('#test-output').html('Error: ' + response.data.message);
                }
            },
            error: function(xhr) {
                $('.test-results').show();
                $('#test-output').html('Error: ' + xhr.responseText);
            },
            complete: function() {
                $button.prop('disabled', false).text('<?php _e('Run Test', 'aimagic'); ?>');
            }
        });
    });
    <?php endif; ?>
});
</script>

<style>
.variable-row,
.example-row,
.param-row {
    margin-bottom: 10px;
}

.variable-row button,
.example-row button,
.param-row button {
    margin-left: 10px;
}

#usage-chart {
    height: 200px;
}

.modal {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: rgba(0,0,0,0.7);
    z-index: 100000;
}

.modal-content {
    position: relative;
    background: #fff;
    margin: 5% auto;
    padding: 20px;
    width: 70%;
    max-width: 800px;
    border-radius: 8px;
    box-shadow: 0 2px 8px rgba(0,0,0,0.2);
}

.test-results pre {
    background: #f6f7f7;
    padding: 15px;
    margin-top: 15px;
    border-radius: 4px;
    max-height: 300px;
    overflow: auto;
}

.test-actions {
    margin-top: 20px;
}

#prompt_text {
    font-family: monospace;
}
</style>

目錄：/www/wwwroot/xart004.heatgroups.top/wp-content/plugins/ai_plateform_v2/files_2025/admin/views
檔名：admin-tasks-edit.php
==================================================
<?php
if (!defined('ABSPATH')) exit;

// Check current user capabilities
if (!current_user_can('manage_options')) {
    wp_die(__('You do not have sufficient permissions to access this page.'));
}

$task_id = isset($_GET['id']) ? intval($_GET['id']) : 0;
$action = $task_id ? 'edit' : 'add';
$task = null;

if ($action === 'edit') {
    global $wpdb;
    $task = $wpdb->get_row($wpdb->prepare(
        "SELECT * FROM {$wpdb->prefix}aimagic_tasks WHERE id = %d",
        $task_id
    ));

    if (!$task) {
        wp_die(__('Task not found.'));
    }
}

// Handle form submission
if ($_POST && check_admin_referer('aimagic_task_' . $action)) {
    $content_type = sanitize_text_field($_POST['content_type']);
    $content_payload = wp_kses_post($_POST['content_payload']);
    $webhook_url = esc_url_raw($_POST['webhook_url']);

    global $wpdb;
    $data = [
        'content_type' => $content_type,
        'content_payload' => $content_payload,
        'webhook_url' => $webhook_url,
        'status' => 'pending',
        'updated_at' => current_time('mysql')
    ];

    if ($action === 'edit') {
        $wpdb->update(
            $wpdb->prefix . 'aimagic_tasks',
            $data,
            ['id' => $task_id],
            ['%s', '%s', '%s', '%s', '%s'],
            ['%d']
        );
        $message = 2; // Updated
    } else {
        $data['created_at'] = current_time('mysql');
        $wpdb->insert(
            $wpdb->prefix . 'aimagic_tasks',
            $data,
            ['%s', '%s', '%s', '%s', '%s', '%s']
        );
        $message = 1; // Created
    }

    wp_redirect(admin_url('admin.php?page=aimagic-tasks&message=' . $message));
    exit;
}
?>

<div class="wrap">
    <h1><?php echo $action === 'edit' ? __('Edit Task', 'aimagic') : __('Add New Task', 'aimagic'); ?></h1>

    <form method="post" action="">
        <?php wp_nonce_field('aimagic_task_' . $action); ?>

        <table class="form-table">
            <tr>
                <th scope="row"><label for="content_type"><?php _e('Content Type', 'aimagic'); ?></label></th>
                <td>
                    <select name="content_type" id="content_type" required>
                        <option value="text" <?php selected($task ? $task->content_type : '', 'text'); ?>><?php _e('Text', 'aimagic'); ?></option>
                        <option value="image" <?php selected($task ? $task->content_type : '', 'image'); ?>><?php _e('Image', 'aimagic'); ?></option>
                        <option value="video" <?php selected($task ? $task->content_type : '', 'video'); ?>><?php _e('Video', 'aimagic'); ?></option>
                    </select>
                </td>
            </tr>
            <tr>
                <th scope="row"><label for="content_payload"><?php _e('Content Payload', 'aimagic'); ?></label></th>
                <td>
                    <textarea name="content_payload" id="content_payload" rows="5" class="large-text" required><?php 
                        echo esc_textarea($task ? $task->content_payload : ''); 
                    ?></textarea>
                    <p class="description"><?php _e('Enter the content generation parameters in JSON format', 'aimagic'); ?></p>
                </td>
            </tr>
            <tr>
                <th scope="row"><label for="webhook_url"><?php _e('Webhook URL', 'aimagic'); ?></label></th>
                <td>
                    <input type="url" name="webhook_url" id="webhook_url" class="regular-text" 
                           value="<?php echo esc_attr($task ? $task->webhook_url : ''); ?>">
                    <p class="description"><?php _e('Optional URL to receive task completion notifications', 'aimagic'); ?></p>
                </td>
            </tr>
            <?php if ($action === 'edit'): ?>
            <tr>
                <th scope="row"><?php _e('Status', 'aimagic'); ?></th>
                <td>
                    <p><strong><?php echo ucfirst($task->status); ?></strong></p>
                </td>
            </tr>
            <tr>
                <th scope="row"><?php _e('Created', 'aimagic'); ?></th>
                <td>
                    <p><?php echo wp_date('Y-m-d H:i:s', strtotime($task->created_at)); ?></p>
                </td>
            </tr>
            <tr>
                <th scope="row"><?php _e('Last Updated', 'aimagic'); ?></th>
                <td>
                    <p><?php echo wp_date('Y-m-d H:i:s', strtotime($task->updated_at)); ?></p>
                </td>
            </tr>
            <?php endif; ?>
        </table>

        <?php submit_button($action === 'edit' ? __('Update Task', 'aimagic') : __('Create Task', 'aimagic')); ?>
    </form>
</div>

<script type="text/javascript">
jQuery(document).ready(function($) {
    // Add JSON validation for content payload
    $('form').on('submit', function(e) {
        try {
            JSON.parse($('#content_payload').val());
        } catch (error) {
            e.preventDefault();
            alert('<?php _e('Please enter valid JSON in the Content Payload field.', 'aimagic'); ?>');
        }
    });
});
</script>

目錄：/www/wwwroot/xart004.heatgroups.top/wp-content/plugins/ai_plateform_v2/files_2025/admin/views
檔名：admin-nodes-edit.php
==================================================
<?php
if (!defined('ABSPATH')) exit;

// Check current user capabilities
if (!current_user_can('manage_options')) {
    wp_die(__('You do not have sufficient permissions to access this page.'));
}

$node_id = isset($_GET['id']) ? intval($_GET['id']) : 0;
$action = $node_id ? 'edit' : 'add';
$node = null;

if ($action === 'edit') {
    global $wpdb;
    $node = $wpdb->get_row($wpdb->prepare(
        "SELECT * FROM {$wpdb->prefix}ai_nodes WHERE node_id = %d",
        $node_id
    ));

    if (!$node) {
        wp_die(__('Node not found.'));
    }
}

// Handle form submission
if ($_POST && check_admin_referer('aimagic_node_' . $action)) {
    $node_type = sanitize_text_field($_POST['node_type']);
    $max_tasks = intval($_POST['max_tasks']);
    $priority = intval($_POST['priority']);

    global $wpdb;
    
    if ($action === 'edit') {
        $wpdb->update(
            $wpdb->prefix . 'ai_nodes',
            [
                'node_type' => $node_type,
                'max_tasks' => $max_tasks,
                'priority' => $priority,
                'updated_at' => current_time('mysql')
            ],
            ['node_id' => $node_id],
            ['%s', '%d', '%d', '%s'],
            ['%d']
        );
        $message = 2; // Updated
    } else {
        // Generate new auth token
        $auth_token = wp_generate_password(32, false);
        
        $wpdb->insert(
            $wpdb->prefix . 'ai_nodes',
            [
                'node_type' => $node_type,
                'auth_token' => $auth_token,
                'max_tasks' => $max_tasks,
                'priority' => $priority,
                'registered_at' => current_time('mysql'),
                'last_heartbeat' => current_time('mysql')
            ],
            ['%s', '%s', '%d', '%d', '%s', '%s']
        );
        $message = 1; // Created
    }

    wp_redirect(admin_url('admin.php?page=aimagic-nodes&message=' . $message));
    exit;
}
?>

<div class="wrap">
    <h1><?php echo $action === 'edit' ? __('Edit Node', 'aimagic') : __('Add New Node', 'aimagic'); ?></h1>

    <form method="post" action="">
        <?php wp_nonce_field('aimagic_node_' . $action); ?>

        <table class="form-table">
            <tr>
                <th scope="row"><label for="node_type"><?php _e('Node Type', 'aimagic'); ?></label></th>
                <td>
                    <select name="node_type" id="node_type" required>
                        <option value="text_node" <?php selected($node ? $node->node_type : '', 'text_node'); ?>>
                            <?php _e('Text Generation', 'aimagic'); ?>
                        </option>
                        <option value="image_node" <?php selected($node ? $node->node_type : '', 'image_node'); ?>>
                            <?php _e('Image Generation', 'aimagic'); ?>
                        </option>
                        <option value="video_node" <?php selected($node ? $node->node_type : '', 'video_node'); ?>>
                            <?php _e('Video Generation', 'aimagic'); ?>
                        </option>
                    </select>
                </td>
            </tr>
            <tr>
                <th scope="row"><label for="max_tasks"><?php _e('Max Concurrent Tasks', 'aimagic'); ?></label></th>
                <td>
                    <input type="number" name="max_tasks" id="max_tasks" value="<?php 
                        echo esc_attr($node ? $node->max_tasks : '5'); 
                    ?>" class="small-text" min="1" max="100" required>
                    <p class="description"><?php _e('Maximum number of tasks this node can process simultaneously', 'aimagic'); ?></p>
                </td>
            </tr>
            <tr>
                <th scope="row"><label for="priority"><?php _e('Priority', 'aimagic'); ?></label></th>
                <td>
                    <input type="number" name="priority" id="priority" value="<?php 
                        echo esc_attr($node ? $node->priority : '1'); 
                    ?>" class="small-text" min="1" max="10" required>
                    <p class="description"><?php _e('Node priority (1-10, higher numbers get tasks first)', 'aimagic'); ?></p>
                </td>
            </tr>
            <?php if ($action === 'edit'): ?>
            <tr>
                <th scope="row"><?php _e('Auth Token', 'aimagic'); ?></th>
                <td>
                    <code><?php echo esc_html($node->auth_token); ?></code>
                </td>
            </tr>
            <tr>
                <th scope="row"><?php _e('Last Heartbeat', 'aimagic'); ?></th>
                <td>
                    <?php 
                    $last_heartbeat = strtotime($node->last_heartbeat);
                    $diff = time() - $last_heartbeat;
                    if ($diff < 60) {
                        echo '<span class="status-active">' . sprintf(_n('%s second ago', '%s seconds ago', $diff, 'aimagic'), $diff) . '</span>';
                    } elseif ($diff < 300) {
                        $minutes = floor($diff / 60);
                        echo '<span class="status-warning">' . sprintf(_n('%s minute ago', '%s minutes ago', $minutes, 'aimagic'), $minutes) . '</span>';
                    } else {
                        echo '<span class="status-offline">' . __('Offline', 'aimagic') . '</span>';
                    }
                    ?>
                </td>
            </tr>
            <tr>
                <th scope="row"><?php _e('Registered', 'aimagic'); ?></th>
                <td>
                    <?php echo wp_date('Y-m-d H:i:s', strtotime($node->registered_at)); ?>
                </td>
            </tr>
            <?php endif; ?>
        </table>

        <?php submit_button($action === 'edit' ? __('Update Node', 'aimagic') : __('Register Node', 'aimagic')); ?>
    </form>

    <?php if ($action === 'edit'): ?>
    <div class="card">
        <h2><?php _e('Node Performance', 'aimagic'); ?></h2>
        <div id="node-performance-chart"></div>
    </div>

    <script type="text/javascript">
    jQuery(document).ready(function($) {
        // Load performance data
        $.ajax({
            url: ajaxurl,
            data: {
                action: 'get_node_performance',
                node_id: <?php echo $node_id; ?>,
                nonce: '<?php echo wp_create_nonce('get_node_performance'); ?>'
            },
            success: function(response) {
                if (response.success) {
                    drawPerformanceChart(response.data);
                }
            }
        });

        function drawPerformanceChart(data) {
            // Implementation of performance chart drawing
            // Using a library like Chart.js
        }
    });
    </script>
    <?php endif; ?>
</div>

目錄：/www/wwwroot/xart004.heatgroups.top/wp-content/plugins/ai_plateform_v2/files_2025/admin/views
檔名：admin-ai-resources-edit.php
==================================================
                    <input name="api_key" type="password" id="api_key" value="<?php 
                        echo esc_attr($resource ? $resource->api_key : ''); 
                    ?>" class="regular-text" required>
                    <button type="button" class="button" id="toggle-api-key">
                        <?php _e('Show/Hide', 'aimagic'); ?>
                    </button>
                </td>
            </tr>
            <tr>
                <th scope="row"><label for="endpoint"><?php _e('Endpoint', 'aimagic'); ?></label></th>
                <td>
                    <input name="endpoint" type="url" id="endpoint" value="<?php 
                        echo esc_attr($resource ? $resource->endpoint : ''); 
                    ?>" class="regular-text" required>
                    <p class="description" id="endpoint-description"></p>
                </td>
            </tr>
            <tr>
                <th scope="row"><label for="request_limit"><?php _e('Request Limit', 'aimagic'); ?></label></th>
                <td>
                    <input name="request_limit" type="number" id="request_limit" value="<?php 
                        echo esc_attr($resource ? $resource->request_limit : '1000'); 
                    ?>" class="small-text" min="1" required>
                    <p class="description"><?php _e('Maximum number of requests per month', 'aimagic'); ?></p>
                </td>
            </tr>
            <tr>
                <th scope="row"><label for="timeout"><?php _e('Timeout', 'aimagic'); ?></label></th>
                <td>
                    <input name="timeout" type="number" id="timeout" value="<?php 
                        echo esc_attr($resource ? $resource->timeout : '30'); 
                    ?>" class="small-text" min="1" required>
                    <p class="description"><?php _e('Request timeout in seconds', 'aimagic'); ?></p>
                </td>
            </tr>
            <tr>
                <th scope="row"><label for="config"><?php _e('Configuration', 'aimagic'); ?></label></th>
                <td>
                    <textarea name="config" id="config" rows="10" class="large-text code"><?php 
                        echo esc_textarea($resource ? $resource->config : '{}'); 
                    ?></textarea>
                    <p class="description"><?php _e('Additional configuration in JSON format', 'aimagic'); ?></p>
                </td>
            </tr>
            <?php if ($action === 'edit'): ?>
            <tr>
                <th scope="row"><?php _e('Status', 'aimagic'); ?></th>
                <td>
                    <select name="status" id="status">
                        <option value="active" <?php selected($resource->status, 'active'); ?>>
                            <?php _e('Active', 'aimagic'); ?>
                        </option>
                        <option value="inactive" <?php selected($resource->status, 'inactive'); ?>>
                            <?php _e('Inactive', 'aimagic'); ?>
                        </option>
                    </select>
                </td>
            </tr>
            <tr>
                <th scope="row"><?php _e('Created', 'aimagic'); ?></th>
                <td><?php echo wp_date('Y-m-d H:i:s', strtotime($resource->created_at)); ?></td>
            </tr>
            <?php endif; ?>
        </table>

        <?php submit_button($action === 'edit' ? __('Update Resource', 'aimagic') : __('Create Resource', 'aimagic')); ?>
    </form>

    <?php if ($action === 'edit'): ?>
    <!-- Test Resource -->
    <div class="card">
        <h2><?php _e('Test Resource', 'aimagic'); ?></h2>
        <p><?php _e('Test the resource configuration with sample requests.', 'aimagic'); ?></p>
        
        <div class="test-controls">
            <select id="test-type">
                <option value="simple"><?php _e('Simple Test', 'aimagic'); ?></option>
                <option value="batch"><?php _e('Batch Test', 'aimagic'); ?></option>
                <option value="stress"><?php _e('Stress Test', 'aimagic'); ?></option>
            </select>
            <button type="button" class="button button-primary" id="run-test">
                <?php _e('Run Test', 'aimagic'); ?>
            </button>
        </div>

        <div class="test-results" style="display: none;">
            <h3><?php _e('Test Results', 'aimagic'); ?></h3>
            <div class="test-progress">
                <div class="progress-bar"></div>
            </div>
            <pre id="test-output"></pre>
        </div>
    </div>

    <!-- Usage Statistics -->
    <div class="card">
        <h2><?php _e('Usage Statistics', 'aimagic'); ?></h2>
        <div id="usage-chart"></div>
    </div>

    <!-- Error Log -->
    <div class="card">
        <h2><?php _e('Error Log', 'aimagic'); ?></h2>
        <?php
        $errors = $wpdb->get_results($wpdb->prepare(
            "SELECT * FROM {$wpdb->prefix}aimagic_error_log 
            WHERE resource_id = %d 
            ORDER BY created_at DESC 
            LIMIT 10",
            $resource_id
        ));
        ?>
        <table class="wp-list-table widefat fixed striped">
            <thead>
                <tr>
                    <th><?php _e('Time', 'aimagic'); ?></th>
                    <th><?php _e('Error Code', 'aimagic'); ?></th>
                    <th><?php _e('Message', 'aimagic'); ?></th>
                    <th><?php _e('Request ID', 'aimagic'); ?></th>
                </tr>
            </thead>
            <tbody>
                <?php foreach ($errors as $error): ?>
                <tr>
                    <td><?php echo wp_date('Y-m-d H:i:s', strtotime($error->created_at)); ?></td>
                    <td><code><?php echo esc_html($error->error_code); ?></code></td>
                    <td><?php echo esc_html($error->error_message); ?></td>
                    <td><code><?php echo esc_html($error->request_id); ?></code></td>
                </tr>
                <?php endforeach; ?>
            </tbody>
        </table>
    </div>
    <?php endif; ?>
</div>

<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
<script type="text/javascript">
jQuery(document).ready(function($) {
    // Provider configurations
    const providers = <?php echo json_encode($providers); ?>;
    
    // Handle provider and type selection
    function updateModels() {
        const provider = $('#provider').val();
        const type = $('#type').val();
        const $model = $('#model');
        
        $model.empty().append('<option value=""><?php _e('Select Model', 'aimagic'); ?></option>');
        
        if (provider && type && providers[provider] && providers[provider].models[type]) {
            providers[provider].models[type].forEach(function(model) {
                $model.append($('<option>', {
                    value: model,
                    text: model
                }));
            });
        }

        // Update endpoint description
        const endpoint = providers[provider] ? providers[provider].endpoint : '';
        $('#endpoint').val(endpoint);
        $('#endpoint-description').text(endpoint ? `Default endpoint: ${endpoint}` : '');
    }

    $('#provider, #type').change(updateModels);
    
    // Set initial model options
    updateModels();
    <?php if ($resource): ?>
    $('#model').val('<?php echo esc_js($resource->model); ?>');
    <?php endif; ?>

    // Toggle API key visibility
    $('#toggle-api-key').click(function() {
        const $input = $('#api_key');
        $input.attr('type', $input.attr('type') === 'password' ? 'text' : 'password');
    });

    // JSON validation
    function validateJSON(text) {
        try {
            JSON.parse(text);
            return true;
        } catch (e) {
            return false;
        }
    }

    $('form').submit(function(e) {
        const config = $('#config').val();
        if (!validateJSON(config)) {
            e.preventDefault();
            alert('<?php _e('Please enter valid JSON in the configuration field.', 'aimagic'); ?>');
        }
    });

    <?php if ($action === 'edit'): ?>
    // Resource testing
    $('#run-test').click(function() {
        const testType = $('#test-type').val();
        const $button = $(this);
        const $results = $('.test-results');
        const $progress = $('.progress-bar');
        const $output = $('#test-output');

        $button.prop('disabled', true).text('<?php _e('Running...', 'aimagic'); ?>');
        $results.show();
        $progress.width('0%');
        $output.text('');

        // Run test
        $.ajax({
            url: ajaxurl,
            method: 'POST',
            data: {
                action: 'test_ai_resource',
                resource_id: <?php echo $resource_id; ?>,
                test_type: testType,
                nonce: '<?php echo wp_create_nonce('test_ai_resource'); ?>'
            },
            success: function(response) {
                if (response.success) {
                    $output.text(JSON.stringify(response.data, null, 2));
                } else {
                    $output.text('Error: ' + response.data.message);
                }
            },
            error: function(xhr) {
                $output.text('Error: ' + xhr.responseText);
            },
            complete: function() {
                $button.prop('disabled', false).text('<?php _e('Run Test', 'aimagic'); ?>');
                $progress.width('100%');
            }
        });
    });

    // Usage chart
    const ctx = document.getElementById('usage-chart').getContext('2d');
    $.ajax({
        url: ajaxurl,
        data: {
            action: 'get_resource_usage',
            resource_id: <?php echo $resource_id; ?>,
            nonce: '<?php echo wp_create_nonce('get_resource_usage'); ?>'
        },
        success: function(response) {
            if (response.success) {
                new Chart(ctx, {
                    type: 'line',
                    data: response.data,
                    options: {
                        responsive: true,
                        scales: {
                            y: {
                                beginAtZero: true
                            }
                        }
                    }
                });
            }
        }
    });
    <?php endif; ?>
});
</script>

<style>
.card {
    background: #fff;
    padding: 20px;
    margin-top: 20px;
    border-radius: 8px;
    box-shadow: 0 1px 3px rgba(0,0,0,0.1);
}

.test-controls {
    margin-bottom: 20px;
}

.test-progress {
    height: 4px;
    background: #f0f0f1;
    margin-bottom: 10px;
    border-radius: 2px;
    overflow: hidden;
}

.progress-bar {
    height: 100%;
    background: #2271b1;
    width: 0;
    transition: width 0.3s ease;
}

#test-output {
    background: #f6f7f7;
    padding: 15px;
    border-radius: 4px;
    max-height: 300px;
    overflow: auto;
}

#usage-chart {
    height: 300px;
}

.error-log {
    margin-top: 20px;
}
</style>

目錄：/www/wwwroot/xart004.heatgroups.top/wp-content/plugins/ai_plateform_v2/files_2025/admin/views
檔名：admin-organizations.php
==================================================
<?php
if (!defined('ABSPATH')) exit;

// Check current user capabilities
if (!current_user_can('manage_options')) {
    wp_die(__('You do not have sufficient permissions to access this page.'));
}

// Load the Organizations List Table class
require_once AIMAGIC_PLUGIN_DIR . 'includes/admin/class-admin-organizations-list.php';

// Create an instance of our list table
$organizations_list_table = new AIMagic\Admin\Organizations_List_Table();
$organizations_list_table->prepare_items();
?>

<div class="wrap">
    <h1 class="wp-heading-inline"><?php _e('Organizations', 'aimagic'); ?></h1>
    <a href="<?php echo admin_url('admin.php?page=aimagic-organizations&action=add'); ?>" class="page-title-action">
        <?php _e('Add New', 'aimagic'); ?>
    </a>
    <hr class="wp-header-end">

    <?php
    // Show messages
    if (isset($_GET['message'])) {
        $message = '';
        switch ($_GET['message']) {
            case '1':
                $message = __('Organization created successfully.', 'aimagic');
                break;
            case '2':
                $message = __('Organization updated successfully.', 'aimagic');
                break;
            case '3':
                $message = __('Organization(s) deleted successfully.', 'aimagic');
                break;
        }
        if ($message) {
            echo '<div class="updated notice is-dismissible"><p>' . $message . '</p></div>';
        }
    }
    ?>

    <!-- Organization Stats Overview -->
    <div class="org-stats-overview">
        <?php
        global $wpdb;
        $stats = $wpdb->get_row("
            SELECT 
                COUNT(*) as total_orgs,
                COUNT(CASE WHEN status = 'active' THEN 1 END) as active_orgs,
                SUM(total_members) as total_members,
                SUM(storage_used) as total_storage
            FROM {$wpdb->prefix}aimagic_organizations
        ");
        ?>
        <div class="stat-card">
            <h3><?php _e('Total Organizations', 'aimagic'); ?></h3>
            <div class="stat-value"><?php echo number_format_i18n($stats->total_orgs); ?></div>
        </div>
        <div class="stat-card">
            <h3><?php _e('Active Organizations', 'aimagic'); ?></h3>
            <div class="stat-value"><?php echo number_format_i18n($stats->active_orgs); ?></div>
        </div>
        <div class="stat-card">
            <h3><?php _e('Total Members', 'aimagic'); ?></h3>
            <div class="stat-value"><?php echo number_format_i18n($stats->total_members); ?></div>
        </div>
        <div class="stat-card">
            <h3><?php _e('Total Storage Used', 'aimagic'); ?></h3>
            <div class="stat-value"><?php echo size_format($stats->total_storage); ?></div>
        </div>
    </div>

    <!-- Filters -->
    <form method="post">
        <div class="tablenav top">
            <div class="alignleft actions">
                <select name="status" id="filter-by-status">
                    <option value=""><?php _e('All Statuses', 'aimagic'); ?></option>
                    <option value="active"><?php _e('Active', 'aimagic'); ?></option>
                    <option value="inactive"><?php _e('Inactive', 'aimagic'); ?></option>
                    <option value="suspended"><?php _e('Suspended', 'aimagic'); ?></option>
                </select>
                <select name="plan" id="filter-by-plan">
                    <option value=""><?php _e('All Plans', 'aimagic'); ?></option>
                    <option value="free"><?php _e('Free', 'aimagic'); ?></option>
                    <option value="standard"><?php _e('Standard', 'aimagic'); ?></option>
                    <option value="premium"><?php _e('Premium', 'aimagic'); ?></option>
                    <option value="enterprise"><?php _e('Enterprise', 'aimagic'); ?></option>
                </select>
                <?php submit_button(__('Filter', 'aimagic'), 'action', 'filter_action', false); ?>
            </div>
        </div>

        <?php
        // Display search box and table
        $organizations_list_table->search_box('Search Organizations', 'search_organizations');
        $organizations_list_table->display();
        ?>
    </form>
</div>

<style>
.org-stats-overview {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
    gap: 20px;
    margin: 20px 0;
}

.stat-card {
    background: #fff;
    padding: 20px;
    border-radius: 8px;
    box-shadow: 0 1px 3px rgba(0,0,0,0.1);
}

.stat-card h3 {
    margin: 0 0 10px 0;
    font-size: 14px;
    color: #666;
}

.stat-card .stat-value {
    font-size: 24px;
    font-weight: bold;
    color: #2271b1;
}

.column-members {
    width: 100px;
}

.column-storage {
    width: 120px;
}

.column-api_usage {
    width: 150px;
}

.usage-bar {
    height: 8px;
    background: #f0f0f1;
    border-radius: 4px;
    overflow: hidden;
}

.usage-bar-fill {
    height: 100%;
    background: #2271b1;
    transition: width 0.3s ease;
}

.usage-warning .usage-bar-fill {
    background: #dba617;
}

.usage-critical .usage-bar-fill {
    background: #d63638;
}

.status-active {
    color: #00a32a;
}

.status-inactive {
    color: #72777c;
}

.status-suspended {
    color: #d63638;
}
</style>

<script type="text/javascript">
jQuery(document).ready(function($) {
    // Handle status filter changes
    $('#filter-by-status, #filter-by-plan').change(function() {
        var status = $('#filter-by-status').val();
        var plan = $('#filter-by-plan').val();
        var url = new URL(window.location.href);
        
        if (status) url.searchParams.set('status', status);
        else url.searchParams.delete('status');
        
        if (plan) url.searchParams.set('plan', plan);
        else url.searchParams.delete('plan');
        
        window.location.href = url.toString();
    });

    // Update usage bars
    function updateUsageBars() {
        $('.usage-bar').each(function() {
            var percentage = $(this).data('percentage');
            var $fill = $(this).find('.usage-bar-fill');
            
            $fill.css('width', percentage + '%');
            
            if (percentage > 90) {
                $(this).addClass('usage-critical');
            } else if (percentage > 75) {
                $(this).addClass('usage-warning');
            }
        });
    }

    updateUsageBars();
});
</script>

目錄：/www/wwwroot/xart004.heatgroups.top/wp-content/plugins/ai_plateform_v2/files_2025/admin/views
檔名：admin-nodes.php
==================================================
<?php
if (!defined('ABSPATH')) exit;

// Check current user capabilities
if (!current_user_can('manage_options')) {
    wp_die(__('You do not have sufficient permissions to access this page.'));
}

// Load the Nodes List Table class
require_once AIMAGIC_PLUGIN_DIR . 'includes/admin/class-admin-nodes-list.php';

// Create an instance of our list table
$nodes_list_table = new AIMagic\Admin\Nodes_List_Table();
$nodes_list_table->prepare_items();
?>

<div class="wrap">
    <h1 class="wp-heading-inline"><?php _e('AI Nodes', 'aimagic'); ?></h1>
    <a href="<?php echo admin_url('admin.php?page=aimagic-nodes&action=add'); ?>" class="page-title-action">
        <?php _e('Add New', 'aimagic'); ?>
    </a>
    <hr class="wp-header-end">

    <?php
    // Show messages
    if (isset($_GET['message'])) {
        $message = '';
        switch ($_GET['message']) {
            case '1':
                $message = __('Node registered successfully.', 'aimagic');
                break;
            case '2':
                $message = __('Node updated successfully.', 'aimagic');
                break;
            case '3':
                $message = __('Node(s) deleted successfully.', 'aimagic');
                break;
        }
        if ($message) {
            echo '<div class="updated notice is-dismissible"><p>' . $message . '</p></div>';
        }
    }
    ?>

    <form method="post">
        <div class="tablenav top">
            <div class="alignleft actions">
                <select name="status" id="filter-by-status">
                    <option value=""><?php _e('All Statuses', 'aimagic'); ?></option>
                    <option value="active"><?php _e('Active', 'aimagic'); ?></option>
                    <option value="offline"><?php _e('Offline', 'aimagic'); ?></option>
                    <option value="error"><?php _e('Error', 'aimagic'); ?></option>
                </select>
                <select name="type" id="filter-by-type">
                    <option value=""><?php _e('All Types', 'aimagic'); ?></option>
                    <option value="text_node"><?php _e('Text Generation', 'aimagic'); ?></option>
                    <option value="image_node"><?php _e('Image Generation', 'aimagic'); ?></option>
                    <option value="video_node"><?php _e('Video Generation', 'aimagic'); ?></option>
                </select>
                <?php submit_button(__('Filter', 'aimagic'), 'action', 'filter_action', false); ?>
            </div>
        </div>

        <?php
        // Display search box and table
        $nodes_list_table->search_box('Search Nodes', 'search_nodes');
        $nodes_list_table->display();
        ?>
    </form>
</div>

<script type="text/javascript">
jQuery(document).ready(function($) {
    // Handle real-time status updates
    function updateNodeStatuses() {
        $.ajax({
            url: ajaxurl,
            data: {
                action: 'update_node_statuses',
                nonce: '<?php echo wp_create_nonce('update_node_statuses'); ?>'
            },
            success: function(response) {
                if (response.success) {
                    response.data.forEach(function(node) {
                        var row = $('#node-' + node.id);
                        row.find('.column-status').html(node.status_html);
                        row.find('.column-last_heartbeat').html(node.last_heartbeat);
                    });
                }
            }
        });
    }

    // Update node statuses every 30 seconds
    setInterval(updateNodeStatuses, 30000);
});
</script>

目錄：/www/wwwroot/xart004.heatgroups.top/wp-content/plugins/ai_plateform_v2/files_2025/admin/views
檔名：admin-tenants-edit.php
==================================================
<?php
if (!defined('ABSPATH')) exit;

// Check current user capabilities
if (!current_user_can('manage_options')) {
    wp_die(__('You do not have sufficient permissions to access this page.'));
}

$tenant_id = isset($_GET['id']) ? intval($_GET['id']) : 0;
$action = $tenant_id ? 'edit' : 'add';
$tenant = null;

if ($action === 'edit') {
    global $wpdb;
    $tenant = $wpdb->get_row($wpdb->prepare(
        "SELECT * FROM {$wpdb->prefix}aimagic_tenants WHERE id = %d",
        $tenant_id
    ));

    if (!$tenant) {
        wp_die(__('Tenant not found.'));
    }
}

// Handle form submission
if ($_POST && check_admin_referer('aimagic_tenant_' . $action)) {
    $name = sanitize_text_field($_POST['name']);
    $identifier = sanitize_key($_POST['identifier']);
    $plan = sanitize_text_field($_POST['plan']);
    $api_calls_limit = intval($_POST['api_calls_limit']);
    $storage_limit = intval($_POST['storage_limit']);
    $max_users = intval($_POST['max_users']);

    global $wpdb;
    
    if ($action === 'edit') {
        $wpdb->update(
            $wpdb->prefix . 'aimagic_tenants',
            [
                'name' => $name,
                'plan' => $plan,
                'api_calls_limit' => $api_calls_limit,
                'storage_limit' => $storage_limit,
                'max_users' => $max_users,
                'updated_at' => current_time('mysql')
            ],
            ['id' => $tenant_id],
            ['%s', '%s', '%d', '%d', '%d', '%s'],
            ['%d']
        );
        $message = 2; // Updated
    } else {
        // Generate API key
        $api_key = wp_generate_password(32, false);
        
        $wpdb->insert(
            $wpdb->prefix . 'aimagic_tenants',
            [
                'name' => $name,
                'identifier' => $identifier,
                'api_key' => $api_key,
                'plan' => $plan,
                'status' => 'active',
                'api_calls_limit' => $api_calls_limit,
                'storage_limit' => $storage_limit,
                'max_users' => $max_users,
                'created_at' => current_time('mysql'),
                'updated_at' => current_time('mysql')
            ],
            ['%s', '%s', '%s', '%s', '%s', '%d', '%d', '%d', '%s', '%s']
        );
        $message = 1; // Created
    }

    wp_redirect(admin_url('admin.php?page=aimagic-tenants&message=' . $message));
    exit;
}

// Get plan details
$plans = [
    'free' => [
        'api_calls_limit' => 1000,
        'storage_limit' => 1 * GB_IN_BYTES,
        'max_users' => 5
    ],
    'basic' => [
        'api_calls_limit' => 10000,
        'storage_limit' => 5 * GB_IN_BYTES,
        'max_users' => 20
    ],
    'premium' => [
        'api_calls_limit' => 50000,
        'storage_limit' => 20 * GB_IN_BYTES,
        'max_users' => 50
    ],
    'enterprise' => [
        'api_calls_limit' => 250000,
        'storage_limit' => 100 * GB_IN_BYTES,
        'max_users' => 250
    ]
];
?>

<div class="wrap">
    <h1><?php echo $action === 'edit' ? __('Edit Tenant', 'aimagic') : __('Add New Tenant', 'aimagic'); ?></h1>

    <form method="post" action="">
        <?php wp_nonce_field('aimagic_tenant_' . $action); ?>

        <table class="form-table">
            <tr>
                <th scope="row"><label for="name"><?php _e('Name', 'aimagic'); ?></label></th>
                <td>
                    <input name="name" type="text" id="name" value="<?php 
                        echo esc_attr($tenant ? $tenant->name : ''); 
                    ?>" class="regular-text" required>
                </td>
            </tr>
            <?php if ($action === 'add'): ?>
            <tr>
                <th scope="row"><label for="identifier"><?php _e('Identifier', 'aimagic'); ?></label></th>
                <td>
                    <input name="identifier" type="text" id="identifier" class="regular-text" required>
                    <p class="description"><?php _e('Unique identifier for API access (cannot be changed later)', 'aimagic'); ?></p>
                </td>
            </tr>
            <?php endif; ?>
            <tr>
                <th scope="row"><label for="plan"><?php _e('Plan', 'aimagic'); ?></label></th>
                <td>
                    <select name="plan" id="plan">
                        <?php foreach ($plans as $plan_id => $plan_details): ?>
                            <option value="<?php echo esc_attr($plan_id); ?>" <?php 
                                selected($tenant ? $tenant->plan : '', $plan_id); 
                            ?>>
                                <?php echo ucfirst($plan_id); ?>
                            </option>
                        <?php endforeach; ?>
                    </select>
                </td>
            </tr>
            <tr>
                <th scope="row"><label for="api_calls_limit"><?php _e('API Calls Limit', 'aimagic'); ?></label></th>
                <td>
                    <input name="api_calls_limit" type="number" id="api_calls_limit" value="<?php 
                        echo esc_attr($tenant ? $tenant->api_calls_limit : $plans['free']['api_calls_limit']); 
                    ?>" class="regular-text" required>
                    <p class="description"><?php _e('Monthly API calls limit', 'aimagic'); ?></p>
                </td>
            </tr>
            <tr>
                <th scope="row"><label for="storage_limit"><?php _e('Storage Limit (bytes)', 'aimagic'); ?></label></th>
                <td>
                    <input name="storage_limit" type="number" id="storage_limit" value="<?php 
                        echo esc_attr($tenant ? $tenant->storage_limit : $plans['free']['storage_limit']); 
                    ?>" class="regular-text" required>
                    <p class="description"><?php _e('Total storage limit in bytes', 'aimagic'); ?></p>
                </td>
            </tr>
            <tr>
                <th scope="row"><label for="max_users"><?php _e('Max Users', 'aimagic'); ?></label></th>
                <td>
                    <input name="max_users" type="number" id="max_users" value="<?php 
                        echo esc_attr($tenant ? $tenant->max_users : $plans['free']['max_users']); 
                    ?>" class="regular-text" required>
                    <p class="description"><?php _e('Maximum number of users allowed', 'aimagic'); ?></p>
                </td>
            </tr>
            <?php if ($action === 'edit'): ?>
            <tr>
                <th scope="row"><?php _e('API Key', 'aimagic'); ?></th>
                <td>
                    <code><?php echo esc_html($tenant->api_key); ?></code>
                    <button type="button" class="button regenerate-api-key" data-tenant-id="<?php echo $tenant_id; ?>">
                        <?php _e('Regenerate', 'aimagic'); ?>
                    </button>
                </td>
            </tr>
            <tr>
                <th scope="row"><?php _e('Status', 'aimagic'); ?></th>
                <td>
                    <select name="status" id="status">
                        <option value="active" <?php selected($tenant->status, 'active'); ?>>
                            <?php _e('Active', 'aimagic'); ?>
                        </option>
                        <option value="suspended" <?php selected($tenant->status, 'suspended'); ?>>
                            <?php _e('Suspended', 'aimagic'); ?>
                        </option>
                        <option value="trial" <?php selected($tenant->status, 'trial'); ?>>
                            <?php _e('Trial', 'aimagic'); ?>
                        </option>
                    </select>
                </td>
            </tr>
            <tr>
                <th scope="row"><?php _e('Created', 'aimagic'); ?></th>
                <td><?php echo wp_date('Y-m-d H:i:s', strtotime($tenant->created_at)); ?></td>
            </tr>
            <?php endif; ?>
        </table>

        <?php submit_button($action === 'edit' ? __('Update Tenant', 'aimagic') : __('Create Tenant', 'aimagic')); ?>
    </form>

    <?php if ($action === 'edit'): ?>
    <div class="card">
        <h2><?php _e('Usage Statistics', 'aimagic'); ?></h2>
        <div id="tenant-usage-stats"></div>
    </div>

    <script type="text/javascript">
    jQuery(document).ready(function($) {
        // Handle plan selection
        $('#plan').change(function() {
            var plan = $(this).val();
            var plans = <?php echo json_encode($plans); ?>;
            if (plans[plan]) {
                $('#api_calls_limit').val(plans[plan].api_calls_limit);
                $('#storage_limit').val(plans[plan].storage_limit);
                $('#max_users').val(plans[plan].max_users);
            }
        });

        // Load usage statistics
        function loadUsageStats() {
            $.ajax({
                url: ajaxurl,
                data: {
                    action: 'get_tenant_usage_stats',
                    tenant_id: <?php echo $tenant_id; ?>,
                    nonce: '<?php echo wp_create_nonce('get_tenant_usage_stats'); ?>'
                },
                success: function(response) {
                    if (response.success) {
                        drawUsageStats(response.data);
                    }
                }
            });
        }

        function drawUsageStats(data) {
            // Implementation of usage statistics visualization
            // Using a library like Chart.js
        }

        // Initial load
        loadUsageStats();
        
        // Refresh every 5 minutes
        setInterval(loadUsageStats, 300000);
    });
    </script>
    <?php endif; ?>
</div>

目錄：/www/wwwroot/xart004.heatgroups.top/wp-content/plugins/ai_plateform_v2/files_2025/admin/views
檔名：admin-users-edit.php
==================================================
<?php
if (!defined('ABSPATH')) exit;

$user_id = isset($_GET['id']) ? sanitize_text_field($_GET['id']) : '';
$action = $user_id ? 'edit' : 'add';
$user = null;

if ($action === 'edit' && $user_id) {
    $user_manager = AIMagic\Core\UserManager::getInstance();
    $user = $user_manager->get_user_info($user_id);
}

if ($_POST && check_admin_referer('aimagic_user_' . $action)) {
    // Handle form submission
    $user_data = [
        'user_id' => sanitize_text_field($_POST['user_id']),
        'user_name' => sanitize_text_field($_POST['user_name']),
        'daily_quota' => intval($_POST['daily_quota']),
        'status' => sanitize_text_field($_POST['status'])
    ];

    $user_manager = AIMagic\Core\UserManager::getInstance();
    if ($action === 'edit') {
        $result = $user_manager->update_user($user_data);
    } else {
        $result = $user_manager->register_user($user_data['user_id'], $user_data['user_name']);
    }

    if ($result) {
        wp_redirect(admin_url('admin.php?page=aimagic-users&message=1'));
        exit;
    }
}
?>

<div class="wrap">
    <h1><?php echo $action === 'edit' ? __('Edit User', 'aimagic') : __('Add New User', 'aimagic'); ?></h1>

    <form method="post" action="">
        <?php wp_nonce_field('aimagic_user_' . $action); ?>
        
        <table class="form-table">
            <tr>
                <th scope="row"><label for="user_id"><?php _e('User ID', 'aimagic'); ?></label></th>
                <td>
                    <input name="user_id" type="text" id="user_id" value="<?php echo esc_attr($user ? $user['user_id'] : ''); ?>"
                           class="regular-text" <?php echo $action === 'edit' ? 'readonly' : ''; ?> required>
                </td>
            </tr>
            <tr>
                <th scope="row"><label for="user_name"><?php _e('Name', 'aimagic'); ?></label></th>
                <td>
                    <input name="user_name" type="text" id="user_name" value="<?php echo esc_attr($user ? $user['user_name'] : ''); ?>"
                           class="regular-text" required>
                </td>
            </tr>
            <tr>
                <th scope="row"><label for="daily_quota"><?php _e('Daily Quota', 'aimagic'); ?></label></th>
                <td>
                    <input name="daily_quota" type="number" id="daily_quota" 
                           value="<?php echo esc_attr($user ? $user['quota']['daily_quota'] : '2'); ?>"
                           class="small-text" min="0" required>
                </td>
            </tr>
            <tr>
                <th scope="row"><label for="status"><?php _e('Status', 'aimagic'); ?></label></th>
                <td>
                    <select name="status" id="status">
                        <option value="active" <?php selected($user ? $user['status'] : '', 'active'); ?>>
                            <?php _e('Active', 'aimagic'); ?>
                        </option>
                        <option value="inactive" <?php selected($user ? $user['status'] : '', 'inactive'); ?>>
                            <?php _e('Inactive', 'aimagic'); ?>
                        </option>
                    </select>
                </td>
            </tr>
        </table>

        <?php submit_button($action === 'edit' ? __('Update User', 'aimagic') : __('Add User', 'aimagic')); ?>
    </form>
</div>

目錄：/www/wwwroot/xart004.heatgroups.top/wp-content/plugins/ai_plateform_v2/files_2025/admin/views
檔名：admin-users.php
==================================================
<?php
if (!defined('ABSPATH')) exit;

// Load the User List Table class
require_once AIMAGIC_PLUGIN_DIR . 'includes/admin/class-admin-users-list.php';

// Create an instance of our list table
$users_list_table = new AIMagic\Admin\Users_List_Table();
$users_list_table->prepare_items();
?>

<div class="wrap">
    <h1 class="wp-heading-inline"><?php _e('AI Magic Users', 'aimagic'); ?></h1>
    <a href="<?php echo admin_url('admin.php?page=aimagic-users&action=add'); ?>" class="page-title-action"><?php _e('Add New', 'aimagic'); ?></a>
    <hr class="wp-header-end">

    <form method="post">
        <?php $users_list_table->search_box('Search Users', 'search_users'); ?>
        <?php $users_list_table->display(); ?>
    </form>
</div>

目錄：/www/wwwroot/xart004.heatgroups.top/wp-content/plugins/ai_plateform_v2/files_2025/admin/views
檔名：admin-organizations-edit.php
==================================================
<?php
if (!defined('ABSPATH')) exit;

// Check current user capabilities
if (!current_user_can('manage_options')) {
    wp_die(__('You do not have sufficient permissions to access this page.'));
}

$org_id = isset($_GET['id']) ? intval($_GET['id']) : 0;
$action = $org_id ? 'edit' : 'add';
$organization = null;

if ($action === 'edit') {
    global $wpdb;
    $organization = $wpdb->get_row($wpdb->prepare(
        "SELECT * FROM {$wpdb->prefix}aimagic_organizations WHERE id = %d",
        $org_id
    ));

    if (!$organization) {
        wp_die(__('Organization not found.'));
    }
}

// Handle form submission
if ($_POST && check_admin_referer('aimagic_organization_' . $action)) {
    $name = sanitize_text_field($_POST['name']);
    $domain = sanitize_text_field($_POST['domain']);
    $plan = sanitize_text_field($_POST['plan']);
    $max_members = intval($_POST['max_members']);
    $storage_limit = intval($_POST['storage_limit']);
    $api_limit = intval($_POST['api_limit']);

    global $wpdb;
    
    if ($action === 'edit') {
        $wpdb->update(
            $wpdb->prefix . 'aimagic_organizations',
            [
                'name' => $name,
                'domain' => $domain,
                'plan' => $plan,
                'max_members' => $max_members,
                'storage_limit' => $storage_limit,
                'api_limit' => $api_limit,
                'updated_at' => current_time('mysql')
            ],
            ['id' => $org_id],
            ['%s', '%s', '%s', '%d', '%d', '%d', '%s'],
            ['%d']
        );
        $message = 2; // Updated
    } else {
        $wpdb->insert(
            $wpdb->prefix . 'aimagic_organizations',
            [
                'name' => $name,
                'domain' => $domain,
                'plan' => $plan,
                'status' => 'active',
                'max_members' => $max_members,
                'storage_limit' => $storage_limit,
                'api_limit' => $api_limit,
                'created_at' => current_time('mysql'),
                'updated_at' => current_time('mysql')
            ],
            ['%s', '%s', '%s', '%s', '%d', '%d', '%d', '%s', '%s']
        );
        $message = 1; // Created
    }

    wp_redirect(admin_url('admin.php?page=aimagic-organizations&message=' . $message));
    exit;
}

// Get plan details
$plans = [
    'free' => [
        'max_members' => 5,
        'storage_limit' => 5 * GB_IN_BYTES,
        'api_limit' => 1000
    ],
    'standard' => [
        'max_members' => 20,
        'storage_limit' => 20 * GB_IN_BYTES,
        'api_limit' => 5000
    ],
    'premium' => [
        'max_members' => 50,
        'storage_limit' => 100 * GB_IN_BYTES,
        'api_limit' => 20000
    ],
    'enterprise' => [
        'max_members' => 200,
        'storage_limit' => 500 * GB_IN_BYTES,
        'api_limit' => 100000
    ]
];
?>

<div class="wrap">
    <h1><?php echo $action === 'edit' ? __('Edit Organization', 'aimagic') : __('Add New Organization', 'aimagic'); ?></h1>

    <form method="post" action="">
        <?php wp_nonce_field('aimagic_organization_' . $action); ?>

        <table class="form-table">
            <tr>
                <th scope="row"><label for="name"><?php _e('Name', 'aimagic'); ?></label></th>
                <td>
                    <input name="name" type="text" id="name" value="<?php 
                        echo esc_attr($organization ? $organization->name : ''); 
                    ?>" class="regular-text" required>
                </td>
            </tr>
            <tr>
                <th scope="row"><label for="domain"><?php _e('Domain', 'aimagic'); ?></label></th>
                <td>
                    <input name="domain" type="text" id="domain" value="<?php 
                        echo esc_attr($organization ? $organization->domain : ''); 
                    ?>" class="regular-text" required>
                    <p class="description"><?php _e('Primary domain for organization authentication', 'aimagic'); ?></p>
                </td>
            </tr>
            <tr>
                <th scope="row"><label for="plan"><?php _e('Plan', 'aimagic'); ?></label></th>
                <td>
                    <select name="plan" id="plan">
                        <?php foreach ($plans as $plan_id => $plan_details): ?>
                            <option value="<?php echo esc_attr($plan_id); ?>" <?php 
                                selected($organization ? $organization->plan : '', $plan_id); 
                            ?>>
                                <?php echo ucfirst($plan_id); ?>
                            </option>
                        <?php endforeach; ?>
                    </select>
                </td>
            </tr>
            <tr>
                <th scope="row"><label for="max_members"><?php _e('Max Members', 'aimagic'); ?></label></th>
                <td>
                    <input name="max_members" type="number" id="max_members" value="<?php 
                        echo esc_attr($organization ? $organization->max_members : $plans['free']['max_members']); 
                    ?>" class="small-text" min="1" required>
                </td>
            </tr>
            <tr>
                <th scope="row"><label for="storage_limit"><?php _e('Storage Limit (bytes)', 'aimagic'); ?></label></th>
                <td>
                    <input name="storage_limit" type="number" id="storage_limit" value="<?php 
                        echo esc_attr($organization ? $organization->storage_limit : $plans['free']['storage_limit']); 
                    ?>" class="regular-text" min="0" required>
                    <p class="description"><?php _e('Total storage limit in bytes', 'aimagic'); ?></p>
                </td>
            </tr>
            <tr>
                <th scope="row"><label for="api_limit"><?php _e('Monthly API Limit', 'aimagic'); ?></label></th>
                <td>
                    <input name="api_limit" type="number" id="api_limit" value="<?php 
                        echo esc_attr($organization ? $organization->api_limit : $plans['free']['api_limit']); 
                    ?>" class="regular-text" min="0" required>
                </td>
            </tr>
            <?php if ($action === 'edit'): ?>
            <tr>
                <th scope="row"><?php _e('Status', 'aimagic'); ?></th>
                <td>
                    <select name="status" id="status">
                        <option value="active" <?php selected($organization->status, 'active'); ?>>
                            <?php _e('Active', 'aimagic'); ?>
                        </option>
                        <option value="inactive" <?php selected($organization->status, 'inactive'); ?>>
                            <?php _e('Inactive', 'aimagic'); ?>
                        </option>
                        <option value="suspended" <?php selected($organization->status, 'suspended'); ?>>
                            <?php _e('Suspended', 'aimagic'); ?>
                        </option>
                    </select>
                </td>
            </tr>
            <tr>
                <th scope="row"><?php _e('Created', 'aimagic'); ?></th>
                <td><?php echo wp_date('Y-m-d H:i:s', strtotime($organization->created_at)); ?></td>
            </tr>
            <?php endif; ?>
        </table>

        <?php submit_button($action === 'edit' ? __('Update Organization', 'aimagic') : __('Create Organization', 'aimagic')); ?>
    </form>

    <?php if ($action === 'edit'): ?>
    <!-- Members List -->
    <div class="card">
        <h2><?php _e('Organization Members', 'aimagic'); ?></h2>
        <?php
        $members = $wpdb->get_results($wpdb->prepare(
            "SELECT m.*, u.user_name 
            FROM {$wpdb->prefix}aimagic_org_members m
            JOIN {$wpdb->prefix}aimagic_user_data u ON m.user_id = u.user_id
            WHERE m.org_id = %d
            ORDER BY m.role DESC, u.user_name ASC",
            $org_id
        ));
        ?>
        <table class="wp-list-table widefat fixed striped">
            <thead>
                <tr>
                    <th><?php _e('User', 'aimagic'); ?></th>
                    <th><?php _e('Role', 'aimagic'); ?></th>
                    <th><?php _e('Storage Used', 'aimagic'); ?></th>
                    <th><?php _e('API Calls', 'aimagic'); ?></th>
                    <th><?php _e('Actions', 'aimagic'); ?></th>
                </tr>
            </thead>
            <tbody>
                <?php foreach ($members as $member): ?>
                <tr>
                    <td><?php echo esc_html($member->user_name); ?></td>
                    <td><?php echo ucfirst($member->role); ?></td>
                    <td><?php echo size_format($member->storage_used); ?></td>
                    <td><?php echo number_format_i18n($member->api_calls); ?></td>
                    <td>
                        <a href="#" class="edit-member" data-member-id="<?php echo $member->id; ?>">
                            <?php _e('Edit', 'aimagic'); ?>
                        </a> |
                        <a href="#" class="remove-member" data-member-id="<?php echo $member->id; ?>">
                            <?php _e('Remove', 'aimagic'); ?>
                        </a>
                    </td>
                </tr>
                <?php endforeach; ?>
            </tbody>
        </table>
        <p>
            <button type="button" class="button" id="add-member">
                <?php _e('Add Member', 'aimagic'); ?>
            </button>
        </p>
    </div>

    <!-- Usage Statistics -->
    <div class="card">
        <h2><?php _e('Usage Statistics', 'aimagic'); ?></h2>
        <div id="org-usage-stats"></div>
    </div>
    <?php endif; ?>
</div>

<script type="text/javascript">
jQuery(document).ready(function($) {
    // Handle plan selection
    $('#plan').change(function() {
        var plan = $(this).val();
        var plans = <?php echo json_encode($plans); ?>;
        if (plans[plan]) {
            $('#max_members').val(plans[plan].max_members);
            $('#storage_limit').val(plans[plan].storage_limit);
            $('#api_limit').val(plans[plan].api_limit);
        }
    });

    <?php if ($action === 'edit'): ?>
    // Member management
    $('#add-member').click(function() {
        // Show member add dialog
        // Implementation needed
    });

    $('.edit-member').click(function(e) {
        e.preventDefault();
        var memberId = $(this).data('member-id');
        // Show member edit dialog
        // Implementation needed
    });

    $('.remove-member').click(function(e) {
        e.preventDefault();
        if (!confirm('<?php _e('Are you sure you want to remove this member?', 'aimagic'); ?>')) {
            return;
        }
        var memberId = $(this).data('member-id');
        // Remove member
        // Implementation needed
    });

    // Load usage statistics
    function loadUsageStats() {
        $.ajax({
            url: ajaxurl,
            data: {
                action: 'get_org_usage_stats',
                org_id: <?php echo $org_id; ?>,
                nonce: '<?php echo wp_create_nonce('get_org_usage_stats'); ?>'
            },
            success: function(response) {
                if (response.success) {
                    // Update usage statistics visualization
                    // Implementation needed
                }
            }
        });
    }

    loadUsageStats();
    <?php endif; ?>
});
</script>

目錄：/www/wwwroot/xart004.heatgroups.top/wp-content/plugins/ai_plateform_v2/files_2025/admin/views
檔名：admin-contents-edit.php
==================================================
<?php
if (!defined('ABSPATH')) exit;

// Check current user capabilities
if (!current_user_can('manage_options')) {
    wp_die(__('You do not have sufficient permissions to access this page.'));
}

$content_id = isset($_GET['id']) ? intval($_GET['id']) : 0;
$action = $content_id ? 'edit' : 'add';
$content = null;

if ($action === 'edit') {
    global $wpdb;
    $content = $wpdb->get_row($wpdb->prepare(
        "SELECT c.*, o.name as organization_name, u.user_name as author_name
        FROM {$wpdb->prefix}aimagic_contents c
        LEFT JOIN {$wpdb->prefix}aimagic_organizations o ON c.organization_id = o.id
        LEFT JOIN {$wpdb->prefix}aimagic_user_data u ON c.author_id = u.user_id
        WHERE c.id = %d",
        $content_id
    ));

    if (!$content) {
        wp_die(__('Content not found.'));
    }
}

// Handle form submission
if ($_POST && check_admin_referer('aimagic_content_' . $action)) {
    $title = sanitize_text_field($_POST['title']);
    $description = sanitize_textarea_field($_POST['description']);
    $content_type = sanitize_text_field($_POST['content_type']);
    $organization_id = intval($_POST['organization_id']);
    $status = sanitize_text_field($_POST['status']);
    $prompt = sanitize_textarea_field($_POST['prompt']);
    $tags = isset($_POST['tags']) ? array_map('sanitize_text_field', $_POST['tags']) : [];

    global $wpdb;
    
    if ($action === 'edit') {
        // Update existing content
        $wpdb->update(
            $wpdb->prefix . 'aimagic_contents',
            [
                'title' => $title,
                'description' => $description,
                'status' => $status,
                'prompt' => $prompt,
                'tags' => json_encode($tags),
                'updated_at' => current_time('mysql')
            ],
            ['id' => $content_id],
            ['%s', '%s', '%s', '%s', '%s', '%s'],
            ['%d']
        );
        $message = 2; // Updated
    } else {
        // Handle file upload for image/video content
        $content_url = '';
        $thumbnail_url = '';
        $storage_size = 0;
        $content_text = '';

        if ($content_type === 'text') {
            $content_text = wp_kses_post($_POST['content_text']);
            $storage_size = strlen($content_text);
        } else {
            if (!empty($_FILES['content_file']['name'])) {
                $upload = wp_handle_upload($_FILES['content_file'], ['test_form' => false]);
                if (!isset($upload['error'])) {
                    $content_url = $upload['url'];
                    $storage_size = filesize($upload['file']);

                    // Generate thumbnail for videos
                    if ($content_type === 'video') {
                        // Implementation of video thumbnail generation
                        // This would typically use FFmpeg or similar tool
                        $thumbnail_url = generate_video_thumbnail($upload['file']);
                    }
                }
            }
        }

        // Insert new content
        $wpdb->insert(
            $wpdb->prefix . 'aimagic_contents',
            [
                'title' => $title,
                'description' => $description,
                'content_type' => $content_type,
                'content_url' => $content_url,
                'thumbnail_url' => $thumbnail_url,
                'content_text' => $content_text,
                'organization_id' => $organization_id,
                'author_id' => get_current_user_id(),
                'status' => $status,
                'prompt' => $prompt,
                'tags' => json_encode($tags),
                'storage_size' => $storage_size,
                'created_at' => current_time('mysql'),
                'updated_at' => current_time('mysql')
            ],
            [
                '%s', '%s', '%s', '%s', '%s', '%s', '%d', '%d', 
                '%s', '%s', '%s', '%d', '%s', '%s'
            ]
        );
        $message = 1; // Created
    }

    wp_redirect(admin_url('admin.php?page=aimagic-contents&message=' . $message));
    exit;
}

// Get organizations for dropdown
$organizations = $wpdb->get_results(
    "SELECT id, name FROM {$wpdb->prefix}aimagic_organizations WHERE status = 'active' ORDER BY name ASC"
);
?>

<div class="wrap">
    <h1><?php echo $action === 'edit' ? __('Edit Content', 'aimagic') : __('Add New Content', 'aimagic'); ?></h1>

    <form method="post" action="" enctype="multipart/form-data">
        <?php wp_nonce_field('aimagic_content_' . $action); ?>

        <div id="poststuff">
            <div id="post-body" class="metabox-holder columns-2">
                <div id="post-body-content">
                    <!-- Title -->
                    <div class="postbox">
                        <div class="postbox-header">
                            <h2><?php _e('Content Details', 'aimagic'); ?></h2>
                        </div>
                        <div class="inside">
                            <p>
                                <label for="title"><?php _e('Title', 'aimagic'); ?></label>
                                <input name="title" type="text" id="title" value="<?php 
                                    echo esc_attr($content ? $content->title : ''); 
                                ?>" class="regular-text" required>
                            </p>
                            <p>
                                <label for="description"><?php _e('Description', 'aimagic'); ?></label>
                                <textarea name="description" id="description" rows="3" class="large-text"><?php 
                                    echo esc_textarea($content ? $content->description : ''); 
                                ?></textarea>
                            </p>
                            <?php if ($action === 'add'): ?>
                            <p>
                                <label for="content_type"><?php _e('Content Type', 'aimagic'); ?></label>
                                <select name="content_type" id="content_type" required>
                                    <option value="text"><?php _e('Text', 'aimagic'); ?></option>
                                    <option value="image"><?php _e('Image', 'aimagic'); ?></option>
                                    <option value="video"><?php _e('Video', 'aimagic'); ?></option>
                                </select>
                            </p>
                            <p>
                                <label for="organization_id"><?php _e('Organization', 'aimagic'); ?></label>
                                <select name="organization_id" id="organization_id" required>
                                    <?php foreach ($organizations as $org): ?>
                                        <option value="<?php echo $org->id; ?>"><?php echo esc_html($org->name); ?></option>
                                    <?php endforeach; ?>
                                </select>
                            </p>
                            <?php endif; ?>
                        </div>
                    </div>

                    <!-- Content -->
                    <div class="postbox">
                        <div class="postbox-header">
                            <h2><?php _e('Content', 'aimagic'); ?></h2>
                        </div>
                        <div class="inside">
                            <?php if ($action === 'add'): ?>
                                <div id="text-content" class="content-input">
                                    <textarea name="content_text" id="content_text" rows="10" class="large-text"></textarea>
                                </div>
                                <div id="file-content" class="content-input" style="display:none;">
                                    <input type="file" name="content_file" id="content_file">
                                    <p class="description" id="file-requirements"></p>
                                </div>
                            <?php else: ?>
                                <?php if ($content->content_type === 'text'): ?>
                                    <textarea name="content_text" id="content_text" rows="10" class="large-text"><?php 
                                        echo esc_textarea($content->content_text); 
                                    ?></textarea>
                                <?php else: ?>
                                    <div class="content-preview">
                                        <?php if ($content->content_type === 'image'): ?>
                                            <img src="<?php echo esc_url($content->content_url); ?>" alt="<?php echo esc_attr($content->title); ?>">
                                        <?php elseif ($content->content_type === 'video'): ?>
                                            <video controls poster="<?php echo esc_url($content->thumbnail_url); ?>">
                                                <source src="<?php echo esc_url($content->content_url); ?>" type="video/mp4">
                                            </video>
                                        <?php endif; ?>
                                    </div>
                                <?php endif; ?>
                            <?php endif; ?>
                        </div>
                    </div>

                    <!-- Generation Details -->
                    <div class="postbox">
                        <div class="postbox-header">
                            <h2><?php _e('Generation Details', 'aimagic'); ?></h2>
                        </div>
                        <div class="inside">
                            <p>
                                <label for="prompt"><?php _e('Generation Prompt', 'aimagic'); ?></label>
                                <textarea name="prompt" id="prompt" rows="3" class="large-text"><?php 
                                    echo esc_textarea($content ? $content->prompt : ''); 
                                ?></textarea>
                            </p>
                            <p>
                                <label for="tags"><?php _e('Tags', 'aimagic'); ?></label>
                                <input type="text" name="tags" id="tags" value="<?php 
                                    echo esc_attr($content ? implode(', ', json_decode($content->tags, true)) : ''); 
                                ?>" class="regular-text">
                                <p class="description"><?php _e('Comma-separated tags', 'aimagic'); ?></p>
                            </p>
                        </div>
                    </div>
                </div>

                <div id="postbox-container-1" class="postbox-container">
                    <!-- Status -->
                    <div class="postbox">
                        <div class="postbox-header">
                            <h2><?php _e('Status', 'aimagic'); ?></h2>
                        </div>
                        <div class="inside">
                            <select name="status" id="status">
                                <option value="published" <?php selected($content ? $content->status : '', 'published'); ?>>
                                    <?php _e('Published', 'aimagic'); ?>
                                </option>
                                <option value="draft" <?php selected($content ? $content->status : '', 'draft'); ?>>
                                    <?php _e('Draft', 'aimagic'); ?>
                                </option>
                                <option value="archived" <?php selected($content ? $content->status : '', 'archived'); ?>>
                                    <?php _e('Archived', 'aimagic'); ?>
                                </option>
                            </select>

                            <?php submit_button(
                                $action === 'edit' ? __('Update Content', 'aimagic') : __('Create Content', 'aimagic'),
                                'primary',
                                'submit',
                                false
                            ); ?>
                        </div>
                    </div>

                    <?php if ($action === 'edit'): ?>
                    <!-- Information -->
                    <div class="postbox">
                        <div class="postbox-header">
                            <h2><?php _e('Information', 'aimagic'); ?></h2>
                        </div>
                        <div class="inside">
                            <p>
                                <strong><?php _e('Organization:', 'aimagic'); ?></strong>
                                <span><?php echo esc_html($content->organization_name); ?></span>
                            </p>
                            <p>
                                <strong><?php _e('Author:', 'aimagic'); ?></strong>
                                <span><?php echo esc_html($content->author_name); ?></span>
                            </p>
                            <p>
                                <strong><?php _e('Created:', 'aimagic'); ?></strong>
                                <span><?php echo wp_date('Y-m-d H:i:s', strtotime($content->created_at)); ?></span>
                            </p>
                            <p>
                                <strong><?php _e('Last Modified:', 'aimagic'); ?></strong>
                                <span><?php echo wp_date('Y-m-d H:i:s', strtotime($content->updated_at)); ?></span>
                            </p>
                            <p>
                                <strong><?php _e('Storage Size:', 'aimagic'); ?></strong>
                                <span><?php echo size_format($content->storage_size); ?></span>
                            </p>
                            <p>
                                <strong><?php _e('Generation Time:', 'aimagic'); ?></strong>
                                <span><?php echo number_format($content->generation_time, 2); ?>s</span>
                            </p>
                        </div>
                    </div>

                    <!-- Usage Statistics -->
                    <div class="postbox">
                        <div class="postbox-header">
                            <h2><?php _e('Usage Statistics', 'aimagic'); ?></h2>
                        </div>
                        <div class="inside">
                            <?php
                            $usage_stats = $wpdb->get_row($wpdb->prepare(
                                "SELECT 
                                    COUNT(*) as total_uses,
                                    COUNT(DISTINCT user_id) as unique_users,
                                    MAX(used_at) as last_used
                                FROM {$wpdb->prefix}aimagic_content_usage
                                WHERE content_id = %d",
                                $content_id
                            ));
                            ?>
                            <p>
                                <strong><?php _e('Total Uses:', 'aimagic'); ?></strong>
                                <span><?php echo number_format_i18n($usage_stats->total_uses); ?></span>
                            </p>
                            <p>
                                <strong><?php _e('Unique Users:', 'aimagic'); ?></strong>
                                <span><?php echo number_format_i18n($usage_stats->unique_users); ?></span>
                            </p>
                            <p>
                                <strong><?php _e('Last Used:', 'aimagic'); ?></strong>
                                <span><?php echo $usage_stats->last_used ? 
                                    wp_date('Y-m-d H:i:s', strtotime($usage_stats->last_used)) : 
                                    __('Never', 'aimagic'); ?></span>
                            </p>
                            <div id="usage-chart"></div>
                        </div>
                    </div>
                    <?php endif; ?>
                </div>
            </div>
        </div>
    </form>
</div>

<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
<script type="text/javascript">
jQuery(document).ready(function($) {
    // Handle content type switching
    $('#content_type').change(function() {
        var type = $(this).val();
        $('.content-input').hide();
        
        if (type === 'text') {
            $('#text-content').show();
            $('#file-requirements').text('');
        } else {
            $('#file-content').show();
            if (type === 'image') {
                $('#file-requirements').text('<?php _e('Supported formats: JPG, PNG, WebP. Max size: 10MB', 'aimagic'); ?>');
            } else {
                $('#file-requirements').text('<?php _e('Supported formats: MP4, WebM. Max size: 100MB', 'aimagic'); ?>');
            }
        }
    });

    // Initialize tag input
    $('#tags').selectize({
        plugins: ['remove_button'],
        delimiter: ',',
        persist: false,
        create: function(input) {
            return {
                value: input,
                text: input
            }
        }
    });

    <?php if ($action === 'edit'): ?>
    // Load usage chart
    $.ajax({
        url: ajaxurl,
        data: {
            action: 'get_content_usage',
            content_id: <?php echo $content_id; ?>,
            nonce: '<?php echo wp_create_nonce('get_content_usage'); ?>'
        },
        success: function(response) {
            if (response.success) {
                var ctx = document.getElementById('usage-chart').getContext('2d');
                new Chart(ctx, {
                    type: 'line',
                    data: response.data,
                    options: {
                        responsive: true,
                        scales: {
                            y: {
                                beginAtZero: true
                            }
                        }
                    }
                });
            }
        }
    });
    <?php endif; ?>
});
</script>

<style>
.content-preview img,
.content-preview video {
    max-width: 100%;
    height: auto;
    border-radius: 4px;
}

#usage-chart {
    margin-top: 15px;
    height: 200px;
}

.selectize-control {
    margin-top: 5px;
}

.selectize-dropdown,
.selectize-input {
    font-size: 13px;
}

.content-input {
    margin-bottom: 15px;
}
</style>

目錄：/www/wwwroot/xart004.heatgroups.top/wp-content/plugins/ai_plateform_v2/files_2025/admin/views
檔名：admin-analytics.php
==================================================
<?php
if (!defined('ABSPATH')) exit;

// Check current user capabilities
if (!current_user_can('manage_options')) {
    wp_die(__('You do not have sufficient permissions to access this page.'));
}

// Load the Analytics data handler
require_once AIMAGIC_PLUGIN_DIR . 'includes/admin/class-admin-analytics-list.php';
$analytics = new AIMagic\Admin\Analytics_List();

// Get date range
$date_range = isset($_GET['range']) ? sanitize_text_field($_GET['range']) : '30days';
$custom_from = isset($_GET['from']) ? sanitize_text_field($_GET['from']) : '';
$custom_to = isset($_GET['to']) ? sanitize_text_field($_GET['to']) : '';

// Get analytics data
$data = $analytics->get_analytics_data($date_range, $custom_from, $custom_to);
?>

<div class="wrap">
    <h1><?php _e('Analytics Dashboard', 'aimagic'); ?></h1>

    <!-- Date Range Selector -->
    <div class="date-range-selector">
        <form method="get">
            <input type="hidden" name="page" value="aimagic-analytics">
            <select name="range" id="date-range">
                <option value="7days" <?php selected($date_range, '7days'); ?>><?php _e('Last 7 Days', 'aimagic'); ?></option>
                <option value="30days" <?php selected($date_range, '30days'); ?>><?php _e('Last 30 Days', 'aimagic'); ?></option>
                <option value="90days" <?php selected($date_range, '90days'); ?>><?php _e('Last 90 Days', 'aimagic'); ?></option>
                <option value="12months" <?php selected($date_range, '12months'); ?>><?php _e('Last 12 Months', 'aimagic'); ?></option>
                <option value="custom" <?php selected($date_range, 'custom'); ?>><?php _e('Custom Range', 'aimagic'); ?></option>
            </select>
            <span class="custom-date-range" style="display: <?php echo $date_range === 'custom' ? 'inline' : 'none'; ?>">
                <input type="date" name="from" value="<?php echo esc_attr($custom_from); ?>">
                <input type="date" name="to" value="<?php echo esc_attr($custom_to); ?>">
            </span>
            <?php submit_button(__('Apply', 'aimagic'), 'secondary', 'apply', false); ?>
        </form>
    </div>

    <!-- Overview Cards -->
    <div class="analytics-overview">
        <div class="card">
            <h3><?php _e('Total API Calls', 'aimagic'); ?></h3>
            <div class="number"><?php echo number_format_i18n($data['total_api_calls']); ?></div>
            <div class="trend <?php echo $data['api_calls_trend'] >= 0 ? 'positive' : 'negative'; ?>">
                <?php echo sprintf('%+d%%', $data['api_calls_trend']); ?>
            </div>
        </div>
        <div class="card">
            <h3><?php _e('Active Users', 'aimagic'); ?></h3>
            <div class="number"><?php echo number_format_i18n($data['active_users']); ?></div>
            <div class="trend <?php echo $data['users_trend'] >= 0 ? 'positive' : 'negative'; ?>">
                <?php echo sprintf('%+d%%', $data['users_trend']); ?>
            </div>
        </div>
        <div class="card">
            <h3><?php _e('Revenue', 'aimagic'); ?></h3>
            <div class="number"><?php echo number_format_i18n($data['revenue'], 2); ?></div>
            <div class="trend <?php echo $data['revenue_trend'] >= 0 ? 'positive' : 'negative'; ?>">
                <?php echo sprintf('%+d%%', $data['revenue_trend']); ?>
            </div>
        </div>
        <div class="card">
            <h3><?php _e('Success Rate', 'aimagic'); ?></h3>
            <div class="number"><?php echo number_format_i18n($data['success_rate'], 1); ?>%</div>
            <div class="trend <?php echo $data['success_rate_trend'] >= 0 ? 'positive' : 'negative'; ?>">
                <?php echo sprintf('%+d%%', $data['success_rate_trend']); ?>
            </div>
        </div>
    </div>

    <!-- Charts Section -->
    <div class="analytics-charts">
        <!-- API Usage Chart -->
        <div class="chart-container">
            <h3><?php _e('API Usage Over Time', 'aimagic'); ?></h3>
            <div class="chart-filters">
                <select id="api-chart-grouping">
                    <option value="hourly"><?php _e('Hourly', 'aimagic'); ?></option>
                    <option value="daily"><?php _e('Daily', 'aimagic'); ?></option>
                    <option value="weekly"><?php _e('Weekly', 'aimagic'); ?></option>
                    <option value="monthly"><?php _e('Monthly', 'aimagic'); ?></option>
                </select>
                <select id="api-chart-type">
                    <option value="all"><?php _e('All APIs', 'aimagic'); ?></option>
                    <option value="text"><?php _e('Text Generation', 'aimagic'); ?></option>
                    <option value="image"><?php _e('Image Generation', 'aimagic'); ?></option>
                    <option value="video"><?php _e('Video Generation', 'aimagic'); ?></option>
                </select>
            </div>
            <canvas id="apiUsageChart"></canvas>
        </div>

        <!-- User Activity Chart -->
        <div class="chart-container">
            <h3><?php _e('User Activity', 'aimagic'); ?></h3>
            <div class="chart-filters">
                <select id="user-chart-metric">
                    <option value="active_users"><?php _e('Active Users', 'aimagic'); ?></option>
                    <option value="new_users"><?php _e('New Users', 'aimagic'); ?></option>
                    <option value="requests_per_user"><?php _e('Requests per User', 'aimagic'); ?></option>
                </select>
            </div>
            <canvas id="userActivityChart"></canvas>
        </div>

        <!-- Resource Usage Chart -->
        <div class="chart-container">
            <h3><?php _e('Resource Usage', 'aimagic'); ?></h3>
            <div class="chart-filters">
                <select id="resource-chart-type">
                    <option value="cpu"><?php _e('CPU Usage', 'aimagic'); ?></option>
                    <option value="memory"><?php _e('Memory Usage', 'aimagic'); ?></option>
                    <option value="storage"><?php _e('Storage', 'aimagic'); ?></option>
                </select>
            </div>
            <canvas id="resourceUsageChart"></canvas>
        </div>

        <!-- Error Rate Chart -->
        <div class="chart-container">
            <h3><?php _e('Error Rates', 'aimagic'); ?></h3>
            <div class="chart-filters">
                <select id="error-chart-type">
                    <option value="all"><?php _e('All Errors', 'aimagic'); ?></option>
                    <option value="api"><?php _e('API Errors', 'aimagic'); ?></option>
                    <option value="system"><?php _e('System Errors', 'aimagic'); ?></option>
                </select>
            </div>
            <canvas id="errorRateChart"></canvas>
        </div>
    </div>

    <!-- Detailed Statistics -->
    <div class="analytics-details">
        <h2><?php _e('Detailed Statistics', 'aimagic'); ?></h2>
        
        <!-- Top Users Table -->
        <div class="table-container">
            <h3><?php _e('Top Users', 'aimagic'); ?></h3>
            <table class="wp-list-table widefat fixed striped">
                <thead>
                    <tr>
                        <th><?php _e('User', 'aimagic'); ?></th>
                        <th><?php _e('Requests', 'aimagic'); ?></th>
                        <th><?php _e('Success Rate', 'aimagic'); ?></th>
                        <th><?php _e('Usage Time', 'aimagic'); ?></th>
                    </tr>
                </thead>
                <tbody>
                    <?php foreach ($data['top_users'] as $user): ?>
                    <tr>
                        <td><?php echo esc_html($user['name']); ?></td>
                        <td><?php echo number_format_i18n($user['requests']); ?></td>
                        <td><?php echo number_format_i18n($user['success_rate'], 1); ?>%</td>
                        <td><?php echo esc_html($user['usage_time']); ?></td>
                    </tr>
                    <?php endforeach; ?>
                </tbody>
            </table>
        </div>

        <!-- Error Distribution -->
        <div class="table-container">
            <h3><?php _e('Error Distribution', 'aimagic'); ?></h3>
            <table class="wp-list-table widefat fixed striped">
                <thead>
                    <tr>
                        <th><?php _e('Error Type', 'aimagic'); ?></th>
                        <th><?php _e('Count', 'aimagic'); ?></th>
                        <th><?php _e('Percentage', 'aimagic'); ?></th>
                        <th><?php _e('Trend', 'aimagic'); ?></th>
                    </tr>
                </thead>
                <tbody>
                    <?php foreach ($data['error_distribution'] as $error): ?>
                    <tr>
                        <td><?php echo esc_html($error['type']); ?></td>
                        <td><?php echo number_format_i18n($error['count']); ?></td>
                        <td><?php echo number_format_i18n($error['percentage'], 1); ?>%</td>
                        <td>
                            <span class="trend <?php echo $error['trend'] >= 0 ? 'positive' : 'negative'; ?>">
                                <?php echo sprintf('%+d%%', $error['trend']); ?>
                            </span>
                        </td>
                    </tr>
                    <?php endforeach; ?>
                </tbody>
            </table>
        </div>
    </div>
</div>

<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
<script type="text/javascript">
jQuery(document).ready(function($) {
    // Handle date range selection
    $('#date-range').change(function() {
        $('.custom-date-range').toggle($(this).val() === 'custom');
    });

    // Initialize charts with data
    const chartData = <?php echo json_encode($data['charts']); ?>;
    
    // API Usage Chart
    const apiCtx = document.getElementById('apiUsageChart').getContext('2d');
    const apiChart = new Chart(apiCtx, {
        type: 'line',
        data: chartData.api_usage,
        options: {
            responsive: true,
            plugins: {
                legend: {
                    position: 'top',
                },
                title: {
                    display: true,
                    text: 'API Usage Over Time'
                }
            }
        }
    });

    // User Activity Chart
    const userCtx = document.getElementById('userActivityChart').getContext('2d');
    const userChart = new Chart(userCtx, {
        type: 'line',
        data: chartData.user_activity,
        options: {
            responsive: true,
            plugins: {
                legend: {
                    position: 'top',
                },
                title: {
                    display: true,
                    text: 'User Activity'
                }
            }
        }
    });

    // Resource Usage Chart
    const resourceCtx = document.getElementById('resourceUsageChart').getContext('2d');
    const resourceChart = new Chart(resourceCtx, {
        type: 'line',
        data: chartData.resource_usage,
        options: {
            responsive: true,
            plugins: {
                legend: {
                    position: 'top',
                },
                title: {
                    display: true,
                    text: 'Resource Usage'
                }
            }
        }
    });

    // Error Rate Chart
    const errorCtx = document.getElementById('errorRateChart').getContext('2d');
    const errorChart = new Chart(errorCtx, {
        type: 'line',
        data: chartData.error_rates,
        options: {
            responsive: true,
            plugins: {
                legend: {
                    position: 'top',
                },
                title: {
                    display: true,
                    text: 'Error Rates'
                }
            }
        }
    });

    // Handle chart filter changes
    $('.chart-filters select').change(function() {
        const chartId = $(this).attr('id').split('-')[0];
        const value = $(this).val();
        
        // Make AJAX call to get new data
        $.ajax({
            url: ajaxurl,
            data: {
                action: 'get_analytics_chart_data',
                chart: chartId,
                filter: value,
                range: '<?php echo esc_js($date_range); ?>',
                from: '<?php echo esc_js($custom_from); ?>',
                to: '<?php echo esc_js($custom_to); ?>',
                nonce: '<?php echo wp_create_nonce('get_analytics_chart_data'); ?>'
            },
            success: function(response) {
                if (response.success) {
                    updateChart(chartId, response.data);
                }
            }
        });
    });

    function updateChart(chartId, data) {
        switch(chartId) {
            case 'api':
                apiChart.data = data;
                apiChart.update();
                break;
            case 'user':
                userChart.data = data;
                userChart.update();
                break;
            case 'resource':
                resourceChart.data = data;
                resourceChart.update();
                break;
            case 'error':
                errorChart.data = data;
                errorChart.update();
                break;
        }
    }
});
</script>

<style>
.analytics-overview {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
    gap: 20px;
    margin-bottom: 30px;
}

.analytics-overview .card {
    background: white;
    padding: 20px;
    border-radius: 8px;
    box-shadow: 0 1px 3px rgba(0,0,0,0.1);
}

.analytics-overview .card h3 {
    margin: 0 0 10px 0;
    font-size: 14px;
    color: #666;
}

.analytics-overview .card .number {
    font-size: 24px;
    font-weight: bold;
    margin-bottom: 5px;
}

.analytics-overview .card .trend {
    font-size: 12px;
    font-weight: bold;
}

.trend.positive {
    color: #00a32a;
}

.trend.negative {
    color: #d63638;
}

.analytics-charts {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(400px, 1fr));
    gap: 20px;
    margin-bottom: 30px;
}

.chart-container {
    background: white;
    padding: 20px;
    border-radius: 8px;
    box-shadow: 0 1px 3px rgba(0,0,0,0.1);
}

.chart-container h3 {
    margin: 0 0 15px 0;
}

.chart-filters {
    margin-bottom: 15px;
}

.analytics-details {
    margin-top: 30px;
}

.table-container {
    background: white;
    padding: 20px;
    border-radius: 8px;
    box-shadow: 0 1px 3px rgba(0,0,0,0.1);
    margin-bottom: 20px;
}

.date-range-selector {
    margin-bottom: 20px;
    padding: 15px;
    background: white;
    border-radius: 8px;
    box-shadow: 0 1px 3px rgba(0,0,0,0.1);
}
</style>

目錄：/www/wwwroot/xart004.heatgroups.top/wp-content/plugins/ai_plateform_v2/files_2025/admin/views
檔名：admin-settings.php
==================================================
<?php
if (!defined('ABSPATH')) exit;

// Check current user capabilities
if (!current_user_can('manage_options')) {
    wp_die(__('You do not have sufficient permissions to access this page.'));
}

// Handle form submission
if ($_POST && check_admin_referer('aimagic_settings')) {
    $settings = [
        'api_keys' => [
            'openai' => sanitize_text_field($_POST['openai_api_key']),
            'google' => sanitize_text_field($_POST['google_api_key']),
            'azure' => sanitize_text_field($_POST['azure_api_key'])
        ],
        'endpoints' => [
            'openai' => esc_url_raw($_POST['openai_endpoint']),
            'google' => esc_url_raw($_POST['google_endpoint']),
            'azure' => esc_url_raw($_POST['azure_endpoint'])
        ],
        'limits' => [
            'max_tokens' => intval($_POST['max_tokens']),
            'max_requests' => intval($_POST['max_requests']),
            'max_storage' => intval($_POST['max_storage'])
        ],
        'defaults' => [
            'model' => sanitize_text_field($_POST['default_model']),
            'language' => sanitize_text_field($_POST['default_language']),
            'temperature' => floatval($_POST['temperature'])
        ],
        'security' => [
            'require_auth' => isset($_POST['require_auth']),
            'allowed_domains' => array_map('sanitize_text_field', explode("\n", $_POST['allowed_domains'])),
            'rate_limit' => intval($_POST['rate_limit'])
        ],
        'monitoring' => [
            'enable_logging' => isset($_POST['enable_logging']),
            'log_retention' => intval($_POST['log_retention']),
            'alert_threshold' => intval($_POST['alert_threshold']),
            'notify_email' => sanitize_email($_POST['notify_email'])
        ],
        'webhooks' => [
            'success_url' => esc_url_raw($_POST['success_webhook']),
            'error_url' => esc_url_raw($_POST['error_webhook']),
            'timeout' => intval($_POST['webhook_timeout'])
        ],
        'cache' => [
            'enable_cache' => isset($_POST['enable_cache']),
            'cache_duration' => intval($_POST['cache_duration']),
            'max_cache_size' => intval($_POST['max_cache_size'])
        ],
        'optimization' => [
            'batch_size' => intval($_POST['batch_size']),
            'parallel_requests' => intval($_POST['parallel_requests']),
            'retry_attempts' => intval($_POST['retry_attempts'])
        ]
    ];

    update_option('aimagic_settings', $settings);
    echo '<div class="updated"><p>' . __('Settings saved successfully.', 'aimagic') . '</p></div>';
}

// Get current settings
$settings = get_option('aimagic_settings', [
    'api_keys' => [],
    'endpoints' => [],
    'limits' => [],
    'defaults' => [],
    'security' => [],
    'monitoring' => [],
    'webhooks' => [],
    'cache' => [],
    'optimization' => []
]);
?>

<div class="wrap">
    <h1><?php _e('AI Magic Settings', 'aimagic'); ?></h1>

    <form method="post" action="">
        <?php wp_nonce_field('aimagic_settings'); ?>

        <div class="settings-container">
            <!-- API Configuration -->
            <div class="settings-section">
                <h2><?php _e('API Configuration', 'aimagic'); ?></h2>
                
                <h3><?php _e('OpenAI', 'aimagic'); ?></h3>
                <table class="form-table">
                    <tr>
                        <th scope="row">
                            <label for="openai_api_key"><?php _e('API Key', 'aimagic'); ?></label>
                        </th>
                        <td>
                            <input type="password" name="openai_api_key" id="openai_api_key" 
                                value="<?php echo esc_attr($settings['api_keys']['openai'] ?? ''); ?>" 
                                class="regular-text">
                            <button type="button" class="button toggle-password">
                                <?php _e('Show/Hide', 'aimagic'); ?>
                            </button>
                        </td>
                    </tr>
                    <tr>
                        <th scope="row">
                            <label for="openai_endpoint"><?php _e('Endpoint', 'aimagic'); ?></label>
                        </th>
                        <td>
                            <input type="url" name="openai_endpoint" id="openai_endpoint" 
                                value="<?php echo esc_url($settings['endpoints']['openai'] ?? 'https://api.openai.com/v1'); ?>" 
                                class="regular-text">
                        </td>
                    </tr>
                </table>

                <h3><?php _e('Google AI', 'aimagic'); ?></h3>
                <table class="form-table">
                    <tr>
                        <th scope="row">
                            <label for="google_api_key"><?php _e('API Key', 'aimagic'); ?></label>
                        </th>
                        <td>
                            <input type="password" name="google_api_key" id="google_api_key" 
                                value="<?php echo esc_attr($settings['api_keys']['google'] ?? ''); ?>" 
                                class="regular-text">
                            <button type="button" class="button toggle-password">
                                <?php _e('Show/Hide', 'aimagic'); ?>
                            </button>
                        </td>
                    </tr>
                    <tr>
                        <th scope="row">
                            <label for="google_endpoint"><?php _e('Endpoint', 'aimagic'); ?></label>
                        </th>
                        <td>
                            <input type="url" name="google_endpoint" id="google_endpoint" 
                                value="<?php echo esc_url($settings['endpoints']['google'] ?? 'https://generativelanguage.googleapis.com/v1'); ?>" 
                                class="regular-text">
                        </td>
                    </tr>
                </table>

                <h3><?php _e('Azure AI', 'aimagic'); ?></h3>
                <table class="form-table">
                    <tr>
                        <th scope="row">
                            <label for="azure_api_key"><?php _e('API Key', 'aimagic'); ?></label>
                        </th>
                        <td>
                            <input type="password" name="azure_api_key" id="azure_api_key" 
                                value="<?php echo esc_attr($settings['api_keys']['azure'] ?? ''); ?>" 
                                class="regular-text">
                            <button type="button" class="button toggle-password">
                                <?php _e('Show/Hide', 'aimagic'); ?>
                            </button>
                        </td>
                    </tr>
                    <tr>
                        <th scope="row">
                            <label for="azure_endpoint"><?php _e('Endpoint', 'aimagic'); ?></label>
                        </th>
                        <td>
                            <input type="url" name="azure_endpoint" id="azure_endpoint" 
                                value="<?php echo esc_url($settings['endpoints']['azure'] ?? ''); ?>" 
                                class="regular-text">
                        </td>
                    </tr>
                </table>
            </div>

            <!-- Usage Limits -->
            <div class="settings-section">
                <h2><?php _e('Usage Limits', 'aimagic'); ?></h2>
                <table class="form-table">
                    <tr>
                        <th scope="row">
                            <label for="max_tokens"><?php _e('Max Tokens per Request', 'aimagic'); ?></label>
                        </th>
                        <td>
                            <input type="number" name="max_tokens" id="max_tokens" 
                                value="<?php echo intval($settings['limits']['max_tokens'] ?? 2048); ?>" 
                                class="small-text" min="1" max="32768">
                            <p class="description">
                                <?php _e('Maximum number of tokens allowed per API request', 'aimagic'); ?>
                            </p>
                        </td>
                    </tr>
                    <tr>
                        <th scope="row">
                            <label for="max_requests"><?php _e('Max Requests per Hour', 'aimagic'); ?></label>
                        </th>
                        <td>
                            <input type="number" name="max_requests" id="max_requests" 
                                value="<?php echo intval($settings['limits']['max_requests'] ?? 1000); ?>" 
                                class="small-text" min="1">
                            <p class="description">
                                <?php _e('Maximum number of API requests allowed per hour', 'aimagic'); ?>
                            </p>
                        </td>
                    </tr>
                    <tr>
                        <th scope="row">
                            <label for="max_storage"><?php _e('Max Storage (MB)', 'aimagic'); ?></label>
                        </th>
                        <td>
                            <input type="number" name="max_storage" id="max_storage" 
                                value="<?php echo intval($settings['limits']['max_storage'] ?? 1000); ?>" 
                                class="small-text" min="1">
                            <p class="description">
                                <?php _e('Maximum storage space allowed for generated content', 'aimagic'); ?>
                            </p>
                        </td>
                    </tr>
                </table>
            </div>

            <!-- Default Settings -->
            <div class="settings-section">
                <h2><?php _e('Default Settings', 'aimagic'); ?></h2>
                <table class="form-table">
                    <tr>
                        <th scope="row">
                            <label for="default_model"><?php _e('Default Model', 'aimagic'); ?></label>
                        </th>
                        <td>
                            <select name="default_model" id="default_model">
                                <option value="gpt-4" <?php selected($settings['defaults']['model'] ?? '', 'gpt-4'); ?>>
                                    GPT-4
                                </option>
                                <option value="gpt-3.5-turbo" <?php selected($settings['defaults']['model'] ?? '', 'gpt-3.5-turbo'); ?>>
                                    GPT-3.5 Turbo
                                </option>
                                <option value="gemini-pro" <?php selected($settings['defaults']['model'] ?? '', 'gemini-pro'); ?>>
                                    Gemini Pro
                                </option>
                            </select>
                        </td>
                    </tr>
                    <tr>
                        <th scope="row">
                            <label for="default_language"><?php _e('Default Language', 'aimagic'); ?></label>
                        </th>
                        <td>
                            <select name="default_language" id="default_language">
                                <option value="en" <?php selected($settings['defaults']['language'] ?? '', 'en'); ?>>
                                    English
                                </option>
                                <option value="es" <?php selected($settings['defaults']['language'] ?? '', 'es'); ?>>
                                    Español
                                </option>
                                <option value="fr" <?php selected($settings['defaults']['language'] ?? '', 'fr'); ?>>
                                    Français
                                </option>
                                <option value="de" <?php selected($settings['defaults']['language'] ?? '', 'de'); ?>>
                                    Deutsch
                                </option>
                            </select>
                        </td>
                    </tr>
                    <tr>
                        <th scope="row">
                            <label for="temperature"><?php _e('Temperature', 'aimagic'); ?></label>
                        </th>
                        <td>
                            <input type="range" name="temperature" id="temperature" 
                                value="<?php echo floatval($settings['defaults']['temperature'] ?? 0.7); ?>" 
                                min="0" max="2" step="0.1">
                            <span id="temperature-value"></span>
                            <p class="description">
                                <?php _e('Controls randomness in the output (0 = deterministic, 2 = most random)', 'aimagic'); ?>
                            </p>
                        </td>
                    </tr>
                </table>
            </div>

            <!-- Security Settings -->
            <div class="settings-section">
                <h2><?php _e('Security Settings', 'aimagic'); ?></h2>
                <table class="form-table">
                    <tr>
                        <th scope="row"><?php _e('Authentication', 'aimagic'); ?></th>
                        <td>
                            <label>
                                <input type="checkbox" name="require_auth" value="1" 
                                    <?php checked($settings['security']['require_auth'] ?? true); ?>>
                                <?php _e('Require authentication for API requests', 'aimagic'); ?>
                            </label>
                        </td>
                    </tr>
                    <tr>
                        <th scope="row">
                            <label for="allowed_domains"><?php _e('Allowed Domains', 'aimagic'); ?></label>
                        </th>
                        <td>
                            <textarea name="allowed_domains" id="allowed_domains" rows="5" class="large-text code"><?php 
                                echo esc_textarea(implode("\n", $settings['security']['allowed_domains'] ?? [])); 
                            ?></textarea>
                            <p class="description">
                                <?php _e('One domain per line. Leave empty to allow all domains.', 'aimagic'); ?>
                            </p>
                        </td>
                    </tr>
                    <tr>
                        <th scope="row">
                            <label for="rate_limit"><?php _e('Rate Limit', 'aimagic'); ?></label>
                        </th>
                        <td>
                            <input type="number" name="rate_limit" id="rate_limit" 
                                value="<?php echo intval($settings['security']['rate_limit'] ?? 60); ?>" 
                                class="small-text" min="1">
                            <p class="description">
                                <?php _e('Maximum requests per minute per IP address', 'aimagic'); ?>
                            </p>
                        </td>
                    </tr>
                </table>
            </div>

            <!-- Monitoring -->
            <div class="settings-section">
                <h2><?php _e('Monitoring', 'aimagic'); ?></h2>
                <table class="form-table">
                    <tr>
                        <th scope="row"><?php _e('Logging', 'aimagic'); ?></th>
                        <td>
                            <label>
                                <input type="checkbox" name="enable_logging" value="1" 
                                    <?php checked($settings['monitoring']['enable_logging'] ?? true); ?>>
                                <?php _e('Enable detailed logging', 'aimagic'); ?>
                            </label>
                        </td>
                    </tr>
                    <tr>
                        <th scope="row">
                            <label for="log_retention"><?php _e('Log Retention (days)', 'aimagic'); ?></label>
                        </th>
                        <td>
                            <input type="number" name="log_retention" id="log_retention" 
                                value="<?php echo intval($settings['monitoring']['log_retention'] ?? 30); ?>" 
                                class="small-text" min="1">
                        </td>
                    </tr>
                    <tr>
                        <th scope="row">
                            <label for="alert_threshold"><?php _e('Error Alert Threshold', 'aimagic'); ?></label>
                        </th>
                        <td>
                            <input type="number" name="alert_threshold" id="alert_threshold" 
                                value="<?php echo intval($settings['monitoring']['alert_threshold'] ?? 10); ?>" 
                                class="small-text" min="1">
                            <p class="description">
                                <?php _e('Number of errors before sending an alert', 'aimagic'); ?>
                            </p>
                        </td>
                    </tr>
                    <tr>
                        <th scope="row">
                            <label for="notify_email"><?php _e('Notification Email', 'aimagic'); ?></label>
                        </th>
                        <td>
                            <input type="email" name="notify_email" id="notify_email" 
                                value="<?php echo esc_attr($settings['monitoring']['notify_email'] ?? get_option('admin_email')); ?>" 
                                class="regular-text">
                        </td>
                    </tr>
                </table>
            </div>

            <!-- Webhooks -->
            <div class="settings-section">
                <h2><?php _e('Webhooks', 'aimagic'); ?></h2>
                <table class="form-table">
                    <tr>
                        <th scope="row">
                            <label for="success_webhook"><?php _e('Success Webhook', 'aimagic'); ?></label>
                        </th>
                        <td>
                            <input type="url" name="success_webhook" id="success_webhook" 
                                value="<?php echo esc_url($settings['webhooks']['success_url'] ?? ''); ?>" 
                                class="regular-text">
                            <p class="description">
                                <?php _e('URL to notify on successful content generation', 'aimagic'); ?>
                            </p>
                        </td>
                    </tr>
                    <tr>
                        <th scope="row">
                            <label for="error_webhook"><?php _e('Error Webhook', 'aimagic'); ?></label>
                        </th>
                        <td>
                            <input type="url" name="error_webhook" id="error_webhook" 
                                value="<?php echo esc_url($settings['webhooks']['error_url'] ?? ''); ?>" 
                                class="regular-text">
                            <p class="description">
                                <?php _e('URL to notify on content generation errors', 'aimagic'); ?>
                            </p>
                        </td>
                    </tr>
                    <tr>
                        <th scope="row">
                            <label for="webhook_timeout"><?php _e('Webhook Timeout', 'aimagic'); ?></label>
                        </th>
                        <td>
                            <input type="number" name="webhook_timeout" id="webhook_timeout" 
                                value="<?php echo intval($settings['webhooks']['timeout'] ?? 5); ?>" 
                                class="small-text" min="1">
                            <p class="description">
                                <?php _e('Webhook timeout in seconds', 'aimagic'); ?>
                            </p>
                        </td>
                    </tr>
                </table>
            </div>

            <!-- Cache Settings -->
            <div class="settings-section">
                <h2><?php _e('Cache Settings', 'aimagic'); ?></h2>
                <table class="form-table">
                    <tr>
                        <th scope="row"><?php _e('Content Cache', 'aimagic'); ?></th>
                        <td>
                            <label>
                                <input type="checkbox" name="enable_cache" value="1" 
                                    <?php checked($settings['cache']['enable_cache'] ?? true); ?>>
                                <?php _e('Enable content caching', 'aimagic'); ?>
                            </label>
                        </td>
                    </tr>
                    <tr>
                        <th scope="row">
                            <label for="cache_duration"><?php _e('Cache Duration (minutes)', 'aimagic'); ?></label>
                        </th>
                        <td>
                            <input type="number" name="cache_duration" id="cache_duration" 
                                value="<?php echo intval($settings['cache']['cache_duration'] ?? 60); ?>" 
                                class="small-text" min="1">
                        </td>
                    </tr>
                    <tr>
                        <th scope="row">
                            <label for="max_cache_size"><?php _e('Max Cache Size (MB)', 'aimagic'); ?></label>
                        </th>
                        <td>
                            <input type="number" name="max_cache_size" id="max_cache_size" 
                                value="<?php echo intval($settings['cache']['max_cache_size'] ?? 100); ?>" 
                                class="small-text" min="1">
                        </td>
                    </tr>
                </table>
            </div>

            <!-- Optimization -->
            <div class="settings-section">
                <h2><?php _e('Optimization', 'aimagic'); ?></h2>
                <table class="form-table">
                    <tr>
                        <th scope="row">
                            <label for="batch_size"><?php _e('Batch Size', 'aimagic'); ?></label>
                        </th>
                        <td>
                            <input type="number" name="batch_size" id="batch_size" 
                                value="<?php echo intval($settings['optimization']['batch_size'] ?? 10); ?>" 
                                class="small-text" min="1">
                            <p class="description">
                                <?php _e('Number of items to process in a batch', 'aimagic'); ?>
                            </p>
                        </td>
                    </tr>
                    <tr>
                        <th scope="row">
                            <label for="parallel_requests"><?php _e('Parallel Requests', 'aimagic'); ?></label>
                        </th>
                        <td>
                            <input type="number" name="parallel_requests" id="parallel_requests" 
                                value="<?php echo intval($settings['optimization']['parallel_requests'] ?? 5); ?>" 
                                class="small-text" min="1">
                            <p class="description">
                                <?php _e('Maximum number of concurrent API requests', 'aimagic'); ?>
                            </p>
                        </td>
                    </tr>
                    <tr>
                        <th scope="row">
                            <label for="retry_attempts"><?php _e('Retry Attempts', 'aimagic'); ?></label>
                        </th>
                        <td>
                            <input type="number" name="retry_attempts" id="retry_attempts" 
                                value="<?php echo intval($settings['optimization']['retry_attempts'] ?? 3); ?>" 
                                class="small-text" min="0">
                            <p class="description">
                                <?php _e('Number of retry attempts for failed requests', 'aimagic'); ?>
                            </p>
                        </td>
                    </tr>
                </table>
            </div>
        </div>

        <?php submit_button(__('Save Settings', 'aimagic')); ?>
    </form>
</div>

<style>
.settings-container {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(400px, 1fr));
    gap: 20px;
    margin: 20px 0;
}

.settings-section {
    background: #fff;
    padding: 20px;
    border-radius: 8px;
    box-shadow: 0 1px 3px rgba(0,0,0,0.1);
}

.settings-section h2 {
    margin-top: 0;
    padding-bottom: 10px;
    border-bottom: 1px solid #eee;
}

.settings-section h3 {
    margin: 20px 0 10px;
    padding-bottom: 5px;
    border-bottom: 1px solid #eee;
}

.form-table th {
    width: 200px;
}

.form-table td {
    position: relative;
}

.toggle-password {
    margin-left: 10px;
}

#temperature {
    vertical-align: middle;
    width: 200px;
}

#temperature-value {
    margin-left: 10px;
    font-weight: bold;
}

.description {
    margin-top: 5px;
}
</style>

<script type="text/javascript">
jQuery(document).ready(function($) {
    // Handle password visibility toggle
    $('.toggle-password').click(function() {
        var $input = $(this).prev('input');
        var type = $input.attr('type') === 'password' ? 'text' : 'password';
        $input.attr('type', type);
    });

    // Handle temperature slider
    var $temperature = $('#temperature');
    var $temperatureValue = $('#temperature-value');
    
    function updateTemperature() {
        $temperatureValue.text($temperature.val());
    }
    
    $temperature.on('input', updateTemperature);
    updateTemperature();

    // Handle form submission
    $('form').submit(function() {
        var confirmed = true;
        
        // Check if API keys are empty
        $('.settings-section input[type="password"]').each(function() {
            if (!$(this).val() && !confirmed) {
                confirmed = confirm('<?php _e('Some API keys are empty. Continue anyway?', 'aimagic'); ?>');
                return false;
            }
        });

        return confirmed;
    });

    // Test API connections
    function testApiConnection(provider) {
        var $button = $('#test-' + provider);
        var $status = $('#' + provider + '-status');
        
        $button.prop('disabled', true).text('Testing...');
        $status.html('');

        $.ajax({
            url: ajaxurl,
            method: 'POST',
            data: {
                action: 'test_api_connection',
                provider: provider,
                api_key: $('#' + provider + '_api_key').val(),
                endpoint: $('#' + provider + '_endpoint').val(),
                nonce: '<?php echo wp_create_nonce('test_api_connection'); ?>'
            },
            success: function(response) {
                if (response.success) {
                    $status.html('<span class="success">✓ Connected</span>');
                } else {
                    $status.html('<span class="error">✗ ' + response.data + '</span>');
                }
            },
            error: function() {
                $status.html('<span class="error">✗ Connection failed</span>');
            },
            complete: function() {
                $button.prop('disabled', false).text('Test Connection');
            }
        });
    }

    // Add test buttons for each provider
    $('.settings-section h3').each(function() {
        var provider = $(this).text().toLowerCase().replace(' ai', '');
        $(this).after(
            '<button type="button" class="button" id="test-' + provider + '">Test Connection</button>' +
            '<span id="' + provider + '-status" style="margin-left: 10px;"></span>'
        );
        
        $('#test-' + provider).click(function() {
            testApiConnection(provider);
        });
    });
});
</script>

目錄：/www/wwwroot/xart004.heatgroups.top/wp-content/plugins/ai_plateform_v2/files_2025/admin/views
檔名：admin-payments.php
==================================================
<?php
if (!defined('ABSPATH')) exit;

// Check current user capabilities
if (!current_user_can('manage_options')) {
    wp_die(__('You do not have sufficient permissions to access this page.'));
}

// Load the Payments List Table class
require_once AIMAGIC_PLUGIN_DIR . 'includes/admin/class-admin-payments-list.php';

// Create an instance of our list table
$payments_list_table = new AIMagic\Admin\Payments_List_Table();
$payments_list_table->prepare_items();
?>

<div class="wrap">
    <h1 class="wp-heading-inline"><?php _e('Payments', 'aimagic'); ?></h1>
    <a href="<?php echo admin_url('admin.php?page=aimagic-payments&action=add'); ?>" class="page-title-action">
        <?php _e('Add Manual Payment', 'aimagic'); ?>
    </a>
    <hr class="wp-header-end">

    <!-- Dashboard Cards -->
    <div class="aimagic-dashboard-cards">
        <?php
        global $wpdb;
        
        // Get payment statistics
        $stats = $wpdb->get_row("
            SELECT 
                COUNT(*) as total_transactions,
                SUM(CASE WHEN status = 'completed' THEN amount ELSE 0 END) as total_revenue,
                SUM(CASE WHEN status = 'pending' THEN amount ELSE 0 END) as pending_amount,
                COUNT(CASE WHEN created_at >= DATE_SUB(NOW(), INTERVAL 30 DAY) THEN 1 END) as monthly_transactions
            FROM {$wpdb->prefix}aimagic_payments
        ");
        ?>
        <div class="card">
            <h3><?php _e('Total Revenue', 'aimagic'); ?></h3>
            <p class="amount"><?php echo number_format_i18n($stats->total_revenue, 2); ?></p>
        </div>
        <div class="card">
            <h3><?php _e('Pending Amount', 'aimagic'); ?></h3>
            <p class="amount"><?php echo number_format_i18n($stats->pending_amount, 2); ?></p>
        </div>
        <div class="card">
            <h3><?php _e('Monthly Transactions', 'aimagic'); ?></h3>
            <p class="number"><?php echo number_format_i18n($stats->monthly_transactions); ?></p>
        </div>
        <div class="card">
            <h3><?php _e('Total Transactions', 'aimagic'); ?></h3>
            <p class="number"><?php echo number_format_i18n($stats->total_transactions); ?></p>
        </div>
    </div>

    <!-- Filters -->
    <form method="post">
        <div class="tablenav top">
            <div class="alignleft actions">
                <select name="status" id="filter-by-status">
                    <option value=""><?php _e('All Statuses', 'aimagic'); ?></option>
                    <option value="completed"><?php _e('Completed', 'aimagic'); ?></option>
                    <option value="pending"><?php _e('Pending', 'aimagic'); ?></option>
                    <option value="failed"><?php _e('Failed', 'aimagic'); ?></option>
                    <option value="refunded"><?php _e('Refunded', 'aimagic'); ?></option>
                </select>
                <select name="payment_method" id="filter-by-method">
                    <option value=""><?php _e('All Methods', 'aimagic'); ?></option>
                    <option value="credit_card"><?php _e('Credit Card', 'aimagic'); ?></option>
                    <option value="paypal"><?php _e('PayPal', 'aimagic'); ?></option>
                    <option value="bank_transfer"><?php _e('Bank Transfer', 'aimagic'); ?></option>
                    <option value="manual"><?php _e('Manual', 'aimagic'); ?></option>
                </select>
                <input type="date" name="date_from" id="filter-date-from" placeholder="<?php _e('From Date', 'aimagic'); ?>">
                <input type="date" name="date_to" id="filter-date-to" placeholder="<?php _e('To Date', 'aimagic'); ?>">
                <?php submit_button(__('Filter', 'aimagic'), 'action', 'filter_action', false); ?>
                <?php submit_button(__('Export CSV', 'aimagic'), 'secondary', 'export_csv', false); ?>
            </div>
        </div>

        <?php
        // Display search box and table
        $payments_list_table->search_box('Search Payments', 'search_payments');
        $payments_list_table->display();
        ?>
    </form>
</div>

<script type="text/javascript">
jQuery(document).ready(function($) {
    // Handle date range validation
    $('#filter-date-from, #filter-date-to').change(function() {
        var fromDate = $('#filter-date-from').val();
        var toDate = $('#filter-date-to').val();
        
        if (fromDate && toDate && fromDate > toDate) {
            alert('<?php _e('From date cannot be later than To date', 'aimagic'); ?>');
            $(this).val('');
        }
    });

    // Handle export CSV
    $('#export_csv').click(function(e) {
        e.preventDefault();
        var queryParams = {
            action: 'export_payments_csv',
            status: $('#filter-by-status').val(),
            payment_method: $('#filter-by-method').val(),
            date_from: $('#filter-date-from').val(),
            date_to: $('#filter-date-to').val(),
            search: $('#search_payments').val(),
            nonce: '<?php echo wp_create_nonce('export_payments_csv'); ?>'
        };
        
        window.location.href = ajaxurl + '?' + $.param(queryParams);
    });

    // Initialize datepicker for date filters
    $('.datepicker').datepicker({
        dateFormat: 'yy-mm-dd',
        maxDate: '0'
    });

    // Real-time amount formatting
    function formatAmount(input) {
        var value = input.value.replace(/[^\d.]/g, '');
        var parts = value.split('.');
        parts[0] = parts[0].replace(/\B(?=(\d{3})+(?!\d))/g, ',');
        if (parts.length > 1) {
            parts[1] = parts[1].substring(0, 2);
        }
        input.value = parts.join('.');
    }

    $('input.amount').on('input', function() {
        formatAmount(this);
    });
});
</script>

<style>
.aimagic-dashboard-cards {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
    gap: 20px;
    margin-bottom: 20px;
}

.aimagic-dashboard-cards .card {
    background: #fff;
    padding: 20px;
    border-radius: 8px;
    box-shadow: 0 1px 3px rgba(0,0,0,0.1);
}

.aimagic-dashboard-cards .card h3 {
    margin: 0 0 10px 0;
    font-size: 14px;
    color: #666;
}

.aimagic-dashboard-cards .card .amount {
    font-size: 24px;
    font-weight: bold;
    margin: 0;
    color: #2271b1;
}

.aimagic-dashboard-cards .card .number {
    font-size: 24px;
    font-weight: bold;
    margin: 0;
    color: #1d2327;
}

.status-completed {
    color: #00a32a;
}

.status-pending {
    color: #dba617;
}

.status-failed {
    color: #d63638;
}

.status-refunded {
    color: #4f94d4;
}

.column-amount {
    text-align: right;
}

.payment-method-icon {
    vertical-align: middle;
    margin-right: 5px;
}

.datepicker {
    width: 100px;
}
</style>

目錄：/www/wwwroot/xart004.heatgroups.top/wp-content/plugins/ai_plateform_v2/files_2025/admin/js
檔名：admin.js
==================================================
/**
 * AI Magic Publisher Admin JavaScript
 * Version: 1.0.0
 * Current User: aimastera069
 * Last Updated: 2025-03-26 18:37:55 UTC
 */

(function($) {
    'use strict';

    // Main admin class
    class AIMagicAdmin {
        constructor() {
            this.currentUser = 'aimastera069';
            this.lastUpdate = '2025-03-26 18:37:55';
            
            this.initializeComponents();
            this.setupEventListeners();
            this.initializePolling();
        }

        initializeComponents() {
            this.taskManager = new TaskManager();
            this.userManager = new UserManager();
            this.tenantManager = new TenantManager();
            this.settingsManager = new SettingsManager();
            this.uiComponents = new UIComponents();
        }

        setupEventListeners() {
            // Global event listeners
            $(document).on('aimagic:taskUpdated', this.handleTaskUpdate.bind(this));
            $(document).on('aimagic:userUpdated', this.handleUserUpdate.bind(this));
            $(document).on('aimagic:tenantUpdated', this.handleTenantUpdate.bind(this));
            
            // Error handling
            window.onerror = this.handleGlobalError.bind(this);
        }

        initializePolling() {
            // Poll for updates every 30 seconds
            setInterval(() => {
                this.taskManager.pollForUpdates();
            }, 30000);
        }

        handleGlobalError(msg, url, line, col, error) {
            this.uiComponents.showToast({
                message: 'An error occurred: ' + msg,
                type: 'error',
                duration: 5000
            });
            console.error('AI Magic Publisher Error:', { msg, url, line, col, error });
        }

        handleTaskUpdate(event, data) {
            this.uiComponents.updateDashboardStats();
            this.taskManager.refreshTaskList();
        }

        handleUserUpdate(event, data) {
            this.uiComponents.updateDashboardStats();
            this.userManager.refreshUserList();
        }

        handleTenantUpdate(event, data) {
            this.uiComponents.updateDashboardStats();
            this.tenantManager.refreshTenantList();
        }
    }

    // Task Management
    class TaskManager {
        constructor() {
            this.initializeTaskComponents();
        }

        initializeTaskComponents() {
            // Task list functionality
            $('.aimagic-task-list').each((index, element) => {
                this.initializeTaskList($(element));
            });

            // Task actions
            $('.retry-task').on('click', this.handleTaskRetry.bind(this));
            $('.delete-task').on('click', this.handleTaskDelete.bind(this));
            $('.view-task-details').on('click', this.handleTaskView.bind(this));
        }

        async handleTaskRetry(event) {
            event.preventDefault();
            const taskId = $(event.currentTarget).data('task-id');
            
            try {
                await this.retryTask(taskId);
                this.refreshTaskList();
                UIComponents.showToast({
                    message: 'Task retry initiated successfully',
                    type: 'success'
                });
            } catch (error) {
                UIComponents.showToast({
                    message: 'Failed to retry task: ' + error.message,
                    type: 'error'
                });
            }
        }

        async retryTask(taskId) {
            const response = await $.ajax({
                url: ajaxurl,
                method: 'POST',
                data: {
                    action: 'aimagic_retry_task',
                    task_id: taskId,
                    nonce: aimagic_data.nonce
                }
            });

            if (!response.success) {
                throw new Error(response.data.message);
            }

            return response.data;
        }

        pollForUpdates() {
            $.ajax({
                url: ajaxurl,
                method: 'GET',
                data: {
                    action: 'aimagic_get_task_updates',
                    last_update: this.lastUpdate,
                    nonce: aimagic_data.nonce
                },
                success: (response) => {
                    if (response.success && response.data.updates) {
                        this.handleTaskUpdates(response.data.updates);
                    }
                }
            });
        }

        handleTaskUpdates(updates) {
            updates.forEach(update => {
                $(document).trigger('aimagic:taskUpdated', [update]);
                this.updateTaskInList(update);
            });
        }

        updateTaskInList(taskData) {
            const $row = $(`#task-${taskData.id}`);
            if ($row.length) {
                $row.find('.column-status').html(this.getStatusBadgeHtml(taskData.status));
                $row.find('.column-updated_at').text(taskData.updated_at);
            }
        }

        getStatusBadgeHtml(status) {
            const statusClasses = {
                pending: 'status-pending',
                processing: 'status-processing',
                completed: 'status-completed',
                failed: 'status-failed'
            };

            return `<span class="status-badge ${statusClasses[status] || ''}">${status}</span>`;
        }
    }

    // User Management
    class UserManager {
        constructor() {
            this.initializeUserComponents();
        }

        initializeUserComponents() {
            $('.reset-quota').on('click', this.handleQuotaReset.bind(this));
            $('.delete-user').on('click', this.handleUserDelete.bind(this));
            $('#add-new-user').on('click', this.handleNewUser.bind(this));
        }

        async handleQuotaReset(event) {
            event.preventDefault();
            const userId = $(event.currentTarget).data('user-id');

            if (!confirm('Are you sure you want to reset this user\'s quota?')) {
                return;
            }

            try {
                await this.resetUserQuota(userId);
                UIComponents.showToast({
                    message: 'User quota reset successfully',
                    type: 'success'
                });
                this.refreshUserList();
            } catch (error) {
                UIComponents.showToast({
                    message: 'Failed to reset quota: ' + error.message,
                    type: 'error'
                });
            }
        }

        async resetUserQuota(userId) {
            const response = await $.ajax({
                url: ajaxurl,
                method: 'POST',
                data: {
                    action: 'aimagic_reset_user_quota',
                    user_id: userId,
                    nonce: aimagic_data.nonce
                }
            });

            if (!response.success) {
                throw new Error(response.data.message);
            }

            return response.data;
        }
    }

    // Tenant Management
    class TenantManager {
        constructor() {
            this.initializeTenantComponents();
        }

        initializeTenantComponents() {
            $('.toggle-tenant-status').on('click', this.handleStatusToggle.bind(this));
            $('.copy-api-key').on('click', this.handleApiKeyCopy.bind(this));
            $('#add-new-tenant').on('click', this.handleNewTenant.bind(this));
        }

        async handleStatusToggle(event) {
            event.preventDefault();
            const tenantId = $(event.currentTarget).data('tenant-id');
            const newStatus = $(event.currentTarget).data('new-status');

            try {
                await this.updateTenantStatus(tenantId, newStatus);
                UIComponents.showToast({
                    message: 'Tenant status updated successfully',
                    type: 'success'
                });
                this.refreshTenantList();
            } catch (error) {
                UIComponents.showToast({
                    message: 'Failed to update status: ' + error.message,
                    type: 'error'
                });
            }
        }

        async handleApiKeyCopy(event) {
            event.preventDefault();
            const apiKey = $(event.currentTarget).data('api-key');
            
            try {
                await navigator.clipboard.writeText(apiKey);
                UIComponents.showToast({
                    message: 'API key copied to clipboard',
                    type: 'success'
                });
            } catch (error) {
                UIComponents.showToast({
                    message: 'Failed to copy API key',
                    type: 'error'
                });
            }
        }
    }

    // Settings Management
    class SettingsManager {
        constructor() {
            this.initializeSettingsComponents();
        }

        initializeSettingsComponents() {
            this.setupApiKeyValidation();
            this.setupWebhookUrlCopy();
            this.setupSettingsValidation();
        }

        setupApiKeyValidation() {
            $('#aimagic_gpt4_api_key').on('change', async (event) => {
                const apiKey = $(event.currentTarget).val();
                if (apiKey) {
                    await this.validateApiKey(apiKey);
                }
            });
        }

        async validateApiKey(apiKey) {
            try {
                const response = await $.ajax({
                    url: ajaxurl,
                    method: 'POST',
                    data: {
                        action: 'aimagic_validate_api_key',
                        api_key: apiKey,
                        nonce: aimagic_data.nonce
                    }
                });

                if (response.success) {
                    UIComponents.showToast({
                        message: 'API key validated successfully',
                        type: 'success'
                    });
                } else {
                    UIComponents.showToast({
                        message: 'Invalid API key',
                        type: 'error'
                    });
                }
            } catch (error) {
                UIComponents.showToast({
                    message: 'Failed to validate API key',
                    type: 'error'
                });
            }
        }
    }

    // UI Components
    class UIComponents {
        static showToast({ message, type = 'info', duration = 3000 }) {
            const toast = $(`
                <div class="aimagic-toast aimagic-toast-${type}">
                    ${message}
                </div>
            `).appendTo('body');

            setTimeout(() => {
                toast.fadeOut(300, function() {
                    $(this).remove();
                });
            }, duration);
        }

        static showModal(content) {
            const modal = $(`
                <div class="task-details-modal-backdrop"></div>
                <div class="task-details-modal">
                    <div class="modal-header">
                        <h2>${content.title}</h2>
                        <button class="close-modal">&times;</button>
                    </div>
                    <div class="modal-content">
                        ${content.body}
                    </div>
                    <div class="modal-footer">
                        ${content.footer || ''}
                    </div>
                </div>
            `).appendTo('body');

            $('.close-modal').on('click', () => {
                modal.fadeOut(300, function() {
                    $(this).remove();
                });
            });
        }

        updateDashboardStats() {
            $.ajax({
                url: ajaxurl,
                method: 'GET',
                data: {
                    action: 'aimagic_get_dashboard_stats',
                    nonce: aimagic_data.nonce
                },
                success: (response) => {
                    if (response.success) {
                        this.renderDashboardStats(response.data);
                    }
                }
            });
        }

        renderDashboardStats(stats) {
            Object.entries(stats).forEach(([key, value]) => {
                $(`#stat-${key}`).text(value);
            });
        }
    }

    // Initialize admin functionality when document is ready
    $(document).ready(() => {
        window.aimagicAdmin = new AIMagicAdmin();
    });

})(jQuery);

目錄：/www/wwwroot/xart004.heatgroups.top/wp-content/plugins/ai_plateform_v2/files_2025/includes/Admin
檔名：class-admin-nodes-list.php
==================================================
<?php
namespace AIMagic\Admin;

if (!defined('ABSPATH')) exit;

if (!class_exists('WP_List_Table')) {
    require_once(ABSPATH . 'wp-admin/includes/class-wp-list-table.php');
}

class Nodes_List_Table extends \WP_List_Table {
    public function __construct() {
        parent::__construct([
            'singular' => 'node',
            'plural'   => 'nodes',
            'ajax'     => true
        ]);
    }

    public function get_columns() {
        return [
            'cb'              => '<input type="checkbox" />',
            'node_id'         => __('Node ID', 'aimagic'),
            'node_type'       => __('Type', 'aimagic'),
            'status'          => __('Status', 'aimagic'),
            'last_heartbeat'  => __('Last Heartbeat', 'aimagic'),
            'tasks_completed' => __('Tasks Completed', 'aimagic'),
            'avg_processing'  => __('Avg. Processing Time', 'aimagic'),
            'registered_at'   => __('Registered', 'aimagic'),
            'actions'         => __('Actions', 'aimagic')
        ];
    }

    public function prepare_items() {
        global $wpdb;

        $per_page = 20;
        $current_page = $this->get_pagenum();
        $total_items = $wpdb->get_var("SELECT COUNT(*) FROM {$wpdb->prefix}ai_nodes");

        $this->set_pagination_args([
            'total_items' => $total_items,
            'per_page'    => $per_page
        ]);

        $this->items = $wpdb->get_results($wpdb->prepare(
            "SELECT n.*, 
                    COUNT(t.id) as tasks_completed,
                    AVG(t.processing_time) as avg_processing_time
             FROM {$wpdb->prefix}ai_nodes n
             LEFT JOIN {$wpdb->prefix}ai_tasks t ON n.node_id = t.node_id
             GROUP BY n.node_id
             ORDER BY n.registered_at DESC
             LIMIT %d OFFSET %d",
            $per_page,
            ($current_page - 1) * $per_page
        ));
    }

    public function column_default($item, $column_name) {
        switch ($column_name) {
            case 'node_id':
                return '#' . $item->node_id;
            case 'node_type':
                return $this->get_node_type_label($item->node_type);
            case 'status':
                return $this->get_status_html($item);
            case 'last_heartbeat':
                return $this->format_heartbeat_time($item->last_heartbeat);
            case 'tasks_completed':
                return number_format($item->tasks_completed);
            case 'avg_processing':
                return $item->avg_processing_time ? 
                    round($item->avg_processing_time, 2) . 's' : 
                    '-';
            case 'registered_at':
                return wp_date('Y-m-d H:i:s', strtotime($item->registered_at));
            case 'actions':
                return $this->get_row_actions($item);
            default:
                return print_r($item, true);
        }
    }

    private function get_node_type_label($type) {
        $labels = [
            'text_node'  => '<span class="node-type text">Text</span>',
            'image_node' => '<span class="node-type image">Image</span>',
            'video_node' => '<span class="node-type video">Video</span>'
        ];
        return isset($labels[$type]) ? $labels[$type] : ucfirst($type);
    }

    private function get_status_html($item) {
        $current_time = current_time('timestamp');
        $last_heartbeat = strtotime($item->last_heartbeat);
        $diff = $current_time - $last_heartbeat;

        if ($diff > 300) { // 5 minutes
            return '<span class="status-offline">Offline</span>';
        } elseif ($diff > 60) { // 1 minute
            return '<span class="status-warning">Warning</span>';
        } else {
            return '<span class="status-active">Active</span>';
        }
    }

    private function format_heartbeat_time($timestamp) {
        $current_time = current_time('timestamp');
        $heartbeat_time = strtotime($timestamp);
        $diff = $current_time - $heartbeat_time;

        if ($diff < 60) {
            return sprintf(_n('%s second ago', '%s seconds ago', $diff, 'aimagic'), $diff);
        } elseif ($diff < 3600) {
            $minutes = floor($diff / 60);
            return sprintf(_n('%s minute ago', '%s minutes ago', $minutes, 'aimagic'), $minutes);
        } else {
            return wp_date('Y-m-d H:i:s', $heartbeat_time);
        }
    }

    private function get_row_actions($item) {
        $actions = [
            'view' => sprintf(
                '<a href="%s">View</a>',
                admin_url('admin.php?page=aimagic-nodes&action=view&id=' . $item->node_id)
            ),
            'edit' => sprintf(
                '<a href="%s">Edit</a>',
                admin_url('admin.php?page=aimagic-nodes&action=edit&id=' . $item->node_id)
            )
        ];

        if ($this->is_node_offline($item)) {
            $actions['delete'] = sprintf(
                '<a href="%s" class="delete" onclick="return confirm(\'%s\');">Delete</a>',
                wp_nonce_url(admin_url('admin.php?page=aimagic-nodes&action=delete&id=' . $item->node_id), 'delete_node_' . $item->node_id),
                __('Are you sure you want to delete this node?', 'aimagic')
            );
        }

        return $this->row_actions($actions);
    }

    private function is_node_offline($item) {
        $current_time = current_time('timestamp');
        $last_heartbeat = strtotime($item->last_heartbeat);
        return ($current_time - $last_heartbeat) > 300;
    }

    public function column_cb($item) {
        return sprintf(
            '<input type="checkbox" name="nodes[]" value="%s" />',
            $item->node_id
        );
    }

    public function get_bulk_actions() {
        return [
            'delete' => __('Delete', 'aimagic')
        ];
    }

    public function process_bulk_action() {
        if ('delete' === $this->current_action()) {
            $nonce = esc_attr($_REQUEST['_wpnonce']);
            if (!wp_verify_nonce($nonce, 'bulk-' . $this->_args['plural'])) {
                die('Security check failed');
            }

            global $wpdb;
            $nodes = isset($_REQUEST['nodes']) ? array_map('intval', $_REQUEST['nodes']) : array();
            
            if (!empty($nodes)) {
                foreach ($nodes as $node_id) {
                    // Only delete offline nodes
                    $node = $wpdb->get_row($wpdb->prepare(
                        "SELECT * FROM {$wpdb->prefix}ai_nodes WHERE node_id = %d",
                        $node_id
                    ));

                    if ($node && $this->is_node_offline($node)) {
                        $wpdb->delete(
                            $wpdb->prefix . 'ai_nodes',
                            ['node_id' => $node_id],
                            ['%d']
                        );
                    }
                }
                
                wp_redirect(add_query_arg('message', '3', wp_get_referer()));
                exit;
            }
        }
    }
}

目錄：/www/wwwroot/xart004.heatgroups.top/wp-content/plugins/ai_plateform_v2/files_2025/includes/Admin
檔名：class-admin-ai-resources-list.php
==================================================
<?php
namespace AIMagic\Admin;

if (!defined('ABSPATH')) exit;

if (!class_exists('WP_List_Table')) {
    require_once(ABSPATH . 'wp-admin/includes/class-wp-list-table.php');
}

class AI_Resources_List_Table extends \WP_List_Table {
    public function __construct() {
        parent::__construct([
            'singular' => 'ai_resource',
            'plural'   => 'ai_resources',
            'ajax'     => true
        ]);
    }

    public function get_columns() {
        return [
            'cb'            => '<input type="checkbox" />',
            'name'          => __('Name', 'aimagic'),
            'type'          => __('Type', 'aimagic'),
            'provider'      => __('Provider', 'aimagic'),
            'model'         => __('Model', 'aimagic'),
            'usage'         => __('Usage', 'aimagic'),
            'latency'       => __('Latency', 'aimagic'),
            'status'        => __('Status', 'aimagic'),
            'last_checked'  => __('Last Checked', 'aimagic')
        ];
    }

    public function prepare_items() {
        global $wpdb;

        $per_page = 20;
        $current_page = $this->get_pagenum();
        
        // Build query
        $where = [];
        $values = [];

        // Handle type filter
        if (!empty($_GET['type'])) {
            $where[] = 'r.type = %s';
            $values[] = sanitize_text_field($_GET['type']);
        }

        // Handle provider filter
        if (!empty($_GET['provider'])) {
            $where[] = 'r.provider = %s';
            $values[] = sanitize_text_field($_GET['provider']);
        }

        // Handle status filter
        if (!empty($_GET['status'])) {
            $where[] = 'r.status = %s';
            $values[] = sanitize_text_field($_GET['status']);
        }

        // Handle search
        if (!empty($_GET['s'])) {
            $search = '%' . $wpdb->esc_like($_GET['s']) . '%';
            $where[] = '(r.name LIKE %s OR r.model LIKE %s)';
            $values[] = $search;
            $values[] = $search;
        }

        $where_clause = !empty($where) ? 'WHERE ' . implode(' AND ', $where) : '';

        // Get total items
        $total_items = $wpdb->get_var($wpdb->prepare(
            "SELECT COUNT(*) 
            FROM {$wpdb->prefix}aimagic_ai_resources r 
            $where_clause",
            $values
        ));

        // Get items
        $items = $wpdb->get_results($wpdb->prepare(
            "SELECT r.*, h.status as health_status, h.latency, h.last_check
            FROM {$wpdb->prefix}aimagic_ai_resources r
            LEFT JOIN {$wpdb->prefix}aimagic_resource_health h ON r.id = h.resource_id
            $where_clause
            ORDER BY r.name ASC
            LIMIT %d OFFSET %d",
            array_merge($values, [$per_page, ($current_page - 1) * $per_page])
        ));

        $this->items = $items;

        $this->set_pagination_args([
            'total_items' => $total_items,
            'per_page'    => $per_page,
            'total_pages' => ceil($total_items / $per_page)
        ]);
    }

    public function column_default($item, $column_name) {
        switch ($column_name) {
            case 'type':
                return $this->get_type_label($item->type);
            case 'provider':
                return $this->get_provider_label($item->provider);
            case 'model':
                return esc_html($item->model);
            case 'usage':
                return $this->get_usage_bar($item);
            case 'latency':
                return $this->format_latency($item->latency);
            case 'status':
                return $this->get_status_label($item->status, $item->health_status);
            case 'last_checked':
                return $item->last_check ? 
                    human_time_diff(strtotime($item->last_check), current_time('timestamp')) . ' ago' : 
                    '-';
            default:
                return print_r($item, true);
        }
    }

    private function get_type_label($type) {
        $labels = [
            'text'  => '<span class="type-text">Text</span>',
            'image' => '<span class="type-image">Image</span>',
            'video' => '<span class="type-video">Video</span>',
            'audio' => '<span class="type-audio">Audio</span>'
        ];
        return isset($labels[$type]) ? $labels[$type] : ucfirst($type);
    }

    private function get_provider_label($provider) {
        $icons = [
            'openai' => 'openai-icon.svg',
            'google' => 'google-icon.svg',
            'azure'  => 'azure-icon.svg',
            'custom' => 'custom-icon.svg'
        ];

        $icon = isset($icons[$provider]) ? 
            '<img src="' . AIMAGIC_PLUGIN_URL . 'assets/images/' . $icons[$provider] . '" class="provider-icon" alt="">' :
            '';

        return $icon . ucfirst($provider);
    }

    private function get_usage_bar($item) {
        $percentage = min(100, ($item->total_requests / $item->request_limit) * 100);
        $class = '';
        if ($percentage > 90) {
            $class = 'usage-critical';
        } elseif ($percentage > 75) {
            $class = 'usage-warning';
        }

        return sprintf(
            '<div class="usage-info">%s / %s</div>
            <div class="usage-bar %s">
                <div class="usage-bar-fill" style="width: %d%%"></div>
            </div>',
            number_format_i18n($item->total_requests),
            number_format_i18n($item->request_limit),
            $class,
            $percentage
        );
    }

    private function format_latency($latency) {
        if (!$latency) return '-';
        
        if ($latency < 1000) {
            return $latency . 'ms';
        } else {
            return number_format($latency / 1000, 2) . 's';
        }
    }

    private function get_status_label($status, $health_status) {
        $classes = [
            'active'   => 'status-active',
            'inactive' => 'status-inactive',
            'error'    => 'status-error'
        ];

        $health_classes = [
            'healthy'  => 'health-good',
            'warning'  => 'health-warning',
            'error'    => 'health-error'
        ];

        $status_class = isset($classes[$status]) ? $classes[$status] : '';
        $health_class = isset($health_classes[$health_status]) ? $health_classes[$health_status] : '';

        return sprintf(
            '<span class="status-indicator %s %s">%s</span>',
            $status_class,
            $health_class,
            ucfirst($status)
        );
    }

    public function column_name($item) {
        $actions = [
            'edit' => sprintf(
                '<a href="%s">Edit</a>',
                admin_url('admin.php?page=aimagic-ai-resources&action=edit&id=' . $item->id)
            ),
            'test' => sprintf(
                '<a href="%s">Test</a>',
                wp_nonce_url(admin_url('admin.php?page=aimagic-ai-resources&action=test&id=' . $item->id), 'test_resource_' . $item->id)
            )
        ];

        if ($item->status === 'active') {
            $actions['deactivate'] = sprintf(
                '<a href="%s">Deactivate</a>',
                wp_nonce_url(admin_url('admin.php?page=aimagic-ai-resources&action=deactivate&id=' . $item->id), 'deactivate_resource_' . $item->id)
            );
        } else {
            $actions['activate'] = sprintf(
                '<a href="%s">Activate</a>',
                wp_nonce_url(admin_url('admin.php?page=aimagic-ai-resources&action=activate&id=' . $item->id), 'activate_resource_' . $item->id)
            );
        }

        return sprintf(
            '%1$s %2$s',
            '<strong>' . esc_html($item->name) . '</strong>',
            $this->row_actions($actions)
        );
    }

    public function column_cb($item) {
        return sprintf(
            '<input type="checkbox" name="resources[]" value="%s" />',
            $item->id
        );
    }

    public function get_bulk_actions() {
        return [
            'activate'   => __('Activate', 'aimagic'),
            'deactivate' => __('Deactivate', 'aimagic'),
            'test'       => __('Test', 'aimagic'),
            'delete'     => __('Delete', 'aimagic')
        ];
    }

    public function process_bulk_action() {
        if ('delete' === $this->current_action()) {
            $nonce = esc_attr($_REQUEST['_wpnonce']);
            if (!wp_verify_nonce($nonce, 'bulk-' . $this->_args['plural'])) {
                die('Security check failed');
            }

            $resource_ids = isset($_REQUEST['resources']) ? array_map('intval', $_REQUEST['resources']) : array();
            
            if (!empty($resource_ids)) {
                global $wpdb;
                foreach ($resource_ids as $resource_id) {
                    $wpdb->delete(
                        $wpdb->prefix . 'aimagic_ai_resources',
                        ['id' => $resource_id],
                        ['%d']
                    );
                    $wpdb->delete(
                        $wpdb->prefix . 'aimagic_resource_health',
                        ['resource_id' => $resource_id],
                        ['%d']
                    );
                }
                
                wp_redirect(add_query_arg('message', '3', wp_get_referer()));
                exit;
            }
        }
    }
}

目錄：/www/wwwroot/xart004.heatgroups.top/wp-content/plugins/ai_plateform_v2/files_2025/includes/Admin
檔名：class-admin-tenants-list.php
==================================================
<?php
namespace AIMagic\Admin;

if (!defined('ABSPATH')) exit;

if (!class_exists('WP_List_Table')) {
    require_once(ABSPATH . 'wp-admin/includes/class-wp-list-table.php');
}

class Tenants_List_Table extends \WP_List_Table {
    public function __construct() {
        parent::__construct([
            'singular' => 'tenant',
            'plural'   => 'tenants',
            'ajax'     => true
        ]);
    }

    public function get_columns() {
        return [
            'cb'              => '<input type="checkbox" />',
            'name'            => __('Name', 'aimagic'),
            'identifier'      => __('Identifier', 'aimagic'),
            'status'          => __('Status', 'aimagic'),
            'plan'            => __('Plan', 'aimagic'),
            'usage'           => __('API Usage', 'aimagic'),
            'users'           => __('Users', 'aimagic'),
            'storage'         => __('Storage', 'aimagic'),
            'created_at'      => __('Created', 'aimagic'),
            'actions'         => __('Actions', 'aimagic')
        ];
    }

    public function prepare_items() {
        global $wpdb;

        $per_page = 20;
        $current_page = $this->get_pagenum();
        
        // Build query
        $where = [];
        $values = [];

        // Handle status filter
        if (!empty($_GET['status'])) {
            $where[] = 'status = %s';
            $values[] = sanitize_text_field($_GET['status']);
        }

        // Handle plan filter
        if (!empty($_GET['plan'])) {
            $where[] = 'plan = %s';
            $values[] = sanitize_text_field($_GET['plan']);
        }

        // Handle search
        if (!empty($_GET['s'])) {
            $search = '%' . $wpdb->esc_like($_GET['s']) . '%';
            $where[] = '(name LIKE %s OR identifier LIKE %s)';
            $values[] = $search;
            $values[] = $search;
        }

        $where_clause = !empty($where) ? 'WHERE ' . implode(' AND ', $where) : '';

        // Get total items
        $total_items = $wpdb->get_var($wpdb->prepare(
            "SELECT COUNT(*) FROM {$wpdb->prefix}aimagic_tenants $where_clause",
            $values
        ));

        // Get items
        $items = $wpdb->get_results($wpdb->prepare(
            "SELECT t.*, 
                    COUNT(DISTINCT u.id) as user_count,
                    SUM(u.storage_used) as total_storage
             FROM {$wpdb->prefix}aimagic_tenants t
             LEFT JOIN {$wpdb->prefix}aimagic_users u ON t.id = u.tenant_id
             $where_clause
             GROUP BY t.id
             ORDER BY t.created_at DESC
             LIMIT %d OFFSET %d",
            array_merge($values, [$per_page, ($current_page - 1) * $per_page])
        ));

        $this->items = $items;

        $this->set_pagination_args([
            'total_items' => $total_items,
            'per_page'    => $per_page,
            'total_pages' => ceil($total_items / $per_page)
        ]);
    }

    public function column_default($item, $column_name) {
        switch ($column_name) {
            case 'identifier':
                return '<code>' . esc_html($item->identifier) . '</code>';
            case 'status':
                return $this->get_status_label($item->status);
            case 'plan':
                return $this->get_plan_label($item->plan);
            case 'usage':
                return $this->get_usage_bar($item);
            case 'users':
                return number_format($item->user_count);
            case 'storage':
                return size_format($item->total_storage, 2);
            case 'created_at':
                return wp_date('Y-m-d H:i:s', strtotime($item->created_at));
            default:
                return print_r($item, true);
        }
    }

    private function get_status_label($status) {
        $labels = [
            'active'    => '<span class="status-active">Active</span>',
            'suspended' => '<span class="status-suspended">Suspended</span>',
            'trial'     => '<span class="status-trial">Trial</span>'
        ];
        return isset($labels[$status]) ? $labels[$status] : ucfirst($status);
    }

    private function get_plan_label($plan) {
        $labels = [
            'free'       => '<span class="plan-free">Free</span>',
            'basic'      => '<span class="plan-basic">Basic</span>',
            'premium'    => '<span class="plan-premium">Premium</span>',
            'enterprise' => '<span class="plan-enterprise">Enterprise</span>'
        ];
        return isset($labels[$plan]) ? $labels[$plan] : ucfirst($plan);
    }

    private function get_usage_bar($item) {
        $percentage = min(100, ($item->api_calls_current / $item->api_calls_limit) * 100);
        $class = $percentage > 90 ? 'critical' : ($percentage > 75 ? 'warning' : '');

        return sprintf(
            '<div class="usage-bar usage-%s" data-tenant-id="%d">
                <div class="usage-current" style="width: %d%%"></div>
                <div class="usage-text">%s / %s</div>
            </div>',
            $class,
            $item->id,
            $percentage,
            number_format($item->api_calls_current),
            number_format($item->api_calls_limit)
        );
    }

    public function column_name($item) {
        $actions = [
            'edit' => sprintf(
                '<a href="%s">Edit</a>',
                admin_url('admin.php?page=aimagic-tenants&action=edit&id=' . $item->id)
            ),
            'view' => sprintf(
                '<a href="%s">View Dashboard</a>',
                admin_url('admin.php?page=aimagic-tenants&action=view&id=' . $item->id)
            ),
            'api-key' => sprintf(
                '<a href="#" class="regenerate-api-key" data-tenant-id="%d">Regenerate API Key</a>',
                $item->id
            )
        ];

        if ($item->status !== 'suspended') {
            $actions['suspend'] = sprintf(
                '<a href="%s" class="suspend">Suspend</a>',
                wp_nonce_url(admin_url('admin.php?page=aimagic-tenants&action=suspend&id=' . $item->id), 'suspend_tenant_' . $item->id)
            );
        } else {
            $actions['activate'] = sprintf(
                '<a href="%s" class="activate">Activate</a>',
                wp_nonce_url(admin_url('admin.php?page=aimagic-tenants&action=activate&id=' . $item->id), 'activate_tenant_' . $item->id)
            );
        }

        return sprintf(
            '%1$s %2$s',
            '<strong>' . esc_html($item->name) . '</strong>',
            $this->row_actions($actions)
        );
    }

    public function column_cb($item) {
        return sprintf(
            '<input type="checkbox" name="tenants[]" value="%s" />',
            $item->id
        );
    }

    public function get_bulk_actions() {
        return [
            'suspend'   => __('Suspend', 'aimagic'),
            'activate'  => __('Activate', 'aimagic'),
            'delete'    => __('Delete', 'aimagic')
        ];
    }

    public function process_bulk_action() {
        if ('delete' === $this->current_action()) {
            $nonce = esc_attr($_REQUEST['_wpnonce']);
            if (!wp_verify_nonce($nonce, 'bulk-' . $this->_args['plural'])) {
                die('Security check failed');
            }

            $tenant_ids = isset($_REQUEST['tenants']) ? array_map('intval', $_REQUEST['tenants']) : array();
            
            if (!empty($tenant_ids)) {
                global $wpdb;
                foreach ($tenant_ids as $tenant_id) {
                    // Delete tenant and all related data
                    $wpdb->delete($wpdb->prefix . 'aimagic_tenants', ['id' => $tenant_id], ['%d']);
                    $wpdb->delete($wpdb->prefix . 'aimagic_users', ['tenant_id' => $tenant_id], ['%d']);
                }
                
                wp_redirect(add_query_arg('message', '3', wp_get_referer()));
                exit;
            }
        }
    }
}

目錄：/www/wwwroot/xart004.heatgroups.top/wp-content/plugins/ai_plateform_v2/files_2025/includes/Admin
檔名：Admin.php
==================================================
<?php
namespace AIMagic\Admin;

class Admin {
    private $plugin_name;
    private $version;

    public function __construct($plugin_name, $version) {
        $this->plugin_name = $plugin_name;
        $this->version = $version;

        add_action('admin_menu', array($this, 'add_plugin_admin_menu'));
        add_action('admin_init', array($this, 'register_settings'));
    }

    public function enqueue_styles() {
        wp_enqueue_style(
            $this->plugin_name,
            AIMAGIC_PLUGIN_URL . 'admin/css/admin.css',
            array(),
            $this->version,
            'all'
        );
    }

    public function enqueue_scripts() {
        wp_enqueue_script(
            $this->plugin_name,
            AIMAGIC_PLUGIN_URL . 'admin/js/admin.js',
            array('jquery'),
            $this->version,
            false
        );
    }

    public function add_plugin_admin_menu() {
        add_menu_page(
            __('AI Magic Publisher', 'ai-magic-publisher'),
            __('AI Magic', 'ai-magic-publisher'),
            'manage_options',
            'ai-magic-publisher',
            array($this, 'display_plugin_admin_page'),
            'dashicons-analytics',
            30
        );

        add_submenu_page(
            'ai-magic-publisher',
            __('Settings', 'ai-magic-publisher'),
            __('Settings', 'ai-magic-publisher'),
            'manage_options',
            'ai-magic-publisher-settings',
            array($this, 'display_plugin_settings_page')
        );

        // Add other admin pages
        $this->add_admin_subpages();
    }

    private function add_admin_subpages() {
        $subpages = array(
            'tasks' => array(
                'title' => __('Tasks', 'ai-magic-publisher'),
                'class' => 'TasksList'
            ),
            'users' => array(
                'title' => __('Users', 'ai-magic-publisher'),
                'class' => 'UsersList'
            ),
            'tenants' => array(
                'title' => __('Tenants', 'ai-magic-publisher'),
                'class' => 'TenantsList'
            )
        );

        foreach ($subpages as $slug => $page) {
            add_submenu_page(
                'ai-magic-publisher',
                $page['title'],
                $page['title'],
                'manage_options',
                "ai-magic-publisher-{$slug}",
                array($this, "display_plugin_{$slug}_page")
            );
        }
    }

    public function register_settings() {
        register_setting('aimagic_settings', 'aimagic_gpt4_api_key');
        register_setting('aimagic_settings', 'aimagic_line_channel_secret');
        register_setting('aimagic_settings', 'aimagic_line_channel_token');
        register_setting('aimagic_settings', 'aimagic_wechat_app_id');
        register_setting('aimagic_settings', 'aimagic_wechat_app_secret');
        register_setting('aimagic_settings', 'aimagic_wechat_token');

        add_settings_section(
            'aimagic_api_settings',
            __('API Settings', 'ai-magic-publisher'),
            array($this, 'render_api_settings_section'),
            'aimagic_settings'
        );

        add_settings_field(
            'aimagic_gpt4_api_key',
            __('GPT-4 API Key', 'ai-magic-publisher'),
            array($this, 'render_api_key_field'),
            'aimagic_settings',
            'aimagic_api_settings'
        );

        // Add other settings fields
        $this->add_platform_settings_fields();
    }

    private function add_platform_settings_fields() {
        // LINE Platform Settings
        add_settings_section(
            'aimagic_line_settings',
            __('LINE Platform Settings', 'ai-magic-publisher'),
            array($this, 'render_line_settings_section'),
            'aimagic_settings'
        );

        // WeChat Platform Settings
        add_settings_section(
            'aimagic_wechat_settings',
            __('WeChat Platform Settings', 'ai-magic-publisher'),
            array($this, 'render_wechat_settings_section'),
            'aimagic_settings'
        );
    }

    public function display_plugin_admin_page() {
        include_once AIMAGIC_PLUGIN_DIR . 'admin/partials/admin-display.php';
    }

    public function display_plugin_settings_page() {
        include_once AIMAGIC_PLUGIN_DIR . 'admin/partials/admin-settings.php';
    }

    public function display_plugin_tasks_page() {
        $list_table = new TasksList();
        $list_table->prepare_items();
        include_once AIMAGIC_PLUGIN_DIR . 'admin/partials/admin-tasks.php';
    }

    public function display_plugin_users_page() {
        $list_table = new UsersList();
        $list_table->prepare_items();
        include_once AIMAGIC_PLUGIN_DIR . 'admin/partials/admin-users.php';
    }

    public function display_plugin_tenants_page() {
        $list_table = new TenantsList();
        $list_table->prepare_items();
        include_once AIMAGIC_PLUGIN_DIR . 'admin/partials/admin-tenants.php';
    }
}

目錄：/www/wwwroot/xart004.heatgroups.top/wp-content/plugins/ai_plateform_v2/files_2025/includes/Admin
檔名：class-admin-payments-list.php
==================================================
<?php
namespace AIMagic\Admin;

if (!defined('ABSPATH')) exit;

if (!class_exists('WP_List_Table')) {
    require_once(ABSPATH . 'wp-admin/includes/class-wp-list-table.php');
}

class Payments_List_Table extends \WP_List_Table {
    public function __construct() {
        parent::__construct([
            'singular' => 'payment',
            'plural'   => 'payments',
            'ajax'     => true
        ]);
    }

    public function get_columns() {
        return [
            'cb'             => '<input type="checkbox" />',
            'transaction_id' => __('Transaction ID', 'aimagic'),
            'tenant'         => __('Tenant', 'aimagic'),
            'amount'         => __('Amount', 'aimagic'),
            'payment_method' => __('Method', 'aimagic'),
            'status'         => __('Status', 'aimagic'),
            'created_at'     => __('Date', 'aimagic'),
            'actions'        => __('Actions', 'aimagic')
        ];
    }

    public function prepare_items() {
        global $wpdb;

        $per_page = 20;
        $current_page = $this->get_pagenum();
        
        // Build query
        $where = [];
        $values = [];

        // Handle status filter
        if (!empty($_GET['status'])) {
            $where[] = 'p.status = %s';
            $values[] = sanitize_text_field($_GET['status']);
        }

        // Handle payment method filter
        if (!empty($_GET['payment_method'])) {
            $where[] = 'p.payment_method = %s';
            $values[] = sanitize_text_field($_GET['payment_method']);
        }

        // Handle date range
        if (!empty($_GET['date_from'])) {
            $where[] = 'DATE(p.created_at) >= %s';
            $values[] = sanitize_text_field($_GET['date_from']);
        }
        if (!empty($_GET['date_to'])) {
            $where[] = 'DATE(p.created_at) <= %s';
            $values[] = sanitize_text_field($_GET['date_to']);
        }

        // Handle search
        if (!empty($_GET['s'])) {
            $search = '%' . $wpdb->esc_like($_GET['s']) . '%';
            $where[] = '(p.transaction_id LIKE %s OR t.name LIKE %s)';
            $values[] = $search;
            $values[] = $search;
        }

        $where_clause = !empty($where) ? 'WHERE ' . implode(' AND ', $where) : '';

        // Get total items
        $total_items = $wpdb->get_var($wpdb->prepare(
            "SELECT COUNT(*)
            FROM {$wpdb->prefix}aimagic_payments p
            LEFT JOIN {$wpdb->prefix}aimagic_tenants t ON p.tenant_id = t.id
            $where_clause",
            $values
        ));

        // Get items
        $items = $wpdb->get_results($wpdb->prepare(
            "SELECT p.*, t.name as tenant_name
            FROM {$wpdb->prefix}aimagic_payments p
            LEFT JOIN {$wpdb->prefix}aimagic_tenants t ON p.tenant_id = t.id
            $where_clause
            ORDER BY p.created_at DESC
            LIMIT %d OFFSET %d",
            array_merge($values, [$per_page, ($current_page - 1) * $per_page])
        ));

        $this->items = $items;

        $this->set_pagination_args([
            'total_items' => $total_items,
            'per_page'    => $per_page,
            'total_pages' => ceil($total_items / $per_page)
        ]);
    }

    public function column_default($item, $column_name) {
        switch ($column_name) {
            case 'transaction_id':
                return '<code>' . esc_html($item->transaction_id) . '</code>';
            case 'tenant':
                return esc_html($item->tenant_name);
            case 'amount':
                return '<span class="amount">' . 
                       esc_html(number_format_i18n($item->amount, 2)) . ' ' . 
                       esc_html($item->currency) . '</span>';
            case 'payment_method':
                return $this->get_payment_method_html($item->payment_method);
            case 'status':
                return $this->get_status_html($item->status);
            case 'created_at':
                return wp_date('Y-m-d H:i:s', strtotime($item->created_at));
            case 'actions':
                return $this->get_row_actions($item);
            default:
                return print_r($item, true);
        }
    }

    private function get_payment_method_html($method) {
        $icons = [
            'credit_card'    => 'dashicons-credit-card',
            'paypal'         => 'dashicons-paypal',
            'bank_transfer'  => 'dashicons-bank',
            'manual'         => 'dashicons-money-alt'
        ];

        $icon = isset($icons[$method]) ? $icons[$method] : 'dashicons-money';
        
        return sprintf(
            '<span class="dashicons %s payment-method-icon"></span> %s',
            esc_attr($icon),
            ucfirst(str_replace('_', ' ', $method))
        );
    }

    private function get_status_html($status) {
        return sprintf(
            '<span class="status-%s">%s</span>',
            esc_attr($status),
            ucfirst($status)
        );
    }

    private function get_row_actions($item) {
        $actions = [
            'view' => sprintf(
                '<a href="%s">View</a>',
                admin_url('admin.php?page=aimagic-payments&action=view&id=' . $item->id)
            )
        ];

        if ($item->status === 'pending') {
            $actions['approve'] = sprintf(
                '<a href="%s">Approve</a>',
                wp_nonce_url(admin_url('admin.php?page=aimagic-payments&action=approve&id=' . $item->id), 'approve_payment_' . $item->id)
            );
            $actions['reject'] = sprintf(
                '<a href="%s">Reject</a>',
                wp_nonce_url(admin_url('admin.php?page=aimagic-payments&action=reject&id=' . $item->id), 'reject_payment_' . $item->id)
            );
        }

        if ($item->status === 'completed' && !$item->refunded) {
            $actions['refund'] = sprintf(
                '<a href="%s" class="refund">Refund</a>',
                wp_nonce_url(admin_url('admin.php?page=aimagic-payments&action=refund&id=' . $item->id), 'refund_payment_' . $item->id)
            );
        }

        return $this->row_actions($actions);
    }

    public function column_cb($item) {
        return sprintf(
            '<input type="checkbox" name="payments[]" value="%s" />',
            $item->id
        );
    }

    public function get_bulk_actions() {
        return [
            'approve' => __('Approve', 'aimagic'),
            'reject'  => __('Reject', 'aimagic'),
            'export'  => __('Export', 'aimagic')
        ];
    }

    public function process_bulk_action() {
        if ('export' === $this->current_action()) {
            if (!wp_verify_nonce($_REQUEST['_wpnonce'], 'bulk-' . $this->_args['plural'])) {
                die('Security check failed');
            }

            $payment_ids = isset($_REQUEST['payments']) ? array_map('intval', $_REQUEST['payments']) : array();
            
            if (!empty($payment_ids)) {
                $this->export_payments($payment_ids);
            }
        }
    }

    private function export_payments($payment_ids) {
        global $wpdb;

        $payments = $wpdb->get_results($wpdb->prepare(
            "SELECT p.*, t.name as tenant_name
            FROM {$wpdb->prefix}aimagic_payments p
            LEFT JOIN {$wpdb->prefix}aimagic_tenants t ON p.tenant_id = t.id
            WHERE p.id IN (" . implode(',', array_fill(0, count($payment_ids), '%d')) . ")",
            $payment_ids
        ));

        // Set headers for CSV download
        header('Content-Type: text/csv; charset=utf-8');
        header('Content-Disposition: attachment; filename=payments-export-' . date('Y-m-d') . '.csv');
        
        $output = fopen('php://output', 'w');
        
        // Add CSV headers
        fputcsv($output, [
            'Transaction ID',
            'Tenant',
            'Amount',
            'Currency',
            'Payment Method',
            'Status',
            'Created At'
        ]);

        // Add payment data
        foreach ($payments as $payment) {
            fputcsv($output, [
                $payment->transaction_id,
                $payment->tenant_name,
                $payment->amount,
                $payment->currency,
                $payment->payment_method,
                $payment->status,
                $payment->created_at
            ]);
        }

        fclose($output);
        exit;
    }
}

目錄：/www/wwwroot/xart004.heatgroups.top/wp-content/plugins/ai_plateform_v2/files_2025/includes/Admin
檔名：class-admin-analytics-list.php
==================================================
<?php
namespace AIMagic\Admin;

if (!defined('ABSPATH')) exit;

class Analytics_List {
    private $db;
    private $cache_group = 'aimagic_analytics';
    private $cache_duration = 300; // 5 minutes

    public function __construct() {
        global $wpdb;
        $this->db = $wpdb;
    }

    public function get_analytics_data($range = '30days', $custom_from = '', $custom_to = '') {
        $cache_key = 'analytics_' . $range . '_' . $custom_from . '_' . $custom_to;
        $data = wp_cache_get($cache_key, $this->cache_group);

        if (false === $data) {
            $data = $this->fetch_analytics_data($range, $custom_from, $custom_to);
            wp_cache_set($cache_key, $data, $this->cache_group, $this->cache_duration);
        }

        return $data;
    }

    private function fetch_analytics_data($range, $custom_from, $custom_to) {
        // Calculate date range
        $dates = $this->get_date_range($range, $custom_from, $custom_to);
        $from_date = $dates['from'];
        $to_date = $dates['to'];
        $previous_from = $dates['previous_from'];
        $previous_to = $dates['previous_to'];

        // Fetch basic metrics
        $current_metrics = $this->get_basic_metrics($from_date, $to_date);
        $previous_metrics = $this->get_basic_metrics($previous_from, $previous_to);

        // Calculate trends
        $trends = $this->calculate_trends($current_metrics, $previous_metrics);

        // Prepare chart data
        $charts = [
            'api_usage' => $this->get_api_usage_data($from_date, $to_date),
            'user_activity' => $this->get_user_activity_data($from_date, $to_date),
            'resource_usage' => $this->get_resource_usage_data($from_date, $to_date),
            'error_rates' => $this->get_error_rates_data($from_date, $to_date)
        ];

        return array_merge($current_metrics, $trends, [
            'charts' => $charts,
            'top_users' => $this->get_top_users($from_date, $to_date),
            'error_distribution' => $this->get_error_distribution($from_date, $to_date)
        ]);
    }

    private function get_date_range($range, $custom_from, $custom_to) {
        $now = current_time('mysql');
        
        switch ($range) {
            case '7days':
                $from_date = date('Y-m-d H:i:s', strtotime('-7 days', strtotime($now)));
                $previous_from = date('Y-m-d H:i:s', strtotime('-14 days', strtotime($now)));
                $previous_to = date('Y-m-d H:i:s', strtotime('-7 days', strtotime($now)));
                break;
            case '30days':
                $from_date = date('Y-m-d H:i:s', strtotime('-30 days', strtotime($now)));
                $previous_from = date('Y-m-d H:i:s', strtotime('-60 days', strtotime($now)));
                $previous_to = date('Y-m-d H:i:s', strtotime('-30 days', strtotime($now)));
                break;
            case '90days':
                $from_date = date('Y-m-d H:i:s', strtotime('-90 days', strtotime($now)));
                $previous_from = date('Y-m-d H:i:s', strtotime('-180 days', strtotime($now)));
                $previous_to = date('Y-m-d H:i:s', strtotime('-90 days', strtotime($now)));
                break;
            case '12months':
                $from_date = date('Y-m-d H:i:s', strtotime('-1 year', strtotime($now)));
                $previous_from = date('Y-m-d H:i:s', strtotime('-2 years', strtotime($now)));
                $previous_to = date('Y-m-d H:i:s', strtotime('-1 year', strtotime($now)));
                break;
            case 'custom':
                $from_date = $custom_from . ' 00:00:00';
                $to_date = $custom_to . ' 23:59:59';
                $date_diff = strtotime($to_date) - strtotime($from_date);
                $previous_from = date('Y-m-d H:i:s', strtotime($from_date) - $date_diff);
                $previous_to = $from_date;
                return compact('from_date', 'to_date', 'previous_from', 'previous_to');
            default:
                $from_date = date('Y-m-d H:i:s', strtotime('-30 days', strtotime($now)));
                $previous_from = date('Y-m-d H:i:s', strtotime('-60 days', strtotime($now)));
                $previous_to = date('Y-m-d H:i:s', strtotime('-30 days', strtotime($now)));
        }

        $to_date = $now;
        return compact('from_date', 'to_date', 'previous_from', 'previous_to');
    }

    private function get_basic_metrics($from_date, $to_date) {
        return [
            'total_api_calls' => $this->get_total_api_calls($from_date, $to_date),
            'active_users' => $this->get_active_users($from_date, $to_date),
            'revenue' => $this->get_revenue($from_date, $to_date),
            'success_rate' => $this->get_success_rate($from_date, $to_date)
        ];
    }

    private function calculate_trends($current, $previous) {
        $trends = [];
        foreach ($current as $key => $value) {
            if ($previous[$key] > 0) {
                $trends[$key . '_trend'] = (($value - $previous[$key]) / $previous[$key]) * 100;
            } else {
                $trends[$key . '_trend'] = 0;
            }
        }
        return $trends;
    }

    private function get_total_api_calls($from_date, $to_date) {
        return $this->db->get_var($this->db->prepare(
            "SELECT COUNT(*) FROM {$this->db->prefix}aimagic_api_calls 
            WHERE created_at BETWEEN %s AND %s",
            $from_date,
            $to_date
        ));
    }

    private function get_active_users($from_date, $to_date) {
        return $this->db->get_var($this->db->prepare(
            "SELECT COUNT(DISTINCT user_id) FROM {$this->db->prefix}aimagic_api_calls 
            WHERE created_at BETWEEN %s AND %s",
            $from_date,
            $to_date
        ));
    }

    private function get_revenue($from_date, $to_date) {
        return $this->db->get_var($this->db->prepare(
            "SELECT SUM(amount) FROM {$this->db->prefix}aimagic_payments 
            WHERE status = 'completed' AND created_at BETWEEN %s AND %s",
            $from_date,
            $to_date
        ));
    }

    private function get_success_rate($from_date, $to_date) {
        $total = $this->db->get_var($this->db->prepare(
            "SELECT COUNT(*) FROM {$this->db->prefix}aimagic_api_calls 
            WHERE created_at BETWEEN %s AND %s",
            $from_date,
            $to_date
        ));

        $successful = $this->db->get_var($this->db->prepare(
            "SELECT COUNT(*) FROM {$this->db->prefix}aimagic_api_calls 
            WHERE status = 'success' AND created_at BETWEEN %s AND %s",
            $from_date,
            $to_date
        ));

        return $total > 0 ? ($successful / $total) * 100 : 0;
    }

    private function get_api_usage_data($from_date, $to_date) {
        $results = $this->db->get_results($this->db->prepare(
            "SELECT 
                DATE_FORMAT(created_at, '%Y-%m-%d %H:00:00') as hour,
                content_type,
                COUNT(*) as count
            FROM {$this->db->prefix}aimagic_api_calls 
            WHERE created_at BETWEEN %s AND %s
            GROUP BY hour, content_type
            ORDER BY hour ASC",
            $from_date,
            $to_date
        ));

        return $this->format_chart_data($results, 'hour', 'content_type', 'count');
    }

    private function get_user_activity_data($from_date, $to_date) {
        $results = $this->db->get_results($this->db->prepare(
            "SELECT 
                DATE(created_at) as date,
                COUNT(DISTINCT user_id) as active_users,
                COUNT(*) as total_requests
            FROM {$this->db->prefix}aimagic_api_calls 
            WHERE created_at BETWEEN %s AND %s
            GROUP BY date
            ORDER BY date ASC",
            $from_date,
            $to_date
        ));

        return $this->format_chart_data($results, 'date', null, ['active_users', 'total_requests']);
    }

    private function get_resource_usage_data($from_date, $to_date) {
        $results = $this->db->get_results($this->db->prepare(
            "SELECT 
                DATE_FORMAT(timestamp, '%Y-%m-%d %H:00:00') as hour,
                AVG(cpu_usage) as cpu,
                AVG(memory_usage) as memory,
                AVG(storage_usage) as storage
            FROM {$this->db->prefix}aimagic_resource_metrics 
            WHERE timestamp BETWEEN %s AND %s
            GROUP BY hour
            ORDER BY hour ASC",
            $from_date,
            $to_date
        ));

        return $this->format_chart_data($results, 'hour', null, ['cpu', 'memory', 'storage']);
    }

    private function get_error_rates_data($from_date, $to_date) {
        $results = $this->db->get_results($this->db->prepare(
            "SELECT 
                DATE(created_at) as date,
                error_type,
                COUNT(*) as count
            FROM {$this->db->prefix}aimagic_errors 
            WHERE created_at BETWEEN %s AND %s
            GROUP BY date, error_type
            ORDER BY date ASC",
            $from_date,
            $to_date
        ));

        return $this->format_chart_data($results, 'date', 'error_type', 'count');
    }

    private function format_chart_data($results, $labels_key, $datasets_key = null, $values_key = null) {
        $data = [
            'labels' => [],
            'datasets' => []
        ];

        if (empty($results)) {
            return $data;
        }

        // Extract unique labels
        $labels = array_unique(array_column($results, $labels_key));
        $data['labels'] = array_values($labels);

        if ($datasets_key && is_string($values_key)) {
            // Multiple datasets based on a category
            $datasets = array_unique(array_column($results, $datasets_key));
            foreach ($datasets as $dataset) {
                $dataset_data = array_fill_keys($labels, 0);
                foreach ($results as $row) {
                    if ($row->{$datasets_key} === $dataset) {
                        $dataset_data[$row->{$labels_key}] = (float)$row->{$values_key};
                    }
                }
                $data['datasets'][] = [
                    'label' => $dataset,
                    'data' => array_values($dataset_data)
                ];
            }
        } elseif (is_array($values_key)) {
            // Multiple datasets based on multiple values
            foreach ($values_key as $key) {
                $dataset_data = array_fill_keys($labels, 0);
                foreach ($results as $row) {
                    $dataset_data[$row->{$labels_key}] = (float)$row->{$key};
                }
                $data['datasets'][] = [
                    'label' => $key,
                    'data' => array_values($dataset_data)
                ];
            }
        } else {
            // Single dataset
            $dataset_data = array_fill_keys($labels, 0);
            foreach ($results as $row) {
                $dataset_data[$row->{$labels_key}] = (float)$row->{$values_key};
            }
            $data['datasets'][] = [
                'label' => 'Value',
                'data' => array_values($dataset_data)
            ];
        }

        return $data;
    }

    private function get_top_users($from_date, $to_date) {
        return $this->db->get_results($this->db->prepare(
            "SELECT 
                u.user_name as name,
                COUNT(a.id) as requests,
                (SUM(CASE WHEN a.status = 'success' THEN 1 ELSE 0 END) / COUNT(*)) * 100 as success_rate,
                MAX(a.created_at) as last_activity
            FROM {$this->db->prefix}aimagic_api_calls a
            JOIN {$this->db->prefix}aimagic_user_data u ON a.user_id = u.user_id
            WHERE a.created_at BETWEEN %s AND %s
            GROUP BY u.user_id
            ORDER

目錄：/www/wwwroot/xart004.heatgroups.top/wp-content/plugins/ai_plateform_v2/files_2025/includes/Admin
檔名：class-admin-prompts-list.php
==================================================
<?php
namespace AIMagic\Admin;

if (!defined('ABSPATH')) exit;

if (!class_exists('WP_List_Table')) {
    require_once(ABSPATH . 'wp-admin/includes/class-wp-list-table.php');
}

class Prompts_List_Table extends \WP_List_Table {
    public function __construct() {
        parent::__construct([
            'singular' => 'prompt',
            'plural'   => 'prompts',
            'ajax'     => true
        ]);
    }

    public function get_columns() {
        return [
            'cb'            => '<input type="checkbox" />',
            'title'         => __('Title', 'aimagic'),
            'prompt'        => __('Prompt', 'aimagic'),
            'category'      => __('Category', 'aimagic'),
            'language'      => __('Language', 'aimagic'),
            'usage'         => __('Usage', 'aimagic'),
            'success_rate'  => __('Success Rate', 'aimagic'),
            'status'        => __('Status', 'aimagic'),
            'last_used'     => __('Last Used', 'aimagic')
        ];
    }

    public function prepare_items() {
        global $wpdb;

        $per_page = 20;
        $current_page = $this->get_pagenum();
        
        // Build query
        $where = [];
        $values = [];

        // Handle category filter
        if (!empty($_GET['category'])) {
            $where[] = 'p.category = %s';
            $values[] = sanitize_text_field($_GET['category']);
        }

        // Handle language filter
        if (!empty($_GET['language'])) {
            $where[] = 'p.language = %s';
            $values[] = sanitize_text_field($_GET['language']);
        }

        // Handle status filter
        if (!empty($_GET['status'])) {
            $where[] = 'p.status = %s';
            $values[] = sanitize_text_field($_GET['status']);
        }

        // Handle search
        if (!empty($_GET['s'])) {
            $search = '%' . $wpdb->esc_like($_GET['s']) . '%';
            $where[] = '(p.title LIKE %s OR p.prompt LIKE %s OR p.description LIKE %s)';
            $values[] = $search;
            $values[] = $search;
            $values[] = $search;
        }

        $where_clause = !empty($where) ? 'WHERE ' . implode(' AND ', $where) : '';

        // Handle sorting
        $order_by = 'p.created_at DESC';
        if (!empty($_GET['sort'])) {
            switch ($_GET['sort']) {
                case 'usage':
                    $order_by = 'p.usage_count DESC';
                    break;
                case 'success':
                    $order_by = 'p.success_rate DESC';
                    break;
                case 'newest':
                    $order_by = 'p.created_at DESC';
                    break;
            }
        }

        // Get total items
        $total_items = $wpdb->get_var($wpdb->prepare(
            "SELECT COUNT(*) 
            FROM {$wpdb->prefix}aimagic_prompts p 
            $where_clause",
            $values
        ));

        // Get items
        $items = $wpdb->get_results($wpdb->prepare(
            "SELECT 
                p.*,
                MAX(pl.used_at) as last_used_at,
                COUNT(DISTINCT pl.organization_id) as org_count
            FROM {$wpdb->prefix}aimagic_prompts p
            LEFT JOIN {$wpdb->prefix}aimagic_prompt_logs pl ON p.id = pl.prompt_id
            $where_clause
            GROUP BY p.id
            ORDER BY $order_by
            LIMIT %d OFFSET %d",
            array_merge($values, [$per_page, ($current_page - 1) * $per_page])
        ));

        $this->items = $items;

        $this->set_pagination_args([
            'total_items' => $total_items,
            'per_page'    => $per_page,
            'total_pages' => ceil($total_items / $per_page)
        ]);
    }

    public function column_default($item, $column_name) {
        switch ($column_name) {
            case 'prompt':
                return sprintf(
                    '<div class="prompt-preview">%s</div>',
                    wp_trim_words($item->prompt, 20)
                );
            case 'category':
                return sprintf(
                    '<a href="%s">%s</a>',
                    add_query_arg('category', urlencode($item->category)),
                    esc_html($item->category)
                );
            case 'language':
                return $this->get_language_label($item->language);
            case 'usage':
                return $this->get_usage_html($item);
            case 'success_rate':
                return $this->get_success_rate_html($item->success_rate);
            case 'status':
                return $this->get_status_label($item->status);
            case 'last_used':
                return $item->last_used_at ? 
                    sprintf(
                        __('%s ago', 'aimagic'),
                        human_time_diff(strtotime($item->last_used_at), current_time('timestamp'))
                    ) : 
                    __('Never', 'aimagic');
            default:
                return print_r($item, true);
        }
    }

    private function get_language_label($language) {
        $languages = [
            'en' => 'English',
            'es' => 'Español',
            'fr' => 'Français',
            'de' => 'Deutsch',
            'it' => 'Italiano',
            'pt' => 'Português',
            'ru' => 'Русский',
            'ja' => '日本語',
            'zh' => '中文',
            'ko' => '한국어'
        ];

        return isset($languages[$language]) ? 
            sprintf(
                '<span class="language-label" data-lang="%s">%s</span>',
                esc_attr($language),
                esc_html($languages[$language])
            ) : 
            esc_html($language);
    }

    private function get_usage_html($item) {
        $percentage = min(100, ($item->usage_count / max($item->usage_limit, 1)) * 100);
        $tooltip = sprintf(
            __('%s uses across %s organizations', 'aimagic'),
            number_format_i18n($item->usage_count),
            number_format_i18n($item->org_count)
        );

        return sprintf(
            '<div class="usage-info">
                <div class="usage-bar" data-tooltip="%s">
                    <div class="usage-bar-fill" style="width: %d%%"></div>
                </div>
                <div class="usage-text">%s / %s</div>
            </div>',
            esc_attr($tooltip),
            $percentage,
            number_format_i18n($item->usage_count),
            number_format_i18n($item->usage_limit)
        );
    }

    private function get_success_rate_html($rate) {
        $class = '';
        if ($rate >= 90) {
            $class = 'success-high';
        } elseif ($rate >= 70) {
            $class = 'success-medium';
        } else {
            $class = 'success-low';
        }

        return sprintf(
            '<span class="%s">%s%%</span>',
            $class,
            number_format($rate, 1)
        );
    }

    private function get_status_label($status) {
        return sprintf(
            '<span class="status-%s">%s</span>',
            esc_attr($status),
            ucfirst($status)
        );
    }

    public function column_title($item) {
        $actions = [
            'edit' => sprintf(
                '<a href="%s">Edit</a>',
                admin_url('admin.php?page=aimagic-prompts&action=edit&id=' . $item->id)
            ),
            'test' => sprintf(
                '<a href="%s">Test</a>',
                wp_nonce_url(admin_url('admin.php?page=aimagic-prompts&action=test&id=' . $item->id), 'test_prompt_' . $item->id)
            ),
            'logs' => sprintf(
                '<a href="%s">View Logs</a>',
                admin_url('admin.php?page=aimagic-prompts&action=logs&id=' . $item->id)
            )
        ];

        if ($item->status === 'active') {
            $actions['deactivate'] = sprintf(
                '<a href="%s">Deactivate</a>',
                wp_nonce_url(admin_url('admin.php?page=aimagic-prompts&action=deactivate&id=' . $item->id), 'deactivate_prompt_' . $item->id)
            );
        } else {
            $actions['activate'] = sprintf(
                '<a href="%s">Activate</a>',
                wp_nonce_url(admin_url('admin.php?page=aimagic-prompts&action=activate&id=' . $item->id), 'activate_prompt_' . $item->id)
            );
        }

        return sprintf(
            '%1$s %2$s',
            '<strong>' . esc_html($item->title) . '</strong>',
            $this->row_actions($actions)
        );
    }

    public function column_cb($item) {
        return sprintf(
            '<input type="checkbox" name="prompts[]" value="%s" />',
            $item->id
        );
    }

    public function get_bulk_actions() {
        return [
            'activate'   => __('Activate', 'aimagic'),
            'deactivate' => __('Deactivate', 'aimagic'),
            'test'       => __('Test', 'aimagic'),
            'delete'     => __('Delete', 'aimagic')
        ];
    }

    public function process_bulk_action() {
        if ('delete' === $this->current_action()) {
            $nonce = esc_attr($_REQUEST['_wpnonce']);
            if (!wp_verify_nonce($nonce, 'bulk-' . $this->_args['plural'])) {
                die('Security check failed');
            }

            $prompt_ids = isset($_REQUEST['prompts']) ? array_map('intval', $_REQUEST['prompts']) : array();
            
            if (!empty($prompt_ids)) {
                global $wpdb;
                foreach ($prompt_ids as $prompt_id) {
                    // Delete prompt and related data
                    $wpdb->delete(
                        $wpdb->prefix . 'aimagic_prompts',
                        ['id' => $prompt_id],
                        ['%d']
                    );
                    $wpdb->delete(
                        $wpdb->prefix . 'aimagic_prompt_logs',
                        ['prompt_id' => $prompt_id],
                        ['%d']
                    );
                }
                
                wp_redirect(add_query_arg('message', '3', wp_get_referer()));
                exit;
            }
        }
    }
}

目錄：/www/wwwroot/xart004.heatgroups.top/wp-content/plugins/ai_plateform_v2/files_2025/includes/Admin/Lists
檔名：TenantsList.php
==================================================
<?php
namespace AIMagic\Admin\Lists;

use AIMagic\Admin\AIMagic_List_Table_Base;

class TenantsList extends AIMagic_List_Table_Base {
    public function __construct() {
        parent::__construct(array(
            'singular' => 'tenant',
            'plural'   => 'tenants',
            'ajax'     => false
        ));

        $this->table_name = 'aimagic_tenants';
        $this->search_fields = array('name', 'api_key');
    }

    public function get_columns() {
        return array(
            'cb'         => '<input type="checkbox" />',
            'id'         => __('ID', 'ai-magic-publisher'),
            'name'       => __('Name', 'ai-magic-publisher'),
            'api_key'    => __('API Key', 'ai-magic-publisher'),
            'status'     => __('Status', 'ai-magic-publisher'),
            'users'      => __('Users', 'ai-magic-publisher'),
            'tasks'      => __('Tasks', 'ai-magic-publisher'),
            'created_at' => __('Created', 'ai-magic-publisher'),
            'updated_at' => __('Updated', 'ai-magic-publisher'),
            'actions'    => __('Actions', 'ai-magic-publisher')
        );
    }

    public function get_sortable_columns() {
        return array(
            'id'         => array('id', true),
            'name'       => array('name', false),
            'status'     => array('status', false),
            'created_at' => array('created_at', true),
            'updated_at' => array('updated_at', true)
        );
    }

    public function column_default($item, $column_name) {
        switch ($column_name) {
            case 'id':
                return '#' . $item['id'];
            case 'api_key':
                return $this->get_masked_api_key($item['api_key']);
            case 'status':
                return $this->get_status_badge($item['status']);
            case 'users':
                return $this->get_tenant_users_count($item['id']);
            case 'tasks':
                return $this->get_tenant_tasks_count($item['id']);
            case 'created_at':
            case 'updated_at':
                return mysql2date('Y-m-d H:i:s', $item[$column_name]);
            default:
                return isset($item[$column_name]) ? esc_html($item[$column_name]) : '';
        }
    }

    public function column_name($item) {
        $title = sprintf(
            '<strong><a href="%s">%s</a></strong>',
            admin_url('admin.php?page=ai-magic-publisher-tenants&action=edit&id=' . $item['id']),
            esc_html($item['name'])
        );

        $actions = array(
            'edit' => sprintf(
                '<a href="%s">%s</a>',
                admin_url('admin.php?page=ai-magic-publisher-tenants&action=edit&id=' . $item['id']),
                __('Edit', 'ai-magic-publisher')
            ),
            'users' => sprintf(
                '<a href="%s">%s</a>',
                admin_url('admin.php?page=ai-magic-publisher-users&tenant_id=' . $item['id']),
                __('View Users', 'ai-magic-publisher')
            ),
            'tasks' => sprintf(
                '<a href="%s">%s</a>',
                admin_url('admin.php?page=ai-magic-publisher-tasks&tenant_id=' . $item['id']),
                __('View Tasks', 'ai-magic-publisher')
            ),
            'delete' => sprintf(
                '<a href="%s" class="delete-tenant" data-tenant-id="%d">%s</a>',
                wp_nonce_url(admin_url('admin.php?page=ai-magic-publisher-tenants&action=delete&id=' . $item['id']), 'delete_tenant_' . $item['id']),
                $item['id'],
                __('Delete', 'ai-magic-publisher')
            )
        );

        return $title . $this->row_actions($actions);
    }

    private function get_masked_api_key($api_key) {
        $length = strlen($api_key);
        if ($length <= 8) {
            return str_repeat('•', $length);
        }
        return substr($api_key, 0, 4) . str_repeat('•', $length - 8) . substr($api_key, -4);
    }

    private function get_status_badge($status) {
        $status_classes = array(
            'active'   => 'status-active',
            'inactive' => 'status-inactive',
            'pending'  => 'status-pending'
        );

        $class = isset($status_classes[$status]) ? $status_classes[$status] : '';
        return sprintf('<span class="status-badge %s">%s</span>', $class, esc_html($status));
    }

    private function get_tenant_users_count($tenant_id) {
        global $wpdb;
        return $wpdb->get_var($wpdb->prepare(
            "SELECT COUNT(*) FROM {$wpdb->prefix}aimagic_users WHERE tenant_id = %d",
            $tenant_id
        ));
    }

    private function get_tenant_tasks_count($tenant_id) {
        global $wpdb;
        return $wpdb->get_var($wpdb->prepare(
            "SELECT COUNT(*) FROM {$wpdb->prefix}aimagic_tasks WHERE tenant_id = %d",
            $tenant_id
        ));
    }

    protected function get_bulk_actions() {
        return array(
            'activate'   => __('Activate', 'ai-magic-publisher'),
            'deactivate' => __('Deactivate', 'ai-magic-publisher'),
            'delete'     => __('Delete', 'ai-magic-publisher')
        );
    }

    protected function process_bulk_action() {
        if ('delete' === $this->current_action()) {
            $nonce = isset($_REQUEST['_wpnonce']) ? $_REQUEST['_wpnonce'] : '';
            if (!wp_verify_nonce($nonce, 'bulk-' . $this->_args['plural'])) {
                wp_die(__('Security check failed', 'ai-magic-publisher'));
            }

            $ids = isset($_REQUEST['bulk-delete']) ? $_REQUEST['bulk-delete'] : array();
            if (is_array($ids)) {
                foreach ($ids as $id) {
                    $this->delete_tenant(absint($id));
                }
            }
        }

        if ('activate' === $this->current_action() || 'deactivate' === $this->current_action()) {
            $nonce = isset($_REQUEST['_wpnonce']) ? $_REQUEST['_wpnonce'] : '';
            if (!wp_verify_nonce($nonce, 'bulk-' . $this->_args['plural'])) {
                wp_die(__('Security check failed', 'ai-magic-publisher'));
            }

            $ids = isset($_REQUEST['bulk-delete']) ? $_REQUEST['bulk-delete'] : array();
            $status = ('activate' === $this->current_action()) ? 'active' : 'inactive';
            
            if (is_array($ids)) {
                foreach ($ids as $id) {
                    $this->update_tenant_status(absint($id), $status);
                }
            }
        }
    }

    private function delete_tenant($id) {
        global $wpdb;
        $wpdb->delete(
            $wpdb->prefix . $this->table_name,
            array('id' => $id),
            array('%d')
        );
    }

    private function update_tenant_status($id, $status) {
        global $wpdb;
        $wpdb->update(
            $wpdb->prefix . $this->table_name,
            array(
                'status' => $status,
                'updated_at' => current_time('mysql')
            ),
            array('id' => $id),
            array('%s', '%s'),
            array('%d')
        );
    }
}

目錄：/www/wwwroot/xart004.heatgroups.top/wp-content/plugins/ai_plateform_v2/files_2025/includes/Admin/Lists
檔名：TasksList.php
==================================================
<?php
namespace AIMagic\Admin\Lists;

use AIMagic\Admin\AIMagic_List_Table_Base;

class TasksList extends AIMagic_List_Table_Base {
    public function __construct() {
        parent::__construct(array(
            'singular' => 'task',
            'plural'   => 'tasks',
            'ajax'     => false
        ));

        $this->table_name = 'aimagic_tasks';
        $this->search_fields = array('id', 'user_id', 'status', 'type');
    }

    public function get_columns() {
        return array(
            'cb'          => '<input type="checkbox" />',
            'id'          => __('ID', 'ai-magic-publisher'),
            'user_id'     => __('User', 'ai-magic-publisher'),
            'tenant_id'   => __('Tenant', 'ai-magic-publisher'),
            'status'      => __('Status', 'ai-magic-publisher'),
            'type'        => __('Type', 'ai-magic-publisher'),
            'created_at'  => __('Created', 'ai-magic-publisher'),
            'updated_at'  => __('Updated', 'ai-magic-publisher'),
            'actions'     => __('Actions', 'ai-magic-publisher')
        );
    }

    public function get_sortable_columns() {
        return array(
            'id'         => array('id', true),
            'user_id'    => array('user_id', false),
            'tenant_id'  => array('tenant_id', false),
            'status'     => array('status', false),
            'type'       => array('type', false),
            'created_at' => array('created_at', true),
            'updated_at' => array('updated_at', true)
        );
    }

    public function column_default($item, $column_name) {
        switch ($column_name) {
            case 'id':
                return '#' . $item['id'];
            case 'user_id':
                return $this->get_user_display_name($item['user_id']);
            case 'tenant_id':
                return $this->get_tenant_name($item['tenant_id']);
            case 'status':
                return $this->get_status_badge($item['status']);
            case 'created_at':
            case 'updated_at':
                return mysql2date('Y-m-d H:i:s', $item[$column_name]);
            default:
                return isset($item[$column_name]) ? esc_html($item[$column_name]) : '';
        }
    }

    public function column_actions($item) {
        $actions = array(
            'view'   => sprintf(
                '<a href="%s">%s</a>',
                admin_url('admin.php?page=ai-magic-publisher-tasks&action=view&id=' . $item['id']),
                __('View', 'ai-magic-publisher')
            ),
            'retry'  => sprintf(
                '<a href="%s" class="retry-task" data-task-id="%d">%s</a>',
                wp_nonce_url(admin_url('admin.php?page=ai-magic-publisher-tasks&action=retry&id=' . $item['id']), 'retry_task_' . $item['id']),
                $item['id'],
                __('Retry', 'ai-magic-publisher')
            ),
            'delete' => sprintf(
                '<a href="%s" class="delete-task" data-task-id="%d">%s</a>',
                wp_nonce_url(admin_url('admin.php?page=ai-magic-publisher-tasks&action=delete&id=' . $item['id']), 'delete_task_' . $item['id']),
                $item['id'],
                __('Delete', 'ai-magic-publisher')
            )
        );

        if ($item['status'] !== 'failed') {
            unset($actions['retry']);
        }

        return $this->row_actions($actions);
    }

    private function get_user_display_name($user_id) {
        $user = get_userdata($user_id);
        return $user ? esc_html($user->display_name) : sprintf(__('User #%d', 'ai-magic-publisher'), $user_id);
    }

    private function get_tenant_name($tenant_id) {
        global $wpdb;
        $tenant = $wpdb->get_var($wpdb->prepare(
            "SELECT name FROM {$wpdb->prefix}aimagic_tenants WHERE id = %d",
            $tenant_id
        ));
        return $tenant ? esc_html($tenant) : sprintf(__('Tenant #%d', 'ai-magic-publisher'), $tenant_id);
    }

    private function get_status_badge($status) {
        $status_classes = array(
            'pending'    => 'status-pending',
            'processing' => 'status-processing',
            'completed'  => 'status-completed',
            'failed'     => 'status-failed'
        );

        $class = isset($status_classes[$status]) ? $status_classes[$status] : '';
        return sprintf('<span class="status-badge %s">%s</span>', $class, esc_html($status));
    }

    protected function get_views() {
        global $wpdb;
        
        $status_counts = $wpdb->get_results(
            "SELECT status, COUNT(*) as count 
            FROM {$wpdb->prefix}{$this->table_name} 
            GROUP BY status",
            ARRAY_A
        );

        $views = array();
        $current = isset($_REQUEST['status']) ? $_REQUEST['status'] : 'all';
        $all_count = 0;

        foreach ($status_counts as $row) {
            $all_count += $row['count'];
        }

        $views['all'] = $this->get_view_link('all', __('All', 'ai-magic-publisher'), $all_count, $current);

        foreach ($status_counts as $row) {
            $views[$row['status']] = $this->get_view_link(
                $row['status'],
                ucfirst($row['status']),
                $row['count'],
                $current
            );
        }

        return $views;
    }

    private function get_view_link($status, $label, $count, $current) {
        $base_url = admin_url('admin.php?page=ai-magic-publisher-tasks');
        if ($status !== 'all') {
            $base_url = add_query_arg('status', $status, $base_url);
        }
        $class = ($current === $status ? ' class="current"' : '');
        return sprintf(
            '<a href="%s"%s>%s <span class="count">(%d)</span></a>',
            esc_url($base_url),
            $class,
            $label,
            $count
        );
    }
}

目錄：/www/wwwroot/xart004.heatgroups.top/wp-content/plugins/ai_plateform_v2/files_2025/includes/Admin/Lists
檔名：UsersList.php
==================================================
<?php
namespace AIMagic\Admin\Lists;

use AIMagic\Admin\AIMagic_List_Table_Base;

class UsersList extends AIMagic_List_Table_Base {
    public function __construct() {
        parent::__construct(array(
            'singular' => 'user',
            'plural'   => 'users',
            'ajax'     => false
        ));

        $this->table_name = 'aimagic_users';
        $this->search_fields = array('wp_user_id', 'platform', 'platform_user_id');
    }

    public function get_columns() {
        return array(
            'cb'                => '<input type="checkbox" />',
            'wp_user_id'        => __('WordPress User', 'ai-magic-publisher'),
            'tenant_id'         => __('Tenant', 'ai-magic-publisher'),
            'platform'          => __('Platform', 'ai-magic-publisher'),
            'platform_user_id'  => __('Platform User ID', 'ai-magic-publisher'),
            'quota_daily'       => __('Daily Quota', 'ai-magic-publisher'),
            'quota_used'        => __('Used Quota', 'ai-magic-publisher'),
            'quota_reset_date'  => __('Reset Date', 'ai-magic-publisher'),
            'created_at'        => __('Created', 'ai-magic-publisher'),
            'actions'           => __('Actions', 'ai-magic-publisher')
        );
    }

    public function get_sortable_columns() {
        return array(
            'wp_user_id'       => array('wp_user_id', false),
            'tenant_id'        => array('tenant_id', false),
            'platform'         => array('platform', false),
            'quota_daily'      => array('quota_daily', false),
            'quota_used'       => array('quota_used', false),
            'quota_reset_date' => array('quota_reset_date', true),
            'created_at'       => array('created_at', true)
        );
    }

    public function column_default($item, $column_name) {
        switch ($column_name) {
            case 'wp_user_id':
                return $this->get_wp_user_link($item['wp_user_id']);
            case 'tenant_id':
                return $this->get_tenant_name($item['tenant_id']);
            case 'platform':
                return $this->get_platform_badge($item['platform']);
            case 'quota_daily':
            case 'quota_used':
                return number_format($item[$column_name]);
            case 'quota_reset_date':
                return mysql2date('Y-m-d', $item[$column_name]);
            case 'created_at':
                return mysql2date('Y-m-d H:i:s', $item[$column_name]);
            default:
                return isset($item[$column_name]) ? esc_html($item[$column_name]) : '';
        }
    }

    public function column_actions($item) {
        $actions = array(
            'edit' => sprintf(
                '<a href="%s">%s</a>',
                admin_url('admin.php?page=ai-magic-publisher-users&action=edit&id=' . $item['id']),
                __('Edit', 'ai-magic-publisher')
            ),
            'reset_quota' => sprintf(
                '<a href="%s" class="reset-quota" data-user-id="%d">%s</a>',
                wp_nonce_url(admin_url('admin.php?page=ai-magic-publisher-users&action=reset_quota&id=' . $item['id']), 'reset_quota_' . $item['id']),
                $item['id'],
                __('Reset Quota', 'ai-magic-publisher')
            ),
            'delete' => sprintf(
                '<a href="%s" class="delete-user" data-user-id="%d">%s</a>',
                wp_nonce_url(admin_url('admin.php?page=ai-magic-publisher-users&action=delete&id=' . $item['id']), 'delete_user_' . $item['id']),
                $item['id'],
                __('Delete', 'ai-magic-publisher')
            )
        );

        return $this->row_actions($actions);
    }

    private function get_wp_user_link($user_id) {
        $user = get_userdata($user_id);
        if (!$user) {
            return sprintf(__('User #%d', 'ai-magic-publisher'), $user_id);
        }

        return sprintf(
            '<a href="%s">%s</a>',
            esc_url(get_edit_user_link($user_id)),
            esc_html($user->display_name)
        );
    }

    private function get_platform_badge($platform) {
        $platform_classes = array(
            'line'   => 'platform-line',
            'wechat' => 'platform-wechat'
        );

        $class = isset($platform_classes[$platform]) ? $platform_classes[$platform] : '';
        return sprintf('<span class="platform-badge %s">%s</span>', $class, esc_html(ucfirst($platform)));
    }

    protected function get_views() {
        global $wpdb;
        
        $platform_counts = $wpdb->get_results(
            "SELECT platform, COUNT(*) as count 
            FROM {$wpdb->prefix}{$this->table_name} 
            GROUP BY platform",
            ARRAY_A
        );

        $views = array();
        $current = isset($_REQUEST['platform']) ? $_REQUEST['platform'] : 'all';
        $all_count = 0;

        foreach ($platform_counts as $row) {
            $all_count += $row['count'];
        }

        $views['all'] = $this->get_view_link('all', __('All', 'ai-magic-publisher'), $all_count, $current);

        foreach ($platform_counts as $row) {
            $views[$row['platform']] = $this->get_view_link(
                $row['platform'],
                ucfirst($row['platform']),
                $row['count'],
                $current
            );
        }

        return $views;
    }

    private function get_view_link($platform, $label, $count, $current) {
        $base_url = admin_url('admin.php?page=ai-magic-publisher-users');
        if ($platform !== 'all') {
            $base_url = add_query_arg('platform', $platform, $base_url);
        }
        $class = ($current === $platform ? ' class="current"' : '');
        return sprintf(
            '<a href="%s"%s>%s <span class="count">(%d)</span></a>',
            esc_url($base_url),
            $class,
            $label,
            $count
        );
    }
}

目錄：/www/wwwroot/xart004.heatgroups.top/wp-content/plugins/ai_plateform_v2/files_2025/includes/Admin
檔名：class-admin-tasks-list.php
==================================================
<?php
namespace AIMagic\Admin;

if (!defined('ABSPATH')) exit;

if (!class_exists('WP_List_Table')) {
    require_once(ABSPATH . 'wp-admin/includes/class-wp-list-table.php');
}

class Tasks_List_Table extends \WP_List_Table {
    public function __construct() {
        parent::__construct([
            'singular' => 'task',
            'plural'   => 'tasks',
            'ajax'     => true
        ]);
    }

    public function get_columns() {
        return [
            'cb'            => '<input type="checkbox" />',
            'id'            => __('ID', 'aimagic'),
            'type'          => __('Type', 'aimagic'),
            'user'          => __('User', 'aimagic'),
            'status'        => __('Status', 'aimagic'),
            'node'          => __('Node', 'aimagic'),
            'created_at'    => __('Created', 'aimagic'),
            'updated_at'    => __('Updated', 'aimagic'),
            'actions'       => __('Actions', 'aimagic')
        ];
    }

    public function get_sortable_columns() {
        return [
            'id'         => ['id', true],
            'type'       => ['type', false],
            'status'     => ['status', false],
            'created_at' => ['created_at', false],
            'updated_at' => ['updated_at', false]
        ];
    }

    public function prepare_items() {
        global $wpdb;

        // Set column headers
        $columns = $this->get_columns();
        $hidden = [];
        $sortable = $this->get_sortable_columns();
        $this->_column_headers = [$columns, $hidden, $sortable];

        // Pagination
        $per_page = 20;
        $current_page = $this->get_pagenum();
        $offset = ($current_page - 1) * $per_page;

        // Build query
        $where = [];
        $values = [];

        // Handle status filter
        if (!empty($_GET['status'])) {
            $where[] = 'status = %s';
            $values[] = sanitize_text_field($_GET['status']);
        }

        // Handle type filter
        if (!empty($_GET['type'])) {
            $where[] = 'content_type = %s';
            $values[] = sanitize_text_field($_GET['type']);
        }

        // Handle search
        if (!empty($_GET['s'])) {
            $search = '%' . $wpdb->esc_like($_GET['s']) . '%';
            $where[] = '(id LIKE %s OR user_id LIKE %s OR content_payload LIKE %s)';
            $values[] = $search;
            $values[] = $search;
            $values[] = $search;
        }

        $where_clause = !empty($where) ? 'WHERE ' . implode(' AND ', $where) : '';

        // Order by
        $orderby = (!empty($_GET['orderby'])) ? $_GET['orderby'] : 'created_at';
        $order = (!empty($_GET['order'])) ? $_GET['order'] : 'DESC';

        // Get items
        $table_name = $wpdb->prefix . 'aimagic_tasks';
        
        if (!empty($values)) {
            $items = $wpdb->get_results(
                $wpdb->prepare(
                    "SELECT * FROM {$table_name} 
                    {$where_clause} 
                    ORDER BY {$orderby} {$order} 
                    LIMIT %d OFFSET %d",
                    array_merge($values, [$per_page, $offset])
                )
            );
            
            $total_items = $wpdb->get_var(
                $wpdb->prepare(
                    "SELECT COUNT(*) FROM {$table_name} {$where_clause}",
                    $values
                )
            );
        } else {
            $items = $wpdb->get_results(
                $wpdb->prepare(
                    "SELECT * FROM {$table_name} 
                    ORDER BY {$orderby} {$order} 
                    LIMIT %d OFFSET %d",
                    $per_page,
                    $offset
                )
            );
            
            $total_items = $wpdb->get_var("SELECT COUNT(*) FROM {$table_name}");
        }

        $this->items = $items;

        // Set pagination args
        $this->set_pagination_args([
            'total_items' => $total_items,
            'per_page'    => $per_page,
            'total_pages' => ceil($total_items / $per_page)
        ]);
    }

    public function column_default($item, $column_name) {
        switch ($column_name) {
            case 'id':
                return '#' . $item->id;
            case 'type':
                return ucfirst($item->content_type);
            case 'status':
                return $this->get_status_label($item->status);
            case 'created_at':
            case 'updated_at':
                return wp_date('Y-m-d H:i:s', strtotime($item->$column_name));
            case 'actions':
                return $this->get_row_actions($item);
            default:
                return print_r($item, true);
        }
    }

    private function get_status_label($status) {
        $labels = [
            'pending'     => '<span class="status-pending">Pending</span>',
            'processing'  => '<span class="status-processing">Processing</span>',
            'completed'   => '<span class="status-completed">Completed</span>',
            'failed'      => '<span class="status-failed">Failed</span>'
        ];
        return isset($labels[$status]) ? $labels[$status] : ucfirst($status);
    }

    private function get_row_actions($item) {
        $actions = [
            'view' => sprintf(
                '<a href="%s">View</a>',
                admin_url('admin.php?page=aimagic-tasks&action=view&id=' . $item->id)
            )
        ];

        if ($item->status === 'failed') {
            $actions['retry'] = sprintf(
                '<a href="%s">Retry</a>',
                wp_nonce_url(admin_url('admin.php?page=aimagic-tasks&action=retry&id=' . $item->id), 'retry_task_' . $item->id)
            );
        }

        if (in_array($item->status, ['pending', 'processing'])) {
            $actions['cancel'] = sprintf(
                '<a href="%s">Cancel</a>',
                wp_nonce_url(admin_url('admin.php?page=aimagic-tasks&action=cancel&id=' . $item->id), 'cancel_task_' . $item->id)
            );
        }

        return $this->row_actions($actions);
    }

    public function column_cb($item) {
        return sprintf(
            '<input type="checkbox" name="tasks[]" value="%s" />',
            $item->id
        );
    }

    public function get_bulk_actions() {
        $actions = [
            'delete'   => 'Delete',
            'retry'    => 'Retry',
            'cancel'   => 'Cancel'
        ];
        return $actions;
    }

    public function process_bulk_action() {
        if (empty($_POST['tasks']) || !is_array($_POST['tasks'])) {
            return;
        }

        $tasks = array_map('intval', $_POST['tasks']);
        
        switch ($this->current_action()) {
            case 'delete':
                foreach ($tasks as $task_id) {
                    if (!wp_verify_nonce($_POST['_wpnonce'], 'bulk-' . $this->_args['plural'])) {
                        wp_die('Security check failed');
                    }
                    $this->delete_task($task_id);
                }
                break;

            case 'retry':
                foreach ($tasks as $task_id) {
                    if (!wp_verify_nonce($_POST['_wpnonce'], 'bulk-' . $this->_args['plural'])) {
                        wp_die('Security check failed');
                    }
                    $this->retry_task($task_id);
                }
                break;

            case 'cancel':
                foreach ($tasks as $task_id) {
                    if (!wp_verify_nonce($_POST['_wpnonce'], 'bulk-' . $this->_args['plural'])) {
                        wp_die('Security check failed');
                    }
                    $this->cancel_task($task_id);
                }
                break;
        }
    }

    private function delete_task($task_id) {
        global $wpdb;
        $wpdb->delete(
            $wpdb->prefix . 'aimagic_tasks',
            ['id' => $task_id],
            ['%d']
        );
    }

    private function retry_task($task_id) {
        global $wpdb;
        $wpdb->update(
            $wpdb->prefix . 'aimagic_tasks',
            [
                'status' => 'pending',
                'retry_count' => 0,
                'updated_at' => current_time('mysql')
            ],
            ['id' => $task_id],
            ['%s', '%d', '%s'],
            ['%d']
        );
    }

    private function cancel_task($task_id) {
        global $wpdb;
        $wpdb->update(
            $wpdb->prefix . 'aimagic_tasks',
            [
                'status' => 'cancelled',
                'updated_at' => current_time('mysql')
            ],
            ['id' => $task_id],
            ['%s', '%s'],
            ['%d']
        );
    }
}

目錄：/www/wwwroot/xart004.heatgroups.top/wp-content/plugins/ai_plateform_v2/files_2025/includes/Admin
檔名：AIMagic_List_Table_Base.php
==================================================
<?php
namespace AIMagic\Admin;

if (!class_exists('WP_List_Table')) {
    require_once(ABSPATH . 'wp-admin/includes/class-wp-list-table.php');
}

class AIMagic_List_Table_Base extends \WP_List_Table {
    protected $table_name;
    protected $per_page = 20;
    protected $search_fields = array();

    public function __construct($args = array()) {
        parent::__construct(array(
            'singular' => isset($args['singular']) ? $args['singular'] : 'item',
            'plural'   => isset($args['plural']) ? $args['plural'] : 'items',
            'ajax'     => false
        ));
        
        $this->process_bulk_action();
    }

    public function prepare_items() {
        $columns = $this->get_columns();
        $hidden = array();
        $sortable = $this->get_sortable_columns();
        
        $this->_column_headers = array($columns, $hidden, $sortable);
        
        $search = isset($_REQUEST['s']) ? sanitize_text_field($_REQUEST['s']) : '';
        $orderby = isset($_REQUEST['orderby']) ? sanitize_text_field($_REQUEST['orderby']) : 'id';
        $order = isset($_REQUEST['order']) ? sanitize_text_field($_REQUEST['order']) : 'DESC';
        
        $current_page = $this->get_pagenum();
        
        $total_items = $this->get_total_items($search);
        
        $this->items = $this->get_items($current_page, $orderby, $order, $search);
        
        $this->set_pagination_args(array(
            'total_items' => $total_items,
            'per_page'    => $this->per_page,
            'total_pages' => ceil($total_items / $this->per_page)
        ));
    }

    protected function get_total_items($search = '') {
        global $wpdb;
        
        $where = '';
        if (!empty($search) && !empty($this->search_fields)) {
            $search_terms = array();
            foreach ($this->search_fields as $field) {
                $search_terms[] = $wpdb->prepare("$field LIKE %s", '%' . $wpdb->esc_like($search) . '%');
            }
            $where = 'WHERE ' . implode(' OR ', $search_terms);
        }
        
        $sql = "SELECT COUNT(*) FROM {$wpdb->prefix}{$this->table_name} $where";
        return $wpdb->get_var($sql);
    }

    protected function get_items($page = 1, $orderby = 'id', $order = 'DESC', $search = '') {
        global $wpdb;
        
        $offset = ($page - 1) * $this->per_page;
        
        $where = '';
        if (!empty($search) && !empty($this->search_fields)) {
            $search_terms = array();
            foreach ($this->search_fields as $field) {
                $search_terms[] = $wpdb->prepare("$field LIKE %s", '%' . $wpdb->esc_like($search) . '%');
            }
            $where = 'WHERE ' . implode(' OR ', $search_terms);
        }
        
        $sql = $wpdb->prepare(
            "SELECT * FROM {$wpdb->prefix}{$this->table_name} 
            $where 
            ORDER BY %s %s 
            LIMIT %d OFFSET %d",
            $orderby,
            $order,
            $this->per_page,
            $offset
        );
        
        return $wpdb->get_results($sql, ARRAY_A);
    }

    protected function column_cb($item) {
        return sprintf(
            '<input type="checkbox" name="bulk-delete[]" value="%s" />',
            $item['id']
        );
    }

    public function get_bulk_actions() {
        return array(
            'delete' => __('Delete', 'ai-magic-publisher')
        );
    }

    protected function process_bulk_action() {
        if ('delete' === $this->current_action()) {
            $nonce = isset($_REQUEST['_wpnonce']) ? $_REQUEST['_wpnonce'] : '';
            if (!wp_verify_nonce($nonce, 'bulk-' . $this->_args['plural'])) {
                wp_die(__('Security check failed', 'ai-magic-publisher'));
            }
            
            $ids = isset($_REQUEST['bulk-delete']) ? $_REQUEST['bulk-delete'] : array();
            if (is_array($ids)) {
                foreach ($ids as $id) {
                    $this->delete_item(absint($id));
                }
            }
            wp_redirect(esc_url(add_query_arg()));
            exit;
        }
    }

    protected function delete_item($id) {
        global $wpdb;
        $wpdb->delete(
            "{$wpdb->prefix}{$this->table_name}",
            array('id' => $id),
            array('%d')
        );
    }
}

目錄：/www/wwwroot/xart004.heatgroups.top/wp-content/plugins/ai_plateform_v2/files_2025/includes/Admin
檔名：class-admin-users-list.php
==================================================
<?php
namespace AIMagic\Admin;

if (!defined('ABSPATH')) exit;

if (!class_exists('WP_List_Table')) {
    require_once(ABSPATH . 'wp-admin/includes/class-wp-list-table.php');
}

class Users_List_Table extends \WP_List_Table {
    public function __construct() {
        parent::__construct([
            'singular' => 'user',
            'plural'   => 'users',
            'ajax'     => false
        ]);
    }

    public function get_columns() {
        return [
            'cb'              => '<input type="checkbox" />',
            'user_name'       => __('Name', 'aimagic'),
            'user_id'         => __('User ID', 'aimagic'),
            'status'          => __('Status', 'aimagic'),
            'daily_quota'     => __('Daily Quota', 'aimagic'),
            'remaining_quota' => __('Remaining', 'aimagic'),
            'balance'         => __('Balance', 'aimagic'),
            'last_active'     => __('Last Active', 'aimagic')
        ];
    }

    public function get_sortable_columns() {
        return [
            'user_name'    => ['user_name', true],
            'status'       => ['status', false],
            'last_active'  => ['last_message_time', false]
        ];
    }

    public function prepare_items() {
        global $wpdb;

        // Set column headers
        $columns = $this->get_columns();
        $hidden = [];
        $sortable = $this->get_sortable_columns();
        $this->_column_headers = [$columns, $hidden, $sortable];

        // Pagination
        $per_page = 20;
        $current_page = $this->get_pagenum();
        $offset = ($current_page - 1) * $per_page;

        // Get items
        $search = isset($_REQUEST['s']) ? wp_unslash(trim($_REQUEST['s'])) : '';
        $orderby = isset($_REQUEST['orderby']) ? $_REQUEST['orderby'] : 'last_message_time';
        $order = isset($_REQUEST['order']) ? $_REQUEST['order'] : 'DESC';

        $where = '1=1';
        if ($search) {
            $where .= $wpdb->prepare(" AND (user_name LIKE %s OR user_id LIKE %s)", 
                '%' . $wpdb->esc_like($search) . '%',
                '%' . $wpdb->esc_like($search) . '%'
            );
        }

        $items = $wpdb->get_results($wpdb->prepare(
            "SELECT * FROM {$wpdb->prefix}aimagic_user_data 
            WHERE {$where} 
            ORDER BY {$orderby} {$order} 
            LIMIT %d OFFSET %d",
            $per_page,
            $offset
        ));

        $total_items = $wpdb->get_var("SELECT COUNT(*) FROM {$wpdb->prefix}aimagic_user_data WHERE {$where}");

        $this->items = $items;

        // Set pagination args
        $this->set_pagination_args([
            'total_items' => $total_items,
            'per_page'    => $per_page,
            'total_pages' => ceil($total_items / $per_page)
        ]);
    }

    public function column_default($item, $column_name) {
        switch ($column_name) {
            case 'user_id':
            case 'status':
                return $item->$column_name;
            case 'daily_quota':
                return number_format($item->daily_quota);
            case 'remaining_quota':
                return number_format($item->remaining_quota);
            case 'balance':
                return number_format($item->balance, 2);
            case 'last_active':
                return $item->last_message_time ? wp_date('Y-m-d H:i:s', strtotime($item->last_message_time)) : '-';
            default:
                return print_r($item, true);
        }
    }

    public function column_user_name($item) {
        $actions = [
            'edit' => sprintf(
                '<a href="%s">Edit</a>',
                admin_url('admin.php?page=aimagic-users&action=edit&id=' . $item->user_id)
            ),
            'delete' => sprintf(
                '<a href="%s" onclick="return confirm(\'Are you sure?\')">Delete</a>',
                wp_nonce_url(admin_url('admin.php?page=aimagic-users&action=delete&id=' . $item->user_id), 'delete_user_' . $item->user_id)
            )
        ];

        return sprintf('%1$s %2$s', $item->user_name, $this->row_actions($actions));
    }

    public function column_cb($item) {
        return sprintf('<input type="checkbox" name="users[]" value="%s" />', $item->user_id);
    }

    public function get_bulk_actions() {
        return [
            'delete' => 'Delete',
            'activate' => 'Activate',
            'deactivate' => 'Deactivate'
        ];
    }
}

目錄：/www/wwwroot/xart004.heatgroups.top/wp-content/plugins/ai_plateform_v2/files_2025/includes/Admin
檔名：class-admin-contents-list.php
==================================================
<?php
namespace AIMagic\Admin;

if (!defined('ABSPATH')) exit;

if (!class_exists('WP_List_Table')) {
    require_once(ABSPATH . 'wp-admin/includes/class-wp-list-table.php');
}

class Contents_List_Table extends \WP_List_Table {
    public function __construct() {
        parent::__construct([
            'singular' => 'content',
            'plural'   => 'contents',
            'ajax'     => true
        ]);
    }

    public function get_columns() {
        return [
            'cb'            => '<input type="checkbox" />',
            'title'         => __('Title', 'aimagic'),
            'preview'       => __('Preview', 'aimagic'),
            'type'          => __('Type', 'aimagic'),
            'organization'  => __('Organization', 'aimagic'),
            'author'        => __('Author', 'aimagic'),
            'usage'         => __('Usage', 'aimagic'),
            'status'        => __('Status', 'aimagic'),
            'created_at'    => __('Created', 'aimagic')
        ];
    }

    public function prepare_items() {
        global $wpdb;

        $per_page = 20;
        $current_page = $this->get_pagenum();
        
        // Build query
        $where = [];
        $values = [];

        // Handle type filter
        if (!empty($_GET['type'])) {
            $where[] = 'c.content_type = %s';
            $values[] = sanitize_text_field($_GET['type']);
        }

        // Handle status filter
        if (!empty($_GET['status'])) {
            $where[] = 'c.status = %s';
            $values[] = sanitize_text_field($_GET['status']);
        }

        // Handle organization filter
        if (!empty($_GET['organization'])) {
            $where[] = 'c.organization_id = %d';
            $values[] = intval($_GET['organization']);
        }

        // Handle date range
        if (!empty($_GET['date_from'])) {
            $where[] = 'DATE(c.created_at) >= %s';
            $values[] = sanitize_text_field($_GET['date_from']);
        }
        if (!empty($_GET['date_to'])) {
            $where[] = 'DATE(c.created_at) <= %s';
            $values[] = sanitize_text_field($_GET['date_to']);
        }

        // Handle search
        if (!empty($_GET['s'])) {
            $search = '%' . $wpdb->esc_like($_GET['s']) . '%';
            $where[] = '(c.title LIKE %s OR c.description LIKE %s)';
            $values[] = $search;
            $values[] = $search;
        }

        $where_clause = !empty($where) ? 'WHERE ' . implode(' AND ', $where) : '';

        // Get total items
        $total_items = $wpdb->get_var($wpdb->prepare(
            "SELECT COUNT(*) 
            FROM {$wpdb->prefix}aimagic_contents c
            $where_clause",
            $values
        ));

        // Get items
        $items = $wpdb->get_results($wpdb->prepare(
            "SELECT 
                c.*,
                o.name as organization_name,
                u.user_name as author_name,
                COUNT(cu.id) as usage_count
            FROM {$wpdb->prefix}aimagic_contents c
            LEFT JOIN {$wpdb->prefix}aimagic_organizations o ON c.organization_id = o.id
            LEFT JOIN {$wpdb->prefix}aimagic_user_data u ON c.author_id = u.user_id
            LEFT JOIN {$wpdb->prefix}aimagic_content_usage cu ON c.id = cu.content_id
            $where_clause
            GROUP BY c.id
            ORDER BY c.created_at DESC
            LIMIT %d OFFSET %d",
            array_merge($values, [$per_page, ($current_page - 1) * $per_page])
        ));

        $this->items = $items;

        $this->set_pagination_args([
            'total_items' => $total_items,
            'per_page'    => $per_page,
            'total_pages' => ceil($total_items / $per_page)
        ]);
    }

    public function column_default($item, $column_name) {
        switch ($column_name) {
            case 'preview':
                return $this->get_preview_html($item);
            case 'type':
                return $this->get_type_label($item->content_type);
            case 'organization':
                return esc_html($item->organization_name);
            case 'author':
                return esc_html($item->author_name);
            case 'usage':
                return $this->get_usage_html($item);
            case 'status':
                return $this->get_status_label($item->status);
            case 'created_at':
                return wp_date('Y-m-d H:i:s', strtotime($item->created_at));
            default:
                return print_r($item, true);
        }
    }

    private function get_preview_html($item) {
        switch ($item->content_type) {
            case 'image':
                return sprintf(
                    '<img src="%s" class="preview-thumbnail" alt="%s">',
                    esc_url($item->content_url),
                    esc_attr($item->title)
                );
            case 'video':
                return sprintf(
                    '<video class="preview-thumbnail" poster="%s">
                        <source src="%s" type="video/mp4">
                    </video>',
                    esc_url($item->thumbnail_url),
                    esc_url($item->content_url)
                );
            case 'text':
                return sprintf(
                    '<div class="preview-text">%s</div>',
                    wp_kses_post($item->content_text)
                );
            default:
                return '-';
        }
    }

    private function get_type_label($type) {
        $labels = [
            'text'  => '<span class="type-text">Text</span>',
            'image' => '<span class="type-image">Image</span>',
            'video' => '<span class="type-video">Video</span>'
        ];
        return isset($labels[$type]) ? $labels[$type] : ucfirst($type);
    }

    private function get_usage_html($item) {
        $usage_html = sprintf(
            '<div class="usage-info">
                <span class="usage-count">%s uses</span>
                <div class="generation-info">
                    %ss generation time<br>
                    %s storage
                </div>
            </div>',
            number_format_i18n($item->usage_count),
            number_format($item->generation_time, 2),
            size_format($item->storage_size)
        );

        return $usage_html;
    }

    private function get_status_label($status) {
        return sprintf(
            '<span class="status-%s">%s</span>',
            esc_attr($status),
            ucfirst($status)
        );
    }

    public function column_title($item) {
        $actions = [
            'edit' => sprintf(
                '<a href="%s">Edit</a>',
                admin_url('admin.php?page=aimagic-contents&action=edit&id=' . $item->id)
            ),
            'view' => sprintf(
                '<a href="%s" target="_blank">View</a>',
                esc_url($item->content_url)
            ),
            'download' => sprintf(
                '<a href="%s">Download</a>',
                wp_nonce_url(admin_url('admin.php?page=aimagic-contents&action=download&id=' . $item->id), 'download_content_' . $item->id)
            )
        ];

        if ($item->status !== 'archived') {
            $actions['archive'] = sprintf(
                '<a href="%s">Archive</a>',
                wp_nonce_url(admin_url('admin.php?page=aimagic-contents&action=archive&id=' . $item->id), 'archive_content_' . $item->id)
            );
        }

        return sprintf(
            '%1$s %2$s',
            '<strong>' . esc_html($item->title) . '</strong>',
            $this->row_actions($actions)
        );
    }

    public function column_cb($item) {
        return sprintf(
            '<input type="checkbox" name="contents[]" value="%s" />',
            $item->id
        );
    }

    public function get_bulk_actions() {
        return [
            'archive'  => __('Archive', 'aimagic'),
            'export'   => __('Export', 'aimagic'),
            'delete'   => __('Delete', 'aimagic')
        ];
    }

    public function process_bulk_action() {
        if ('delete' === $this->current_action()) {
            $nonce = esc_attr($_REQUEST['_wpnonce']);
            if (!wp_verify_nonce($nonce, 'bulk-' . $this->_args['plural'])) {
                die('Security check failed');
            }

            $content_ids = isset($_REQUEST['contents']) ? array_map('intval', $_REQUEST['contents']) : array();
            
            if (!empty($content_ids)) {
                global $wpdb;
                foreach ($content_ids as $content_id) {
                    // Get content info
                    $content = $wpdb->get_row($wpdb->prepare(
                        "SELECT * FROM {$wpdb->prefix}aimagic_contents WHERE id = %d",
                        $content_id
                    ));

                    if ($content) {
                        // Delete file from storage
                        if ($content->content_type !== 'text') {
                            $file_path = str_replace(site_url('/'), ABSPATH, $content->content_url);
                            if (file_exists($file_path)) {
                                unlink($file_path);
                            }
                            if ($content->thumbnail_url) {
                                $thumbnail_path = str_replace(site_url('/'), ABSPATH, $content->thumbnail_url);
                                if (file_exists($thumbnail_path)) {
                                    unlink($thumbnail_path);
                                }
                            }
                        }

                        // Delete from database
                        $wpdb->delete(
                            $wpdb->prefix . 'aimagic_contents',
                            ['id' => $content_id],
                            ['%d']
                        );
                        $wpdb->delete(
                            $wpdb->prefix . 'aimagic_content_usage',
                            ['content_id' => $content_id],
                            ['%d']
                        );
                    }
                }
                
                wp_redirect(add_query_arg('message', '3', wp_get_referer()));
                exit;
            }
        }
    }
}

目錄：/www/wwwroot/xart004.heatgroups.top/wp-content/plugins/ai_plateform_v2/files_2025/includes/Admin
檔名：class-admin-organizations-list.php
==================================================
<?php
namespace AIMagic\Admin;

if (!defined('ABSPATH')) exit;

if (!class_exists('WP_List_Table')) {
    require_once(ABSPATH . 'wp-admin/includes/class-wp-list-table.php');
}

class Organizations_List_Table extends \WP_List_Table {
    public function __construct() {
        parent::__construct([
            'singular' => 'organization',
            'plural'   => 'organizations',
            'ajax'     => true
        ]);
    }

    public function get_columns() {
        return [
            'cb'            => '<input type="checkbox" />',
            'name'          => __('Name', 'aimagic'),
            'domain'        => __('Domain', 'aimagic'),
            'plan'          => __('Plan', 'aimagic'),
            'members'       => __('Members', 'aimagic'),
            'storage'       => __('Storage', 'aimagic'),
            'api_usage'     => __('API Usage', 'aimagic'),
            'status'        => __('Status', 'aimagic'),
            'created_at'    => __('Created', 'aimagic')
        ];
    }

    public function prepare_items() {
        global $wpdb;

        $per_page = 20;
        $current_page = $this->get_pagenum();
        
        // Build query
        $where = [];
        $values = [];

        // Handle status filter
        if (!empty($_GET['status'])) {
            $where[] = 'o.status = %s';
            $values[] = sanitize_text_field($_GET['status']);
        }

        // Handle plan filter
        if (!empty($_GET['plan'])) {
            $where[] = 'o.plan = %s';
            $values[] = sanitize_text_field($_GET['plan']);
        }

        // Handle search
        if (!empty($_GET['s'])) {
            $search = '%' . $wpdb->esc_like($_GET['s']) . '%';
            $where[] = '(o.name LIKE %s OR o.domain LIKE %s)';
            $values[] = $search;
            $values[] = $search;
        }

        $where_clause = !empty($where) ? 'WHERE ' . implode(' AND ', $where) : '';

        // Get total items
        $total_items = $wpdb->get_var($wpdb->prepare(
            "SELECT COUNT(*) 
            FROM {$wpdb->prefix}aimagic_organizations o 
            $where_clause",
            $values
        ));

        // Get items
        $items = $wpdb->get_results($wpdb->prepare(
            "SELECT 
                o.*,
                COUNT(DISTINCT m.user_id) as member_count,
                SUM(m.storage_used) as total_storage,
                COUNT(a.id) as api_calls
            FROM {$wpdb->prefix}aimagic_organizations o
            LEFT JOIN {$wpdb->prefix}aimagic_org_members m ON o.id = m.org_id
            LEFT JOIN {$wpdb->prefix}aimagic_api_calls a ON o.id = a.org_id 
                AND a.created_at >= DATE_SUB(NOW(), INTERVAL 30 DAY)
            $where_clause
            GROUP BY o.id
            ORDER BY o.name ASC
            LIMIT %d OFFSET %d",
            array_merge($values, [$per_page, ($current_page - 1) * $per_page])
        ));

        $this->items = $items;

        $this->set_pagination_args([
            'total_items' => $total_items,
            'per_page'    => $per_page,
            'total_pages' => ceil($total_items / $per_page)
        ]);
    }

    public function column_default($item, $column_name) {
        switch ($column_name) {
            case 'domain':
                return '<code>' . esc_html($item->domain) . '</code>';
            case 'plan':
                return $this->get_plan_label($item->plan);
            case 'members':
                return sprintf(
                    '%d / %d',
                    $item->member_count,
                    $item->max_members
                );
            case 'storage':
                return $this->get_storage_usage($item);
            case 'api_usage':
                return $this->get_api_usage($item);
            case 'status':
                return $this->get_status_label($item->status);
            case 'created_at':
                return wp_date('Y-m-d H:i:s', strtotime($item->created_at));
            default:
                return print_r($item, true);
        }
    }

    private function get_plan_label($plan) {
        $labels = [
            'free'       => '<span class="plan-free">Free</span>',
            'standard'   => '<span class="plan-standard">Standard</span>',
            'premium'    => '<span class="plan-premium">Premium</span>',
            'enterprise' => '<span class="plan-enterprise">Enterprise</span>'
        ];
        return isset($labels[$plan]) ? $labels[$plan] : ucfirst($plan);
    }

    private function get_storage_usage($item) {
        $percentage = min(100, ($item->total_storage / $item->storage_limit) * 100);
        return sprintf(
            '<div class="storage-info">%s / %s</div>
            <div class="usage-bar" data-percentage="%d">
                <div class="usage-bar-fill" style="width: %d%%"></div>
            </div>',
            size_format($item->total_storage),
            size_format($item->storage_limit),
            $percentage,
            $percentage
        );
    }

    private function get_api_usage($item) {
        $percentage = min(100, ($item->api_calls / $item->api_limit) * 100);
        return sprintf(
            '<div class="api-info">%s / %s</div>
            <div class="usage-bar" data-percentage="%d">
                <div class="usage-bar-fill" style="width: %d%%"></div>
            </div>',
            number_format_i18n($item->api_calls),
            number_format_i18n($item->api_limit),
            $percentage,
            $percentage
        );
    }

    private function get_status_label($status) {
        return sprintf(
            '<span class="status-%s">%s</span>',
            esc_attr($status),
            ucfirst($status)
        );
    }

    public function column_name($item) {
        $actions = [
            'edit' => sprintf(
                '<a href="%s">Edit</a>',
                admin_url('admin.php?page=aimagic-organizations&action=edit&id=' . $item->id)
            ),
            'view' => sprintf(
                '<a href="%s">View Dashboard</a>',
                admin_url('admin.php?page=aimagic-organizations&action=view&id=' . $item->id)
            )
        ];

        if ($item->status === 'active') {
            $actions['suspend'] = sprintf(
                '<a href="%s" onclick="return confirm(\'%s\');">Suspend</a>',
                wp_nonce_url(admin_url('admin.php?page=aimagic-organizations&action=suspend&id=' . $item->id), 'suspend_org_' . $item->id),
                __('Are you sure you want to suspend this organization?', 'aimagic')
            );
        } else {
            $actions['activate'] = sprintf(
                '<a href="%s">Activate</a>',
                wp_nonce_url(admin_url('admin.php?page=aimagic-organizations&action=activate&id=' . $item->id), 'activate_org_' . $item->id)
            );
        }

        return sprintf(
            '%1$s %2$s',
            '<strong>' . esc_html($item->name) . '</strong>',
            $this->row_actions($actions)
        );
    }

    public function column_cb($item) {
        return sprintf(
            '<input type="checkbox" name="organizations[]" value="%s" />',
            $item->id
        );
    }

    public function get_bulk_actions() {
        return [
            'activate'   => __('Activate', 'aimagic'),
            'suspend'    => __('Suspend', 'aimagic'),
            'delete'     => __('Delete', 'aimagic')
        ];
    }

    public function process_bulk_action() {
        if ('delete' === $this->current_action()) {
            $nonce = esc_attr($_REQUEST['_wpnonce']);
            if (!wp_verify_nonce($nonce, 'bulk-' . $this->_args['plural'])) {
                die('Security check failed');
            }

            $org_ids = isset($_REQUEST['organizations']) ? array_map('intval', $_REQUEST['organizations']) : array();
            
            if (!empty($org_ids)) {
                global $wpdb;
                foreach ($org_ids as $org_id) {
                    // Delete organization and all related data
                    $wpdb->delete(
                        $wpdb->prefix . 'aimagic_organizations',
                        ['id' => $org_id],
                        ['%d']
                    );
                    $wpdb->delete(
                        $wpdb->prefix . 'aimagic_org_members',
                        ['org_id' => $org_id],
                        ['%d']
                    );
                }
                
                wp_redirect(add_query_arg('message', '3', wp_get_referer()));
                exit;
            }
        }
    }
}

目錄：/www/wwwroot/xart004.heatgroups.top/wp-content/plugins/ai_plateform_v2/files_2025/includes/Public
檔名：Shortcodes.php
==================================================
<?php
namespace AIMagic\Public;

class Shortcodes {
    private $current_user;
    private $current_time;

    public function __construct() {
        $this->current_user = 'aimastera069';
        $this->current_time = '2025-03-26 18:40:31';
        
        add_shortcode('aimagic_gallery', array($this, 'render_gallery'));
        add_shortcode('aimagic_user_stats', array($this, 'render_user_stats'));
        add_shortcode('aimagic_latest_content', array($this, 'render_latest_content'));
    }

    /**
     * Render AI-generated content gallery
     */
    public function render_gallery($atts) {
        $atts = shortcode_atts(array(
            'user_id' => 0,
            'limit' => 12,
            'columns' => 3,
            'orderby' => 'date',
            'order' => 'DESC'
        ), $atts);

        // Sanitize attributes
        $limit = absint($atts['limit']);
        $columns = absint($atts['columns']);
        $user_id = absint($atts['user_id']);
        
        // Get gallery items
        $items = $this->get_gallery_items($user_id, $limit, $atts['orderby'], $atts['order']);
        
        if (empty($items)) {
            return '<p class="aimagic-no-content">' . 
                   esc_html__('No content available.', 'ai-magic-publisher') . 
                   '</p>';
        }

        ob_start();
        ?>
        <div class="aimagic-gallery columns-<?php echo esc_attr($columns); ?>">
            <?php foreach ($items as $item): ?>
                <div class="gallery-item" data-id="<?php echo esc_attr($item->ID); ?>">
                    <div class="gallery-item-inner">
                        <?php if ($item->thumbnail_url): ?>
                            <div class="gallery-item-image">
                                <img src="<?php echo esc_url($item->thumbnail_url); ?>"
                                     alt="<?php echo esc_attr($item->post_title); ?>"
                                     loading="lazy">
                            </div>
                        <?php endif; ?>
                        
                        <div class="gallery-item-content">
                            <h3 class="gallery-item-title">
                                <a href="<?php echo esc_url($item->permalink); ?>">
                                    <?php echo esc_html($item->post_title); ?>
                                </a>
                            </h3>
                            
                            <div class="gallery-item-meta">
                                <span class="meta-date">
                                    <?php echo esc_html(mysql2date('F j, Y', $item->post_date)); ?>
                                </span>
                                <span class="meta-platform">
                                    <?php echo esc_html($item->platform); ?>
                                </span>
                            </div>
                        </div>
                    </div>
                </div>
            <?php endforeach; ?>
        </div>
        <?php
        return ob_get_clean();
    }

    /**
     * Render user statistics
     */
    public function render_user_stats($atts) {
        $atts = shortcode_atts(array(
            'user_id' => get_current_user_id(),
            'show_quota' => true,
            'show_history' => true
        ), $atts);

        if (!$atts['user_id']) {
            return '<p class="aimagic-login-required">' . 
                   esc_html__('Please log in to view your statistics.', 'ai-magic-publisher') . 
                   '</p>';
        }

        $user_stats = $this->get_user_stats($atts['user_id']);
        
        ob_start();
        ?>
        <div class="aimagic-user-stats">
            <?php if ($atts['show_quota']): ?>
                <div class="stats-section quota-stats">
                    <h3><?php _e('Usage Quota', 'ai-magic-publisher'); ?></h3>
                    <div class="quota-bar">
                        <?php
                        $quota_percentage = ($user_stats->quota_used / $user_stats->quota_daily) * 100;
                        ?>
                        <div class="quota-progress" style="width: <?php echo esc_attr($quota_percentage); ?>%">
                        </div>
                    </div>
                    <p class="quota-text">
                        <?php
                        printf(
                            __('Used %1$d of %2$d daily requests', 'ai-magic-publisher'),
                            $user_stats->quota_used,
                            $user_stats->quota_daily
                        );
                        ?>
                    </p>
                    <p class="quota-reset">
                        <?php
                        printf(
                            __('Resets at midnight UTC (%s)', 'ai-magic-publisher'),
                            mysql2date('Y-m-d', $user_stats->quota_reset_date)
                        );
                        ?>
                    </p>
                </div>
            <?php endif; ?>

            <?php if ($atts['show_history']): ?>
                <div class="stats-section history-stats">
                    <h3><?php _e('Content History', 'ai-magic-publisher'); ?></h3>
                    <div class="stats-grid">
                        <div class="stat-item">
                            <span class="stat-value"><?php echo esc_html($user_stats->total_content); ?></span>
                            <span class="stat-label"><?php _e('Total Content', 'ai-magic-publisher'); ?></span>
                        </div>
                        <div class="stat-item">
                            <span class="stat-value"><?php echo esc_html($user_stats->total_images); ?></span>
                            <span class="stat-label"><?php _e('Images Processed', 'ai-magic-publisher'); ?></span>
                        </div>
                        <div class="stat-item">
                            <span class="stat-value"><?php echo esc_html($user_stats->total_views); ?></span>
                            <span class="stat-label"><?php _e('Total Views', 'ai-magic-publisher'); ?></span>
                        </div>
                    </div>
                </div>
            <?php endif; ?>
        </div>
        <?php
        return ob_get_clean();
    }

    /**
     * Render latest AI-generated content
     */
    public function render_latest_content($atts) {
        $atts = shortcode_atts(array(
            'limit' => 5,
            'show_thumbnail' => true,
            'show_excerpt' => true,
            'words' => 30
        ), $atts);

        $posts = $this->get_latest_content($atts['limit']);
        
        if (empty($posts)) {
            return '<p class="aimagic-no-content">' . 
                   esc_html__('No content available.', 'ai-magic-publisher') . 
                   '</p>';
        }

        ob_start();
        ?>
        <div class="aimagic-latest-content">
            <?php foreach ($posts as $post): ?>
                <article class="content-item">
                    <?php if ($atts['show_thumbnail'] && has_post_thumbnail($post->ID)): ?>
                        <div class="content-thumbnail">
                            <a href="<?php echo esc_url(get_permalink($post->ID)); ?>">
                                <?php echo get_the_post_thumbnail($post->ID, 'medium'); ?>
                            </a>
                        </div>
                    <?php endif; ?>

                    <div class="content-details">
                        <h3 class="content-title">
                            <a href="<?php echo esc_url(get_permalink($post->ID)); ?>">
                                <?php echo esc_html($post->post_title); ?>
                            </a>
                        </h3>

                        <?php if ($atts['show_excerpt']): ?>
                            <div class="content-excerpt">
                                <?php
                                $excerpt = wp_trim_words(
                                    get_the_excerpt($post),
                                    $atts['words'],
                                    '...'
                                );
                                echo wp_kses_post($excerpt);
                                ?>
                            </div>
                        <?php endif; ?>

                        <div class="content-meta">
                            <span class="meta-date">
                                <?php echo esc_html(mysql2date('F j, Y', $post->post_date)); ?>
                            </span>
                            <?php
                            $platform = get_post_meta($post->ID, '_aimagic_platform', true);
                            if ($platform):
                            ?>
                                <span class="meta-platform">
                                    <?php echo esc_html($platform); ?>
                                </span>
                            <?php endif; ?>
                        </div>
                    </div>
                </article>
            <?php endforeach; ?>
        </div>
        <?php
        return ob_get_clean();
    }

    /**
     * Get gallery items from database
     */
    private function get_gallery_items($user_id, $limit, $orderby, $order) {
        global $wpdb;

        $where = "post_type = 'aimagic_content' AND post_status = 'publish'";
        if ($user_id > 0) {
            $where .= $wpdb->prepare(" AND post_author = %d", $user_id);
        }

        $orderby = sanitize_sql_orderby($orderby . ' ' . $order);
        
        $items = $wpdb->get_results($wpdb->prepare(
            "SELECT p.*, 
                    pm.meta_value as platform 
             FROM {$wpdb->posts} p 
             LEFT JOIN {$wpdb->postmeta} pm ON (p.ID = pm.post_id AND pm.meta_key = '_aimagic_platform') 
             WHERE {$where} 
             ORDER BY {$orderby} 
             LIMIT %d",
            $limit
        ));

        foreach ($items as &$item) {
            $item->permalink = get_permalink($item->ID);
            $item->thumbnail_url = get_the_post_thumbnail_url($item->ID, 'medium');
        }

        return $items;
    }

    /**
     * Get user statistics from database
     */
    private function get_user_stats($user_id) {
        global $wpdb;
        
        $stats = $wpdb->get_row($wpdb->prepare(
            "SELECT u.*, 
                    COUNT(DISTINCT p.ID) as total_content,
                    COUNT(DISTINCT i.id) as total_images,
                    SUM(pm.meta_value) as total_views
             FROM {$wpdb->prefix}aimagic_users u 
             LEFT JOIN {$wpdb->posts} p ON u.wp_user_id = p.post_author 
             LEFT JOIN {$wpdb->prefix}aimagic_images i ON u.id = i.user_id 
             LEFT JOIN {$wpdb->postmeta} pm ON (p.ID = pm.post_id AND pm.meta_key = '_aimagic_views')
             WHERE u.wp_user_id = %d 
             GROUP BY u.id",
            $user_id
        ));

        return $stats;
    }

    /**
     * Get latest AI-generated content
     */
    private function get_latest_content($limit) {
        return get_posts(array(
            'post_type' => 'aimagic_content',
            'posts_per_page' => $limit,
            'orderby' => 'date',
            'order' => 'DESC',
            'post_status' => 'publish'
        ));
    }
}

目錄：/www/wwwroot/xart004.heatgroups.top/wp-content/plugins/ai_plateform_v2/files_2025/includes/Modules/Notification
檔名：NotificationManager.php
==================================================
<?php
namespace AIMagic\Modules\Notification;

class NotificationManager {
    private $line_handler;
    private $wechat_handler;

    public function __construct() {
        $this->line_handler = new LineNotificationHandler();
        $this->wechat_handler = new WeChatNotificationHandler();
    }

    public function send_task_completion_notification($user_id, $post_url) {
        $user = $this->get_user_platform_info($user_id);
        if (!$user) {
            return false;
        }

        $message = sprintf(
            __('Your content has been generated! View it here: %s', 'ai-magic-publisher'),
            $post_url
        );

        switch ($user['platform']) {
            case 'line':
                return $this->line_handler->send_notification($user['platform_user_id'], $message);
            case 'wechat':
                return $this->wechat_handler->send_notification($user['platform_user_id'], $message);
            default:
                return false;
        }
    }

    public function send_task_failure_notification($user_id, $error_message) {
        $user = $this->get_user_platform_info($user_id);
        if (!$user) {
            return false;
        }

        $message = sprintf(
            __('Sorry, there was an error processing your request: %s', 'ai-magic-publisher'),
            $error_message
        );

        switch ($user['platform']) {
            case 'line':
                return $this->line_handler->send_notification($user['platform_user_id'], $message);
            case 'wechat':
                return $this->wechat_handler->send_notification($user['platform_user_id'], $message);
            default:
                return false;
        }
    }

    private function get_user_platform_info($user_id) {
        global $wpdb;
        $table_name = $wpdb->prefix . 'aimagic_users';
        
        return $wpdb->get_row(
            $wpdb->prepare(
                "SELECT platform, platform_user_id FROM {$table_name} WHERE id = %d",
                $user_id
            ),
            ARRAY_A
        );
    }
}

class LineNotificationHandler {
    private $channel_token;

    public function __construct() {
        $this->channel_token = get_option('aimagic_line_channel_token');
    }

    public function send_notification($user_id, $message) {
        $response = wp_remote_post(
            'https://api.line.me/v2/bot/message/push',
            array(
                'headers' => array(
                    'Content-Type' => 'application/json',
                    'Authorization' => 'Bearer ' . $this->channel_token
                ),
                'body' => json_encode(array(
                    'to' => $user_id,
                    'messages' => array(
                        array(
                            'type' => 'text',
                            'text' => $message
                        )
                    )
                ))
            )
        );

        return !is_wp_error($response) && wp_remote_retrieve_response_code($response) === 200;
    }
}

class WeChatNotificationHandler {
    private $app_id;
    private $app_secret;

    public function __construct() {
        $this->app_id = get_option('aimagic_wechat_app_id');
        $this->app_secret = get_option('aimagic_wechat_app_secret');
    }

    public function send_notification($user_id, $message) {
        $access_token = $this->get_access_token();
        if (!$access_token) {
            return false;
        }

        $response = wp_remote_post(
            "https://api.weixin.qq.com/cgi-bin/message/custom/send?access_token={$access_token}",
            array(
                'headers' => array('Content-Type' => 'application/json'),
                'body' => json_encode(array(
                    'touser' => $user_id,
                    'msgtype' => 'text',
                    'text' => array(
                        'content' => $message
                    )
                ))
            )
        );

        return !is_wp_error($response) && wp_remote_retrieve_response_code($response) === 200;
    }

    private function get_access_token() {
        $token = get_transient('aimagic_wechat_access_token');
        if ($token !== false) {
            return $token;
        }

        $response = wp_remote_get(
            "https://api.weixin.qq.com/cgi-bin/token?grant_type=client_credential&appid={$this->app_id}&secret={$this->app_secret}"
        );

        if (is_wp_error($response)) {
            return false;
        }

        $body = json_decode(wp_remote_retrieve_body($response), true);
        if (isset($body['access_token'])) {
            set_transient('aimagic_wechat_access_token', $body['access_token'], 7000);
            return $body['access_token'];
        }

        return false;
    }
}

目錄：/www/wwwroot/xart004.heatgroups.top/wp-content/plugins/ai_plateform_v2/files_2025/includes/Modules/AI
檔名：GPT4Handler.php
==================================================
<?php
namespace AIMagic\Modules\AI;

class GPT4Handler {
    private $api_key;
    private $api_endpoint = 'https://api.openai.com/v1';

    public function __construct() {
        $this->api_key = get_option('aimagic_gpt4_api_key');
    }

    public function analyze_image($image_path) {
        if (!file_exists($image_path)) {
            throw new \Exception(__('Image file not found', 'ai-magic-publisher'));
        }

        $image_data = base64_encode(file_get_contents($image_path));
        
        $response = wp_remote_post(
            $this->api_endpoint . '/chat/completions',
            array(
                'headers' => array(
                    'Authorization' => 'Bearer ' . $this->api_key,
                    'Content-Type' => 'application/json'
                ),
                'body' => json_encode(array(
                    'model' => 'gpt-4-vision-preview',
                    'messages' => array(
                        array(
                            'role' => 'user',
                            'content' => array(
                                array(
                                    'type' => 'text',
                                    'text' => 'Analyze this image in detail and provide key elements, mood, style, and composition.'
                                ),
                                array(
                                    'type' => 'image_url',
                                    'image_url' => array(
                                        'url' => "data:image/jpeg;base64,{$image_data}",
                                        'detail' => 'high'
                                    )
                                )
                            )
                        )
                    ),
                    'max_tokens' => 500
                ))
            )
        );

        if (is_wp_error($response)) {
            throw new \Exception($response->get_error_message());
        }

        $body = json_decode(wp_remote_retrieve_body($response), true);
        
        if (isset($body['error'])) {
            throw new \Exception($body['error']['message']);
        }

        return $body['choices'][0]['message']['content'];
    }

    public function generate_content($analysis) {
        $response = wp_remote_post(
            $this->api_endpoint . '/chat/completions',
            array(
                'headers' => array(
                    'Authorization' => 'Bearer ' . $this->api_key,
                    'Content-Type' => 'application/json'
                ),
                'body' => json_encode(array(
                    'model' => 'gpt-4-turbo-preview',
                    'messages' => array(
                        array(
                            'role' => 'system',
                            'content' => 'You are a creative writer tasked with generating engaging content based on image analysis. Create a title and detailed description that captures the essence and story behind the image.'
                        ),
                        array(
                            'role' => 'user',
                            'content' => "Based on this image analysis, generate a creative title and engaging content:\n\n{$analysis}"
                        )
                    ),
                    'max_tokens' => 1000
                ))
            )
        );

        if (is_wp_error($response)) {
            throw new \Exception($response->get_error_message());
        }

        $body = json_decode(wp_remote_retrieve_body($response), true);
        
        if (isset($body['error'])) {
            throw new \Exception($body['error']['message']);
        }

        $content = $body['choices'][0]['message']['content'];
        
        // Parse the generated content into title and body
        $parts = explode("\n", $content, 2);
        return array(
            'title' => trim(str_replace('Title:', '', $parts[0])),
            'content' => trim($parts[1])
        );
    }

    public function validate_api_key() {
        $response = wp_remote_get(
            $this->api_endpoint . '/models',
            array(
                'headers' => array(
                    'Authorization' => 'Bearer ' . $this->api_key
                )
            )
        );

        return !is_wp_error($response) && wp_remote_retrieve_response_code($response) === 200;
    }
}

目錄：/www/wwwroot/xart004.heatgroups.top/wp-content/plugins/ai_plateform_v2/files_2025/includes/Modules/Task
檔名：TaskManager.php
==================================================
<?php
namespace AIMagic\Modules\Task;

use AIMagic\Modules\AI\GPT4Handler;
use AIMagic\Modules\Publisher\WordPressPublisher;
use AIMagic\Modules\Notification\NotificationManager;

class TaskManager {
    private $table_name;
    private $gpt4_handler;
    private $publisher;
    private $notification_manager;

    public function __construct() {
        global $wpdb;
        $this->table_name = $wpdb->prefix . 'aimagic_tasks';
        $this->gpt4_handler = new GPT4Handler();
        $this->publisher = new WordPressPublisher();
        $this->notification_manager = new NotificationManager();

        add_action('aimagic_process_task', array($this, 'process_task'));
        add_action('init', array($this, 'schedule_tasks'));
    }

    public function schedule_tasks() {
        if (!wp_next_scheduled('aimagic_process_pending_tasks')) {
            wp_schedule_event(time(), 'every_minute', 'aimagic_process_pending_tasks');
        }

        add_action('aimagic_process_pending_tasks', array($this, 'process_pending_tasks'));
    }

    public function create_task($data) {
        global $wpdb;

        $task = array(
            'user_id' => $data['user_id'],
            'tenant_id' => $data['tenant_id'],
            'status' => 'pending',
            'type' => $data['type'],
            'input_data' => $data['input_data'],
            'created_at' => current_time('mysql'),
            'updated_at' => current_time('mysql')
        );

        $wpdb->insert($this->table_name, $task, array(
            '%d', '%d', '%s', '%s', '%s', '%s', '%s'
        ));

        $task_id = $wpdb->insert_id;
        
        if ($task_id) {
            wp_schedule_single_event(time(), 'aimagic_process_task', array($task_id));
        }

        return $task_id;
    }

    public function process_task($task_id) {
        global $wpdb;

        $task = $this->get_task($task_id);
        if (!$task || $task['status'] !== 'pending') {
            return;
        }

        try {
            // Update task status to processing
            $this->update_task_status($task_id, 'processing');

            $input_data = json_decode($task['input_data'], true);
            
            // Process image with GPT-4
            $analysis_result = $this->gpt4_handler->analyze_image($input_data['image_path']);
            
            // Generate creative content
            $content_result = $this->gpt4_handler->generate_content($analysis_result);
            
            // Create WordPress post
            $post_id = $this->publisher->create_post(array(
                'user_id' => $task['user_id'],
                'title' => $content_result['title'],
                'content' => $content_result['content'],
                'image_path' => $input_data['image_path'],
                'metadata' => $analysis_result
            ));

            // Store results
            $output_data = array(
                'analysis' => $analysis_result,
                'content' => $content_result,
                'post_id' => $post_id,
                'post_url' => get_permalink($post_id)
            );

            $this->update_task($task_id, array(
                'status' => 'completed',
                'output_data' => json_encode($output_data)
            ));

            // Send notification
            $this->notification_manager->send_task_completion_notification(
                $task['user_id'],
                $output_data['post_url']
            );

        } catch (\Exception $e) {
            error_log('Task Processing Error: ' . $e->getMessage());
            
            $this->update_task($task_id, array(
                'status' => 'failed',
                'output_data' => json_encode(array(
                    'error' => $e->getMessage()
                ))
            ));

            $this->notification_manager->send_task_failure_notification(
                $task['user_id'],
                $e->getMessage()
            );
        }
    }

    public function process_pending_tasks() {
        global $wpdb;

        $pending_tasks = $wpdb->get_results(
            $wpdb->prepare(
                "SELECT id FROM {$this->table_name} 
                WHERE status = 'pending' 
                AND created_at <= %s 
                ORDER BY created_at ASC 
                LIMIT 10",
                date('Y-m-d H:i:s', strtotime('-5 minutes'))
            ),
            ARRAY_A
        );

        foreach ($pending_tasks as $task) {
            wp_schedule_single_event(time(), 'aimagic_process_task', array($task['id']));
        }
    }

    public function get_task($task_id) {
        global $wpdb;
        return $wpdb->get_row(
            $wpdb->prepare(
                "SELECT * FROM {$this->table_name} WHERE id = %d",
                $task_id
            ),
            ARRAY_A
        );
    }

    public function update_task($task_id, $data) {
        global $wpdb;
        
        $data['updated_at'] = current_time('mysql');
        
        $wpdb->update(
            $this->table_name,
            $data,
            array('id' => $task_id),
            array('%s', '%s', '%s'),
            array('%d')
        );
    }

    public function update_task_status($task_id, $status) {
        $this->update_task($task_id, array('status' => $status));
    }

    public function get_user_tasks($user_id, $status = null, $limit = 10, $offset = 0) {
        global $wpdb;
        
        $where = $wpdb->prepare("WHERE user_id = %d", $user_id);
        if ($status) {
            $where .= $wpdb->prepare(" AND status = %s", $status);
        }

        return $wpdb->get_results(
            $wpdb->prepare(
                "SELECT * FROM {$this->table_name} 
                {$where}
                ORDER BY created_at DESC
                LIMIT %d OFFSET %d",
                $limit,
                $offset
            ),
            ARRAY_A
        );
    }

    public function get_tenant_tasks($tenant_id, $status = null, $limit = 10, $offset = 0) {
        global $wpdb;
        
        $where = $wpdb->prepare("WHERE tenant_id = %d", $tenant_id);
        if ($status) {
            $where .= $wpdb->prepare(" AND status = %s", $status);
        }

        return $wpdb->get_results(
            $wpdb->prepare(
                "SELECT * FROM {$this->table_name} 
                {$where}
                ORDER BY created_at DESC
                LIMIT %d OFFSET %d",
                $limit,
                $offset
            ),
            ARRAY_A
        );
    }
}

目錄：/www/wwwroot/xart004.heatgroups.top/wp-content/plugins/ai_plateform_v2/files_2025/includes/Modules/Webhook
檔名：WeChatWebhookHandler.php
==================================================
<?php
namespace AIMagic\Modules\Webhook;

use AIMagic\Modules\Task\TaskManager;
use AIMagic\Modules\User\UserManager;

class WeChatWebhookHandler {
    private $task_manager;
    private $user_manager;
    private $app_id;
    private $app_secret;

    public function __construct() {
        $this->task_manager = new TaskManager();
        $this->user_manager = new UserManager();
        $this->app_id = get_option('aimagic_wechat_app_id');
        $this->app_secret = get_option('aimagic_wechat_app_secret');
    }

    public function handle_webhook($request) {
        // Handle WeChat verification request
        if ($request->get_method() === 'GET') {
            $echostr = $request->get_param('echostr');
            return new \WP_REST_Response($echostr, 200);
        }

        // Handle incoming messages
        $xml_data = $request->get_body();
        $msg = $this->parse_xml_message($xml_data);

        if (!$msg) {
            return new \WP_Error('invalid_request', 'Invalid XML payload', array('status' => 400));
        }

        try {
            $response_xml = $this->process_message($msg);
            return new \WP_REST_Response($response_xml, 200, array(
                'Content-Type' => 'text/xml; charset=utf-8'
            ));
        } catch (\Exception $e) {
            error_log('WeChat Webhook Error: ' . $e->getMessage());
            return new \WP_Error('processing_error', $e->getMessage(), array('status' => 500));
        }
    }

    private function parse_xml_message($xml_data) {
        libxml_use_internal_errors(true);
        $msg = simplexml_load_string($xml_data);
        
        if (!$msg) {
            return false;
        }

        return array(
            'ToUserName' => (string)$msg->ToUserName,
            'FromUserName' => (string)$msg->FromUserName,
            'CreateTime' => (int)$msg->CreateTime,
            'MsgType' => (string)$msg->MsgType,
            'MsgId' => (string)$msg->MsgId,
            'MediaId' => isset($msg->MediaId) ? (string)$msg->MediaId : '',
            'PicUrl' => isset($msg->PicUrl) ? (string)$msg->PicUrl : ''
        );
    }

    private function process_message($msg) {
        if ($msg['MsgType'] !== 'image') {
            return $this->create_response($msg['FromUserName'], $msg['ToUserName'], 
                __('Please send an image to process.', 'ai-magic-publisher'));
        }

        $user = $this->user_manager->get_user_by_platform('wechat', $msg['FromUserName']);
        
        if (!$user) {
            $user = $this->user_manager->create_user(array(
                'platform' => 'wechat',
                'platform_user_id' => $msg['FromUserName'],
                'tenant_id' => 1 // Default tenant
            ));
        }

        if (!$this->user_manager->check_quota($user['id'])) {
            return $this->create_response($msg['FromUserName'], $msg['ToUserName'],
                __('You have reached your daily quota limit. Please try again tomorrow.', 'ai-magic-publisher'));
        }

        $image_path = $this->download_wechat_image($msg['MediaId']);
        
        if (!$image_path) {
            return $this->create_response($msg['FromUserName'], $msg['ToUserName'],
                __('Failed to process your image. Please try again.', 'ai-magic-publisher'));
        }

        $task = $this->task_manager->create_task(array(
            'user_id' => $user['id'],
            'tenant_id' => $user['tenant_id'],
            'type' => 'image_processing',
            'input_data' => json_encode(array(
                'media_id' => $msg['MediaId'],
                'pic_url' => $msg['PicUrl'],
                'timestamp' => $msg['CreateTime']
            ))
        ));

        return $this->create_response($msg['FromUserName'], $msg['ToUserName'],
            __('Your image is being processed. You will receive the results shortly.', 'ai-magic-publisher'));
    }

    private function download_wechat_image($media_id) {
        $access_token = $this->get_access_token();
        if (!$access_token) {
            return false;
        }

        $response = wp_remote_get(
            "https://api.weixin.qq.com/cgi-bin/media/get?access_token={$access_token}&media_id={$media_id}"
        );

        if (is_wp_error($response)) {
            return false;
        }

        $upload_dir = wp_upload_dir();
        $image_path = $upload_dir['path'] . '/' . $media_id . '.jpg';
        file_put_contents($image_path, wp_remote_retrieve_body($response));

        return $image_path;
    }

    private function get_access_token() {
        $token = get_transient('aimagic_wechat_access_token');
        if ($token !== false) {
            return $token;
        }

        $response = wp_remote_get(
            "https://api.weixin.qq.com/cgi-bin/token?grant_type=client_credential&appid={$this->app_id}&secret={$this->app_secret}"
        );

        if (is_wp_error($response)) {
            return false;
        }

        $body = json_decode(wp_remote_retrieve_body($response), true);
        if (isset($body['access_token'])) {
            set_transient('aimagic_wechat_access_token', $body['access_token'], 7000);
            return $body['access_token'];
        }

        return false;
    }

    private function create_response($to_user, $from_user, $content) {
        $time = time();
        return "<xml>
            <ToUserName><![CDATA[{$to_user}]]></ToUserName>
            <FromUserName><![CDATA[{$from_user}]]></FromUserName>
            <CreateTime>{$time}</CreateTime>
            <MsgType><![CDATA[text]]></MsgType>
            <Content><![CDATA[{$content}]]></Content>
        </xml>";
    }
}

目錄：/www/wwwroot/xart004.heatgroups.top/wp-content/plugins/ai_plateform_v2/files_2025/includes/Modules/Webhook
檔名：LineWebhookHandler.php
==================================================
<?php
namespace AIMagic\Modules\Webhook;

use AIMagic\Modules\Task\TaskManager;
use AIMagic\Modules\User\UserManager;

class LineWebhookHandler {
    private $task_manager;
    private $user_manager;

    public function __construct() {
        $this->task_manager = new TaskManager();
        $this->user_manager = new UserManager();
    }

    public function handle_webhook($request) {
        $body = $request->get_json_params();
        
        if (!isset($body['events']) || !is_array($body['events'])) {
            return new \WP_Error('invalid_request', 'Invalid webhook payload', array('status' => 400));
        }

        foreach ($body['events'] as $event) {
            try {
                $this->process_event($event);
            } catch (\Exception $e) {
                error_log('LINE Webhook Error: ' . $e->getMessage());
            }
        }

        return new \WP_REST_Response(array('status' => 'ok'), 200);
    }

    private function process_event($event) {
        if ($event['type'] === 'message' && $event['message']['type'] === 'image') {
            $user_id = $event['source']['userId'];
            $user = $this->user_manager->get_user_by_platform('line', $user_id);
            
            if (!$user) {
                $user = $this->user_manager->create_user(array(
                    'platform' => 'line',
                    'platform_user_id' => $user_id,
                    'tenant_id' => 1 // Default tenant
                ));
            }

            if ($this->user_manager->check_quota($user['id'])) {
                $image_content = $this->download_line_image(
                    $event['message']['id'],
                    get_option('aimagic_line_channel_token')
                );
                
                if ($image_content) {
                    $task = $this->task_manager->create_task(array(
                        'user_id' => $user['id'],
                        'tenant_id' => $user['tenant_id'],
                        'type' => 'image_processing',
                        'input_data' => json_encode(array(
                            'message_id' => $event['message']['id'],
                            'user_id' => $user_id,
                            'timestamp' => $event['timestamp']
                        ))
                    ));

                    $this->send_line_message($user_id, array(
                        'type' => 'text',
                        'text' => __('Your image is being processed. You will receive the results shortly.', 'ai-magic-publisher')
                    ));
                }
            } else {
                $this->send_line_message($user_id, array(
                    'type' => 'text',
                    'text' => __('You have reached your daily quota limit. Please try again tomorrow.', 'ai-magic-publisher')
                ));
            }
        }
    }

    private function download_line_image($message_id, $channel_token) {
        $response = wp_remote_get(
            "https://api-data.line.me/v2/bot/message/$message_id/content",
            array(
                'headers' => array(
                    'Authorization' => 'Bearer ' . $channel_token
                )
            )
        );

        if (is_wp_error($response)) {
            return false;
        }

        $upload_dir = wp_upload_dir();
        $image_path = $upload_dir['path'] . '/' . $message_id . '.jpg';
        file_put_contents($image_path, wp_remote_retrieve_body($response));

        return $image_path;
    }

    private function send_line_message($user_id, $message) {
        $channel_token = get_option('aimagic_line_channel_token');
        
        wp_remote_post(
            'https://api.line.me/v2/bot/message/push',
            array(
                'headers' => array(
                    'Content-Type' => 'application/json',
                    'Authorization' => 'Bearer ' . $channel_token
                ),
                'body' => json_encode(array(
                    'to' => $user_id,
                    'messages' => array($message)
                ))
            )
        );
    }
}

目錄：/www/wwwroot/xart004.heatgroups.top/wp-content/plugins/ai_plateform_v2/files_2025/includes/Modules/Webhook
檔名：WebhookReceiver.php
==================================================
<?php
namespace AIMagic\Modules\Webhook;

class WebhookReceiver {
    private $line_handler;
    private $wechat_handler;

    public function __construct() {
        $this->line_handler = new LineWebhookHandler();
        $this->wechat_handler = new WeChatWebhookHandler();
        
        add_action('rest_api_init', array($this, 'register_webhook_endpoints'));
    }

    public function register_webhook_endpoints() {
        register_rest_route('aimagic/v1', '/webhook/line', array(
            'methods' => 'POST',
            'callback' => array($this->line_handler, 'handle_webhook'),
            'permission_callback' => array($this, 'verify_line_signature')
        ));

        register_rest_route('aimagic/v1', '/webhook/wechat', array(
            'methods' => array('GET', 'POST'),
            'callback' => array($this->wechat_handler, 'handle_webhook'),
            'permission_callback' => array($this, 'verify_wechat_signature')
        ));
    }

    public function verify_line_signature($request) {
        $signature = $request->get_header('X-Line-Signature');
        if (empty($signature)) {
            return false;
        }

        $channel_secret = get_option('aimagic_line_channel_secret');
        $body = $request->get_body();
        
        $hash = base64_encode(hash_hmac('sha256', $body, $channel_secret, true));
        return hash_equals($hash, $signature);
    }

    public function verify_wechat_signature($request) {
        $signature = $request->get_param('signature');
        $timestamp = $request->get_param('timestamp');
        $nonce = $request->get_param('nonce');
        
        if (empty($signature) || empty($timestamp) || empty($nonce)) {
            return false;
        }

        $token = get_option('aimagic_wechat_token');
        $tmpArr = array($token, $timestamp, $nonce);
        sort($tmpArr, SORT_STRING);
        $tmpStr = implode($tmpArr);
        $tmpStr = sha1($tmpStr);
        
        return $tmpStr === $signature;
    }
}

目錄：/www/wwwroot/xart004.heatgroups.top/wp-content/plugins/ai_plateform_v2/files_2025/includes/Modules/Publisher
檔名：WordPressPublisher.php
==================================================
<?php
namespace AIMagic\Modules\Publisher;

class WordPressPublisher {
    public function __construct() {
        add_action('init', array($this, 'register_post_type'));
        add_action('add_meta_boxes', array($this, 'add_meta_boxes'));
        add_action('save_post', array($this, 'save_meta_data'));
    }

    public function register_post_type() {
        register_post_type('aimagic_content', array(
            'labels' => array(
                'name' => __('AI Generated Content', 'ai-magic-publisher'),
                'singular_name' => __('AI Content', 'ai-magic-publisher'),
                'menu_name' => __('AI Content', 'ai-magic-publisher'),
                'add_new' => __('Add New', 'ai-magic-publisher'),
                'add_new_item' => __('Add New AI Content', 'ai-magic-publisher'),
                'edit_item' => __('Edit AI Content', 'ai-magic-publisher'),
                'view_item' => __('View AI Content', 'ai-magic-publisher'),
                'search_items' => __('Search AI Content', 'ai-magic-publisher'),
            ),
            'public' => true,
            'has_archive' => true,
            'menu_icon' => 'dashicons-analytics',
            'supports' => array('title', 'editor', 'thumbnail', 'author', 'excerpt'),
            'show_in_rest' => true,
            'rewrite' => array('slug' => 'ai-content'),
            'capability_type' => 'post',
            'map_meta_cap' => true,
        ));
    }

    public function create_post($data) {
        // Prepare post data
        $post_data = array(
            'post_title' => wp_strip_all_tags($data['title']),
            'post_content' => wp_kses_post($data['content']),
            'post_status' => 'publish',
            'post_author' => $data['user_id'],
            'post_type' => 'aimagic_content',
            'post_date' => current_time('mysql'),
            'post_date_gmt' => gmdate('Y-m-d H:i:s'),
        );

        // Insert the post
        $post_id = wp_insert_post($post_data);

        if (is_wp_error($post_id)) {
            throw new \Exception($post_id->get_error_message());
        }

        // Handle image attachment
        if (!empty($data['image_path'])) {
            $this->handle_image_attachment($post_id, $data['image_path']);
        }

        // Save metadata
        if (!empty($data['metadata'])) {
            update_post_meta($post_id, '_aimagic_analysis', $data['metadata']);
        }

        // Add custom taxonomies if needed
        $this->add_custom_taxonomies($post_id, $data);

        return $post_id;
    }

    private function handle_image_attachment($post_id, $image_path) {
        require_once(ABSPATH . 'wp-admin/includes/image.php');
        require_once(ABSPATH . 'wp-admin/includes/file.php');
        require_once(ABSPATH . 'wp-admin/includes/media.php');

        // Prepare file array
        $file_array = array(
            'name' => basename($image_path),
            'tmp_name' => $image_path
        );

        // Upload and attach the image
        $attachment_id = media_handle_sideload($file_array, $post_id);

        if (is_wp_error($attachment_id)) {
            throw new \Exception($attachment_id->get_error_message());
        }

        // Set as featured image
        set_post_thumbnail($post_id, $attachment_id);

        // Clean up the temporary file
        if (file_exists($image_path)) {
            unlink($image_path);
        }
    }

    private function add_custom_taxonomies($post_id, $data) {
        // Extract keywords from metadata for taxonomies
        if (!empty($data['metadata'])) {
            $analysis = is_string($data['metadata']) ? 
                       json_decode($data['metadata'], true) : 
                       $data['metadata'];

            if (!empty($analysis['keywords'])) {
                wp_set_post_terms($post_id, $analysis['keywords'], 'aimagic_tags');
            }

            if (!empty($analysis['category'])) {
                wp_set_post_terms($post_id, array($analysis['category']), 'aimagic_category');
            }
        }
    }

    public function add_meta_boxes() {
        add_meta_box(
            'aimagic_analysis_meta_box',
            __('AI Analysis Results', 'ai-magic-publisher'),
            array($this, 'render_analysis_meta_box'),
            'aimagic_content',
            'normal',
            'high'
        );
    }

    public function render_analysis_meta_box($post) {
        $analysis = get_post_meta($post->ID, '_aimagic_analysis', true);
        if (empty($analysis)) {
            echo '<p>' . __('No AI analysis data available.', 'ai-magic-publisher') . '</p>';
            return;
        }

        echo '<div class="aimagic-analysis-data">';
        if (is_string($analysis)) {
            $analysis = json_decode($analysis, true);
        }

        foreach ($analysis as $key => $value) {
            echo '<div class="aimagic-analysis-item">';
            echo '<strong>' . esc_html(ucfirst(str_replace('_', ' ', $key))) . ':</strong> ';
            echo '<span>' . esc_html($value) . '</span>';
            echo '</div>';
        }
        echo '</div>';
    }

    public function save_meta_data($post_id) {
        if (defined('DOING_AUTOSAVE') && DOING_AUTOSAVE) {
            return;
        }

        if (!current_user_can('edit_post', $post_id)) {
            return;
        }

        if (isset($_POST['_aimagic_analysis'])) {
            update_post_meta(
                $post_id,
                '_aimagic_analysis',
                sanitize_text_field($_POST['_aimagic_analysis'])
            );
        }
    }
}

目錄：/www/wwwroot/xart004.heatgroups.top/wp-content/plugins/ai_plateform_v2/files_2025/includes/Core
檔名：ErrorHandler.php
==================================================
<?php
namespace AIMagic\Core;

class ErrorHandler {
    private $log_path;
    private static $instance = null;

    private function __construct() {
        $upload_dir = wp_upload_dir();
        $this->log_path = $upload_dir['basedir'] . '/aimagic-logs';
        
        if (!file_exists($this->log_path)) {
            wp_mkdir_p($this->log_path);
        }

        // Protect log directory
        file_put_contents($this->log_path . '/.htaccess', 'deny from all');
    }

    public static function getInstance() {
        if (self::$instance === null) {
            self::$instance = new self();
        }
        return self::$instance;
    }

    public function log_error($error, $context = array()) {
        $timestamp = current_time('mysql');
        $log_entry = sprintf(
            "[%s] %s\nContext: %s\n",
            $timestamp,
            $error instanceof \Exception ? $error->getMessage() : $error,
            json_encode($context)
        );

        $log_file = $this->log_path . '/error-' . date('Y-m') . '.log';
        error_log($log_entry, 3, $log_file);

        // Notify admin if error is critical
        if ($this->is_critical_error($error)) {
            $this->notify_admin($error, $context);
        }
    }

    public function log_api_request($endpoint, $request_data, $response, $status) {
        $log_entry = sprintf(
            "[%s] API Request\nEndpoint: %s\nRequest: %s\nResponse: %s\nStatus: %s\n",
            current_time('mysql'),
            $endpoint,
            json_encode($request_data),
            json_encode($response),
            $status
        );

        $log_file = $this->log_path . '/api-' . date('Y-m') . '.log';
        error_log($log_entry, 3, $log_file);
    }

    private function is_critical_error($error) {
        $critical_patterns = array(
            'database connection',
            'api key invalid',
            'quota exceeded',
            'authentication failed'
        );

        $error_message = $error instanceof \Exception ? 
                        $error->getMessage() : 
                        (string)$error;

        foreach ($critical_patterns as $pattern) {
            if (stripos($error_message, $pattern) !== false) {
                return true;
            }
        }

        return false;
    }

    private function notify_admin($error, $context) {
        $admin_email = get_option('admin_email');
        $site_name = get_bloginfo('name');

        $subject = sprintf('[%s] Critical Error Alert', $site_name);
        $message = sprintf(
            "A critical error occurred on your site:\n\nError: %s\n\nContext: %s\n\nTimestamp: %s",
            $error instanceof \Exception ? $error->getMessage() : $error,
            json_encode($context),
            current_time('mysql')
        );

        wp_mail($admin_email, $subject, $message);
    }
}

目錄：/www/wwwroot/xart004.heatgroups.top/wp-content/plugins/ai_plateform_v2/files_2025/includes/Core
檔名：ImageHandler.php
==================================================
<?php
namespace AIMagic\Core;

class ImageHandler {
    private $error_handler;
    private $logger;
    private static $instance = null;

    private function __construct() {
        $this->error_handler = ErrorHandler::getInstance();
        $this->logger = Logger::getInstance();
    }

    public static function getInstance() {
        if (self::$instance === null) {
            self::$instance = new self();
        }
        return self::$instance;
    }

    public function downloadImage($message_id) {
        $this->logger->logme("Downloading image with message ID: $message_id");
        
        try {
            $access_token = get_option('aimagic_line_access_token');
            if (!$access_token) {
                throw new \Exception('LINE access token not found');
            }

            $response = wp_remote_get("https://api-data.line.me/v2/bot/message/$message_id/content", [
                'headers' => [
                    'Authorization' => 'Bearer ' . $access_token
                ]
            ]);

            if (is_wp_error($response)) {
                throw new \Exception('Failed to download image: ' . $response->get_error_message());
            }

            $image_data = wp_remote_retrieve_body($response);
            if (empty($image_data)) {
                throw new \Exception('Empty image data received');
            }

            $upload_dir = wp_upload_dir();
            $image_path = $upload_dir['path'] . '/' . $message_id . '.jpg';
            
            if (file_put_contents($image_path, $image_data) === false) {
                throw new \Exception('Failed to save image file');
            }

            return $image_path;

        } catch (\Exception $e) {
            $this->error_handler->log_error($e, array(
                'component' => 'image_handler',
                'operation' => 'downloadImage',
                'message_id' => $message_id
            ));
            return false;
        }
    }

    public function attachQRCodeToImage($image_path, $qr_code_path) {
        $this->logger->logme("Attaching QR code to image: $image_path");
        
        try {
            // Load the original image
            $image = imagecreatefromstring(file_get_contents($image_path));
            if (!$image) {
                throw new \Exception('Failed to load original image');
            }

            // Load the QR code
            $qr = imagecreatefromstring(file_get_contents($qr_code_path));
            if (!$qr) {
                throw new \Exception('Failed to load QR code');
            }

            // Get dimensions
            $img_width = imagesx($image);
            $img_height = imagesy($image);
            $qr_width = imagesx($qr);
            $qr_height = imagesy($qr);

            // Calculate position (bottom right corner)
            $x = $img_width - $qr_width - 10;
            $y = $img_height - $qr_height - 10;

            // Merge images
            imagecopy($image, $qr, $x, $y, 0, 0, $qr_width, $qr_height);

            // Save the result
            $output_path = $image_path . '_with_qr.jpg';
            imagejpeg($image, $output_path, 90);

            // Clean up
            imagedestroy($image);
            imagedestroy($qr);

            return $output_path;

        } catch (\Exception $e) {
            $this->error_handler->log_error($e, array(
                'component' => 'image_handler',
                'operation' => 'attachQRCodeToImage',
                'image_path' => $image_path,
                'qr_code_path' => $qr_code_path
            ));
            return false;
        }
    }

    public function saveQRCode($user_id) {
        $this->logger->logme("Generating QR code for user: $user_id");
        
        try {
            $qr_content = "HWAIS-" . $user_id;
            $qr_url = get_option('aimagic_qr_api_url') . urlencode($qr_content);

            $response = wp_remote_get($qr_url);
            if (is_wp_error($response)) {
                throw new \Exception('Failed to generate QR code: ' . $response->get_error_message());
            }

            $qr_data = wp_remote_retrieve_body($response);
            $upload_dir = wp_upload_dir();
            $qr_path = $upload_dir['path'] . '/qr_' . $user_id . '.png';

            if (file_put_contents($qr_path, $qr_data) === false) {
                throw new \Exception('Failed to save QR code file');
            }

            return $qr_path;

        } catch (\Exception $e) {
            $this->error_handler->log_error($e, array(
                'component' => 'image_handler',
                'operation' => 'saveQRCode',
                'user_id' => $user_id
            ));
            return false;
        }
    }
}

目錄：/www/wwwroot/xart004.heatgroups.top/wp-content/plugins/ai_plateform_v2/files_2025/includes/Core
檔名：RateLimiter.php
==================================================
<?php
namespace AIMagic\Core;

class RateLimiter {
    private $cache;
    private $error_handler;

    public function __construct() {
        $this->cache = new Cache();
        $this->error_handler = ErrorHandler::getInstance();
    }

    public function check_rate_limit($key, $max_attempts, $decay_minutes = 1) {
        $key = $this->get_cache_key($key);
        
        try {
            $attempts = $this->get_attempts($key);
            
            if ($attempts >= $max_attempts) {
                return false;
            }

            $this->increment_attempts($key, $decay_minutes);
            return true;
        } catch (\Exception $e) {
            $this->error_handler->log_error($e, array(
                'component' => 'rate_limiter',
                'key' => $key
            ));
            return false;
        }
    }

    public function get_attempts($key) {
        $key = $this->get_cache_key($key);
        return (int)$this->cache->get($key) ?: 0;
    }

    public function clear($key) {
        $key = $this->get_cache_key($key);
        return $this->cache->delete($key);
    }

    private function increment_attempts($key, $decay_minutes) {
        $attempts = $this->get_attempts($key);
        return $this->cache->set($key, $attempts + 1, $decay_minutes * 60);
    }

    private function get_cache_key($key) {
        return 'rate_limit:' . $key;
    }
}

目錄：/www/wwwroot/xart004.heatgroups.top/wp-content/plugins/ai_plateform_v2/files_2025/includes/Core
檔名：SystemHealth.php
==================================================
<?php
namespace AIMagic\Core;

class SystemHealth {
    private $error_handler;
    private static $instance = null;

    private function __construct() {
        $this->error_handler = ErrorHandler::getInstance();
    }

    public static function getInstance() {
        if (self::$instance === null) {
            self::$instance = new self();
        }
        return self::$instance;
    }

    public function check_system_health() {
        $health_status = array(
            'database' => $this->check_database_health(),
            'api_connections' => $this->check_api_connections(),
            'file_permissions' => $this->check_file_permissions(),
            'queue_status' => $this->check_queue_status(),
            'memory_usage' => $this->check_memory_usage()
        );

        return $health_status;
    }

    private function check_database_health() {
        global $wpdb;

        try {
            // Check database connectivity
            $wpdb->get_var("SELECT 1");

            // Check required tables
            $required_tables = array(
                $wpdb->prefix . 'aimagic_tasks',
                $wpdb->prefix . 'aimagic_users',
                $wpdb->prefix . 'aimagic_tenants'
            );

            $missing_tables = array();
            foreach ($required_tables as $table) {
                if (!$wpdb->get_var($wpdb->prepare("SHOW TABLES LIKE %s", $table))) {
                    $missing_tables[] = $table;
                }
            }

            return array(
                'status' => empty($missing_tables) ? 'healthy' : 'warning',
                'message' => empty($missing_tables) ? 'Database is healthy' : 'Missing tables: ' . implode(', ', $missing_tables)
            );
        } catch (\Exception $e) {
            $this->error_handler->log_error($e, array('component' => 'database_health'));
            return array(
                'status' => 'error',
                'message' => $e->getMessage()
            );
        }
    }

    private function check_api_connections() {
        $api_endpoints = array(
            'gpt4' => get_option('aimagic_gpt4_api_key'),
            'line' => get_option('aimagic_line_channel_token'),
            'wechat' => get_option('aimagic_wechat_app_id')
        );

        $status = array();
        foreach ($api_endpoints as $service => $key) {
            if (empty($key)) {
                $status[$service] = array(
                    'status' => 'warning',
                    'message' => 'API key not configured'
                );
                continue;
            }

            try {
                // Test API connection
                $response = $this->test_api_connection($service);
                $status[$service] = array(
                    'status' => 'healthy',
                    'message' => 'API connection successful'
                );
            } catch (\Exception $e) {
                $this->error_handler->log_error($e, array('component' => 'api_connection', 'service' => $service));
                $status[$service] = array(
                    'status' => 'error',
                    'message' => $e->getMessage()
                );
            }
        }

        return $status;
    }

    private function check_file_permissions() {
        $paths_to_check = array(
            AIMAGIC_PLUGIN_DIR . 'uploads' => '0755',
            AIMAGIC_PLUGIN_DIR . 'cache' => '0755',
            AIMAGIC_PLUGIN_DIR . 'logs' => '0755'
        );

        $status = array();
        foreach ($paths_to_check as $path => $required_perms) {
            if (!file_exists($path)) {
                wp_mkdir_p($path);
            }

            $actual_perms = substr(sprintf('%o', fileperms($path)), -4);
            $status[$path] = array(
                'status' => $actual_perms == $required_perms ? 'healthy' : 'warning',
                'message' => sprintf(
                    'Required: %s, Actual: %s',
                    $required_perms,
                    $actual_perms
                )
            );
        }

        return $status;
    }

    private function check_queue_status() {
        global $wpdb;

        $queue_stats = $wpdb->get_results("
            SELECT status, COUNT(*) as count
            FROM {$wpdb->prefix}aimagic_tasks
            GROUP BY status
        ");

        return array(
            'status' => 'healthy',
            'message' => 'Queue processing normally',
            'stats' => $queue_stats
        );
    }

    private function check_memory_usage() {
        $memory_limit = ini_get('memory_limit');
        $memory_usage = memory_get_usage(true);
        $memory_peak = memory_get_peak_usage(true);

        return array(
            'status' => ($memory_usage / $this->convert_to_bytes($memory_limit) < 0.8) ? 'healthy' : 'warning',
            'message' => sprintf(
                'Memory Usage: %s / %s (Peak: %s)',
                $this->format_bytes($memory_usage),
                $memory_limit,
                $this->format_bytes($memory_peak)
            )
        );
    }

    private function convert_to_bytes($value) {
        $unit = strtolower(substr($value, -1));
        $value = (int)$value;
        
        switch ($unit) {
            case 'g':
                $value *= 1024;
            case 'm':
                $value *= 1024;
            case 'k':
                $value *= 1024;
        }
        
        return $value;
    }

    private function format_bytes($bytes) {
        $units = array('B', 'KB', 'MB', 'GB');
        $bytes = max($bytes, 0);
        $pow = floor(($bytes ? log($bytes) : 0) / log(1024));
        $pow = min($pow, count($units) - 1);
        
        return round($bytes / pow(1024, $pow), 2) . ' ' . $units[$pow];
    }

    private function test_api_connection($service) {
        // Implement API connection tests for each service
        switch ($service) {
            case 'gpt4':
                // Test GPT-4 API connection
                break;
            case 'line':
                // Test LINE API connection
                break;
            case 'wechat':
                // Test WeChat API connection
                break;
        }
    }
}

目錄：/www/wwwroot/xart004.heatgroups.top/wp-content/plugins/ai_plateform_v2/files_2025/includes/Core
檔名：NodeStatusReporter.php
==================================================
<?php
namespace AIMagic\Core;

class NodeStatusReporter {
    private $error_handler;
    private $logger;
    private static $instance = null;

    private function __construct() {
        $this->error_handler = ErrorHandler::getInstance();
        $this->logger = Logger::getInstance();
    }

    public static function getInstance() {
        if (self::$instance === null) {
            self::$instance = new self();
        }
        return self::$instance;
    }

    public function reportStatus($machine_id, $status, $timestamp = null) {
        global $wpdb;
        
        if (!$timestamp) {
            $timestamp = current_time('mysql');
        }

        try {
            // Update machine_status table
            $result = $wpdb->replace(
                $wpdb->prefix . 'aimagic_machine_status',
                [
                    'machine_id' => $machine_id,
                    'status' => $status,
                    'timestamp' => $timestamp
                ],
                ['%s', '%s', '%s']
            );

            if ($result === false) {
                throw new \Exception($wpdb->last_error);
            }

            // Log to machine_status_log
            $log_result = $wpdb->insert(
                $wpdb->prefix . 'aimagic_machine_status_log',
                [
                    'machine_id' => $machine_id,
                    'status' => $status,
                    'timestamp' => $timestamp
                ],
                ['%s', '%s', '%s']
            );

            if ($log_result === false) {
                throw new \Exception($wpdb->last_error);
            }

            // Clean up old logs (keep last 200 entries)
            $this->cleanupOldLogs();

            return true;

        } catch (\Exception $e) {
            $this->error_handler->log_error($e, [
                'component' => 'node_status_reporter',
                'operation' => 'reportStatus',
                'machine_id' => $machine_id,
                'status' => $status
            ]);
            return false;
        }
    }

    private function cleanupOldLogs() {
        global $wpdb;
        
        $sql = "DELETE FROM {$wpdb->prefix}aimagic_machine_status_log 
                WHERE id NOT IN (
                    SELECT id FROM (
                        SELECT id 
                        FROM {$wpdb->prefix}aimagic_machine_status_log 
                        ORDER BY timestamp DESC 
                        LIMIT 200
                    ) AS last_200
                )";
        
        $wpdb->query($sql);
    }

    public function reportError($machine_id, $error_message) {
        global $wpdb;
        
        try {
            $result = $wpdb->insert(
                $wpdb->prefix . 'aimagic_machine_errors',
                [
                    'machine_id' => $machine_id,
                    'error_message' => $error_message,
                    'timestamp' => current_time('mysql')
                ],
                ['%s', '%s', '%s']
            );

            if ($result === false) {
                throw new \Exception($wpdb->last_error);
            }

            return true;

        } catch (\Exception $e) {
            $this->error_handler->log_error($e, [
                'component' => 'node_status_reporter',
                'operation' => 'reportError',
                'machine_id' => $machine_id
            ]);
            return false;
        }
    }
}

目錄：/www/wwwroot/xart004.heatgroups.top/wp-content/plugins/ai_plateform_v2/files_2025/includes/Core
檔名：SettingsManager.php
==================================================
<?php
namespace AIMagic\Core;

class SettingsManager {
    private static $instance = null;
    private $logger;
    private $error_handler;

    const SETTINGS_KEY = 'aimagic_settings';

    private $default_settings = [
        'API_KEYS' => [
            'line_access_token' => '',
            'openai_api_key' => ''
        ],
        'DATABASE' => [
            'db_host' => '',
            'db_user' => '',
            'db_password' => '',
            'db_name' => ''
        ],
        'URLS' => [
            'qr_code_url' => 'https://api.qrserver.com/v1/create-qr-code/?size=150x150&data=',
            'line_image_url_base' => '',
            'store_url' => ''
        ],
        'USER_PROMPTS' => [
            'default_prompt' => 'AI Magic for image generation'
        ],
        'SYSTEM' => [
            'cache_expiry' => 3600,
            'task_timeout' => 300,
            'max_retries' => 3,
            'default_daily_quota' => 2,
            'default_gpu_level' => 1,
            'system_status' => 'active'
        ]
    ];

    private function __construct() {
        $this->logger = Logger::getInstance();
        $this->error_handler = ErrorHandler::getInstance();
    }

    public static function getInstance() {
        if (self::$instance === null) {
            self::$instance = new self();
        }
        return self::$instance;
    }

    public function init() {
        add_action('admin_menu', array($this, 'add_settings_page'));
        add_action('admin_init', array($this, 'register_settings'));
    }

    public function add_settings_page() {
        add_submenu_page(
            'aimagic-main-menu',
            __('Settings', 'ai-magic'),
            __('Settings', 'ai-magic'),
            'manage_options',
            'aimagic-settings',
            array($this, 'render_settings_page')
        );
    }

    public function register_settings() {
        register_setting(self::SETTINGS_KEY, self::SETTINGS_KEY);

        // API Settings Section
        add_settings_section(
            'aimagic_api_settings',
            __('API Settings', 'ai-magic'),
            array($this, 'render_api_section'),
            'aimagic-settings'
        );

        // Database Settings Section
        add_settings_section(
            'aimagic_db_settings',
            __('Database Settings', 'ai-magic'),
            array($this, 'render_db_section'),
            'aimagic-settings'
        );

        // URL Settings Section
        add_settings_section(
            'aimagic_url_settings',
            __('URL Settings', 'ai-magic'),
            array($this, 'render_url_section'),
            'aimagic-settings'
        );

        // System Settings Section
        add_settings_section(
            'aimagic_system_settings',
            __('System Settings', 'ai-magic'),
            array($this, 'render_system_section'),
            'aimagic-settings'
        );
    }

    public function render_settings_page() {
        if (!current_user_can('manage_options')) {
            wp_die(__('You do not have sufficient permissions to access this page.'));
        }

        ?>
        <div class="wrap">
            <h2><?php echo __('AI Magic Settings', 'ai-magic'); ?></h2>
            <form method="post" action="options.php">
                <?php
                settings_fields(self::SETTINGS_KEY);
                do_settings_sections('aimagic-settings');
                submit_button();
                ?>
            </form>
        </div>
        <?php
    }

    public function render_api_section() {
        $settings = get_option(self::SETTINGS_KEY, $this->default_settings);
        ?>
        <table class="form-table">
            <tr>
                <th scope="row"><?php echo __('LINE Access Token', 'ai-magic'); ?></th>
                <td>
                    <input type="text" 
                           name="<?php echo self::SETTINGS_KEY; ?>[API_KEYS][line_access_token]" 
                           value="<?php echo esc_attr($settings['API_KEYS']['line_access_token']); ?>" 
                           class="regular-text" />
                </td>
            </tr>
            <tr>
                <th scope="row"><?php echo __('OpenAI API Key', 'ai-magic'); ?></th>
                <td>
                    <input type="password" 
                           name="<?php echo self::SETTINGS_KEY; ?>[API_KEYS][openai_api_key]" 
                           value="<?php echo esc_attr($settings['API_KEYS']['openai_api_key']); ?>" 
                           class="regular-text" />
                </td>
            </tr>
        </table>
        <?php
    }

    public function save_settings($settings) {
        if (!current_user_can('manage_options')) {
            return false;
        }

        try {
            $merged_settings = wp_parse_args($settings, $this->default_settings);
            update_option(self::SETTINGS_KEY, $merged_settings);
            
            $this->logger->logme("Settings updated by user: " . get_current_user_id());
            return true;

        } catch (\Exception $e) {
            $this->error_handler->log_error($e, array(
                'component' => 'settings_manager',
                'operation' => 'save_settings'
            ));
            return false;
        }
    }

    public function get_setting($section, $key = null) {
        $settings = get_option(self::SETTINGS_KEY, $this->default_settings);
        
        if ($key === null) {
            return isset($settings[$section]) ? $settings[$section] : null;
        }
        
        return isset($settings[$section][$key]) ? $settings[$section][$key] : null;
    }
}

目錄：/www/wwwroot/xart004.heatgroups.top/wp-content/plugins/ai_plateform_v2/files_2025/includes/Core
檔名：ApiController.php
==================================================
<?php
namespace AIMagic\Core;

class ApiController {
    private static $instance = null;
    private $error_handler;
    private $node_manager;
    private $task_manager;
    
    private function __construct() {
        $this->error_handler = ErrorHandler::getInstance();
        $this->node_manager = NodeManager::instance();
        $this->task_manager = TaskManager::instance();
        
        add_action('rest_api_init', array($this, 'register_routes'));
    }

    public static function instance() {
        if (self::$instance === null) {
            self::$instance = new self();
        }
        return self::$instance;
    }

    public function register_routes() {
        // Node endpoints
        register_rest_route('aimagic/v1', '/nodes/register', array(
            'methods' => 'POST',
            'callback' => array($this, 'register_node'),
            'permission_callback' => '__return_true'
        ));
        
        register_rest_route('aimagic/v1', '/nodes/heartbeat', array(
            'methods' => 'POST',
            'callback' => array($this, 'update_node_heartbeat'),
            'permission_callback' => array($this, 'verify_node_auth')
        ));

        // Task endpoints
        register_rest_route('aimagic/v1', '/tasks/create', array(
            'methods' => 'POST',
            'callback' => array($this, 'create_task'),
            'permission_callback' => array($this, 'verify_admin')
        ));
        
        register_rest_route('aimagic/v1', '/tasks/pull', array(
            'methods' => 'POST',
            'callback' => array($this, 'pull_task'),
            'permission_callback' => array($this, 'verify_node_auth')
        ));
        
        register_rest_route('aimagic/v1', '/tasks/update', array(
            'methods' => 'POST',
            'callback' => array($this, 'update_task'),
            'permission_callback' => array($this, 'verify_node_auth')
        ));

        // Webhook endpoints
        register_rest_route('aimagic/v1', '/webhook/line', array(
            'methods' => 'POST',
            'callback' => array($this, 'handle_line_webhook'),
            'permission_callback' => '__return_true'
        ));
        
        register_rest_route('aimagic/v1', '/webhook/wechat', array(
            'methods' => 'POST',
            'callback' => array($this, 'handle_wechat_webhook'),
            'permission_callback' => '__return_true'
        ));
    }

    public function verify_admin($request) {
        return current_user_can('manage_options');
    }

    public function verify_node_auth($request) {
        $headers = $request->get_headers();
        if (!isset($headers['authorization'][0])) {
            return false;
        }
        
        $auth_parts = explode(' ', $headers['authorization'][0]);
        if (count($auth_parts) !== 2 || strtolower($auth_parts[0]) !== 'bearer') {
            return false;
        }
        
        $auth_token = $auth_parts[1];
        $node_id = $request->get_param('node_id');
        
        return $this->node_manager->validate_node($node_id, $auth_token);
    }

    public function register_node($request) {
        $node_type = $request->get_param('node_type');
        if (!$node_type) {
            return new \WP_Error('invalid_request', 'Node type is required', array('status' => 400));
        }
        
        $result = $this->node_manager->register_node($node_type);
        if (!$result) {
            return new \WP_Error('registration_failed', 'Failed to register node', array('status' => 500));
        }
        
        return new \WP_REST_Response($result, 200);
    }

    public function update_node_heartbeat($request) {
        $node_id = $request->get_param('node_id');
        $result = $this->node_manager->update_heartbeat($node_id);
        
        return new \WP_REST_Response(array('success' => $result), 200);
    }

    public function create_task($request) {
        $content_type = $request->get_param('content_type');
        $content_payload = $request->get_param('content_payload');
        $webhook_url = $request->get_param('webhook_url');
        
        if (!$content_type || !$content_payload) {
            return new \WP_Error('invalid_request', 'Content type and payload are required', array('status' => 400));
        }
        
        $task_id = $this->task_manager->create_task(array(
            'content_type' => $content_type,
            'content_payload' => $content_payload,
            'webhook_url' => $webhook_url
        ));
        
        if (!$task_id) {
            return new \WP_Error('task_creation_failed', 'Failed to create task', array('status' => 500));
        }
        
        return new \WP_REST_Response(array('task_id' => $task_id), 200);
    }

    public function pull_task($request) {
        $node_id = $request->get_param('node_id');
        $node_type = $request->get_param('node_type');
        
        $task = $this->task_manager->get_next_task($node_type);
        if (!$task) {
            return new \WP_REST_Response(null, 204);
        }
        
        return new \WP_REST_Response($task, 200);
    }

    public function update_task($request) {
        $task_id = $request->get_param('task_id');
        $status = $request->get_param('status');
        $result_url = $request->get_param('result_url');
        $error_message = $request->get_param('error_message');
        
        if (!$task_id || !$status) {
            return new \WP_Error('invalid_request', 'Task ID and status are required', array('status' => 400));
        }
        
        $result = $this->task_manager->update_task($task_id, array(
            'status' => $status,
            'result_url' => $result_url,
            'error_message' => $error_message
        ));
        
        if (!$result) {
            return new \WP_Error('update_failed', 'Failed to update task', array('status' => 500));
        }
        
        return new \WP_REST_Response(array('success' => true), 200);
    }

    public function handle_line_webhook($request) {
        $body = $request->get_body();
        $signature = $request->get_header('x-line-signature');
        
        // Verify LINE signature
        if (!$this->verify_line_signature($body, $signature)) {
            return new \WP_Error('invalid_signature', 'Invalid LINE signature', array('status' => 403));
        }
        
        $events = json_decode($body, true);
        if (!$events || !isset($events['events'])) {
            return new \WP_REST_Response(array('success' => true), 200);
        }
        
        foreach ($events['events'] as $event) {
            $this->process_line_event($event);
        }
        
        return new \WP_REST_Response(array('success' => true), 200);
    }

    public function handle_wechat_webhook($request) {
        $signature = $request->get_param('signature');
        $timestamp = $request->get_param('timestamp');
        $nonce = $request->get_param('nonce');
        $body = $request->get_body();
        
        // Verify WeChat signature
        if (!$this->verify_wechat_signature($signature, $timestamp, $nonce)) {
            return new \WP_Error('invalid_signature', 'Invalid WeChat signature', array('status' => 403));
        }
        
        $xml = simplexml_load_string($body);
        if (!$xml) {
            return new \WP_REST_Response(array('success' => true), 200);
        }
        
        $this->process_wechat_message($xml);
        
        return new \WP_REST_Response(array('success' => true), 200);
    }

    private function verify_line_signature($body, $signature) {
        $channel_secret = get_option('aimagic_line_channel_secret');
        if (!$channel_secret) {
            return false;
        }
        
        $hash = base64_encode(hash_hmac('sha256', $body, $channel_secret, true));
        return $hash === $signature;
    }

    private function verify_wechat_signature($signature, $timestamp, $nonce) {
        $token = get_option('aimagic_wechat_token');
        if (!$token) {
            return false;
        }
        
        $tmpArr = array($token, $timestamp, $nonce);
        sort($tmpArr, SORT_STRING);
        $tmpStr = implode($tmpArr);
        $tmpStr = sha1($tmpStr);
        
        return $tmpStr === $signature;
    }

    private function process_line_event($event) {
        if ($event['type'] !== 'message' || $event['message']['type'] !== 'image') {
            return;
        }
        
        $user_id = $event['source']['userId'];
        $message_id = $event['message']['id'];
        $reply_token = $event['replyToken'];
        
        // Create task for image processing
        $this->task_manager->create_task(array(
            'content_type' => 'line_image',
            'content_payload' => json_encode(array(
                'message_id' => $message_id,
                'user_id' => $user_id,
                'reply_token' => $reply_token
            )),
            'webhook_url' => site_url('wp-json/aimagic/v1/webhook/line/callback')
        ));
    }

    private function process_wechat_message($xml) {
        if ($xml->MsgType != 'image') {
            return;
        }
        
        $from_user = (string)$xml->FromUserName;
        $media_id = (string)$xml->MediaId;
        
        // Create task for image processing
        $this->task_manager->create_task(array(
            'content_type' => 'wechat_image',
            'content_payload' => json_encode(array(
                'media_id' => $media_id,
                'user_id' => $from_user
            )),
            'webhook_url' => site_url('wp-json/aimagic/v1/webhook/wechat/callback')
        ));
    }
}

目錄：/www/wwwroot/xart004.heatgroups.top/wp-content/plugins/ai_plateform_v2/files_2025/includes/Core
檔名：Cache.php
==================================================
<?php
namespace AIMagic\Core;

class Cache {
    private $cache_dir;
    private $error_handler;
    
    public function __construct() {
        $upload_dir = wp_upload_dir();
        $this->cache_dir = $upload_dir['basedir'] . '/aimagic-cache';
        $this->error_handler = ErrorHandler::getInstance();
        
        if (!file_exists($this->cache_dir)) {
            wp_mkdir_p($this->cache_dir);
            file_put_contents($this->cache_dir . '/.htaccess', 'deny from all');
        }
    }

    public function set($key, $data, $expiry = 3600) {
        $cache_file = $this->get_cache_file($key);
        $cache_data = array(
            'data' => $data,
            'expiry' => time() + $expiry
        );

        try {
            file_put_contents($cache_file, serialize($cache_data));
            return true;
        } catch (\Exception $e) {
            $this->error_handler->log_error($e, array(
                'component' => 'cache',
                'operation' => 'set',
                'key' => $key
            ));
            return false;
        }
    }

    public function get($key) {
        $cache_file = $this->get_cache_file($key);
        
        if (!file_exists($cache_file)) {
            return false;
        }

        try {
            $cache_data = unserialize(file_get_contents($cache_file));
            
            if ($cache_data['expiry'] < time()) {
                unlink($cache_file);
                return false;
            }

            return $cache_data['data'];
        } catch (\Exception $e) {
            $this->error_handler->log_error($e, array(
                'component' => 'cache',
                'operation' => 'get',
                'key' => $key
            ));
            return false;
        }
    }

    public function delete($key) {
        $cache_file = $this->get_cache_file($key);
        
        if (file_exists($cache_file)) {
            return unlink($cache_file);
        }
        
        return true;
    }

    public function clear() {
        $files = glob($this->cache_dir . '/*');
        foreach ($files as $file) {
            if (is_file($file) && basename($file) !== '.htaccess') {
                unlink($file);
            }
        }
        return true;
    }

    private function get_cache_file($key) {
        return $this->cache_dir . '/' . md5($key) . '.cache';
    }
}

目錄：/www/wwwroot/xart004.heatgroups.top/wp-content/plugins/ai_plateform_v2/files_2025/includes/Core
檔名：Activator.php
==================================================
<?php
namespace AIMagic\Core;

class Activator {
    public static function activate() {
        global $wpdb;
        require_once(ABSPATH . 'wp-admin/includes/upgrade.php');

        $charset_collate = $wpdb->get_charset_collate();

        // GPT Responses Table
        $table = $wpdb->prefix . 'aimagic_gpt_responses';
        $sql = "CREATE TABLE IF NOT EXISTS $table (
            id bigint(20) NOT NULL AUTO_INCREMENT,
            user_id varchar(255) NOT NULL,
            replytoken varchar(255) DEFAULT NULL,
            image_path varchar(255) NOT NULL,
            image_url varchar(255) NOT NULL,
            gpt_question text NOT NULL,
            gpt_ans text NOT NULL,
            gpt_prompt_json text NOT NULL,
            q_date datetime NOT NULL DEFAULT CURRENT_TIMESTAMP,
            task_status varchar(20) NOT NULL DEFAULT 'pending',
            task_machine_uuid varchar(255) NOT NULL,
            article_info text NOT NULL,
            product_info text NOT NULL,
            event_code varchar(50) NOT NULL,
            PRIMARY KEY (id)
        ) $charset_collate;";
        dbDelta($sql);

        // Info Templates Table
        $table = $wpdb->prefix . 'aimagic_info_templates';
        $sql = "CREATE TABLE IF NOT EXISTS $table (
            info_id bigint(20) NOT NULL AUTO_INCREMENT,
            info_name varchar(255) NOT NULL,
            info_type varchar(50) NOT NULL,
            info_content text NOT NULL,
            info_language varchar(10) NOT NULL DEFAULT 'en',
            last_updated datetime NOT NULL DEFAULT CURRENT_TIMESTAMP,
            PRIMARY KEY (info_id)
        ) $charset_collate;";
        dbDelta($sql);

        // Machine Configs Table
        $table = $wpdb->prefix . 'aimagic_machine_configs';
        $sql = "CREATE TABLE IF NOT EXISTS $table (
            id bigint(20) NOT NULL AUTO_INCREMENT,
            machine_id varchar(191) NOT NULL,
            ini_content text NOT NULL,
            updated_at timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
            PRIMARY KEY (id),
            UNIQUE KEY machine_id (machine_id)
        ) $charset_collate;";
        dbDelta($sql);

        // Machine Status Table
        $table = $wpdb->prefix . 'aimagic_machine_status';
        $sql = "CREATE TABLE IF NOT EXISTS $table (
            id bigint(20) NOT NULL AUTO_INCREMENT,
            machine_id varchar(191) NOT NULL,
            machine_name varchar(50) NOT NULL,
            gpu_level int(1) NOT NULL,
            status varchar(50) NOT NULL,
            switch varchar(5) NOT NULL DEFAULT 'on',
            timestamp datetime NOT NULL DEFAULT CURRENT_TIMESTAMP,
            PRIMARY KEY (id),
            UNIQUE KEY machine_id (machine_id)
        ) $charset_collate;";
        dbDelta($sql);

        // Machine Status Log Table
        $table = $wpdb->prefix . 'aimagic_machine_status_log';
        $sql = "CREATE TABLE IF NOT EXISTS $table (
            id bigint(20) NOT NULL AUTO_INCREMENT,
            machine_id varchar(255) NOT NULL,
            status varchar(50) NOT NULL,
            error_message text NOT NULL,
            timestamp datetime NOT NULL DEFAULT CURRENT_TIMESTAMP,
            PRIMARY KEY (id)
        ) $charset_collate;";
        dbDelta($sql);

        // Production Log Table
        $table = $wpdb->prefix . 'aimagic_production_log';
        $sql = "CREATE TABLE IF NOT EXISTS $table (
            id bigint(20) NOT NULL AUTO_INCREMENT,
            machine_identifier varchar(255) NOT NULL,
            gpt_responses_id varchar(255) NOT NULL,
            wordpress_post_ids text,
            media_ids text,
            woocommerce_product_ids text,
            running_time float NOT NULL,
            created_time datetime NOT NULL DEFAULT CURRENT_TIMESTAMP,
            PRIMARY KEY (id)
        ) $charset_collate;";
        dbDelta($sql);

        // Prompt Data Table
        $table = $wpdb->prefix . 'aimagic_prompt_data';
        $sql = "CREATE TABLE IF NOT EXISTS $table (
            prompt_id bigint(20) NOT NULL AUTO_INCREMENT,
            category varchar(255) DEFAULT NULL,
            positive_prompt mediumtext,
            negative_prompt mediumtext,
            key_elements mediumtext,
            creator varchar(255) DEFAULT 'system',
            date_created timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
            status enum('active','disable','pending','trash') DEFAULT 'pending',
            popularity_count int(11) DEFAULT '0',
            market_price decimal(10,2) DEFAULT '1.00',
            last_modified timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
            PRIMARY KEY (prompt_id)
        ) $charset_collate;";
        dbDelta($sql);

        // User Data Table
        $table = $wpdb->prefix . 'aimagic_user_data';
        $sql = "CREATE TABLE IF NOT EXISTS $table (
            id bigint(20) NOT NULL AUTO_INCREMENT,
            user_id varchar(255) NOT NULL,
            user_name varchar(100) NOT NULL,
            status enum('active','inactive') DEFAULT 'active',
            daily_quota int(11) DEFAULT '10',
            remaining_quota int(11) DEFAULT '10',
            balance decimal(10,2) DEFAULT '0.00',
            user_note text NOT NULL,
            site_url varchar(255) NOT NULL,
            qr_content varchar(255) DEFAULT NULL,
            last_reset_date date DEFAULT NULL,
            created_at datetime DEFAULT NULL,
            updated_at timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
            last_message_time timestamp NULL DEFAULT NULL,
            PRIMARY KEY (id),
            UNIQUE KEY user_id (user_id)
        ) $charset_collate;";
        dbDelta($sql);

        // User Images Table
        $table = $wpdb->prefix . 'aimagic_user_images';
        $sql = "CREATE TABLE IF NOT EXISTS $table (
            id bigint(20) NOT NULL AUTO_INCREMENT,
            user_id varchar(255) NOT NULL,
            image_path varchar(255) NOT NULL,
            qr_content mediumtext,
            image_without_qr varchar(255) DEFAULT NULL,
            gpt_prompt mediumtext,
            gpt_response mediumtext,
            created_at timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
            PRIMARY KEY (id)
        ) $charset_collate;";
        dbDelta($sql);

        // System Config Table
        $table = $wpdb->prefix . 'aimagic_system_config';
        $sql = "CREATE TABLE IF NOT EXISTS $table (
            id bigint(20) NOT NULL AUTO_INCREMENT,
            config_key varchar(150) NOT NULL,
            config_value varchar(255) NOT NULL,
            PRIMARY KEY (id),
            UNIQUE KEY config_key_unique (config_key)
        ) $charset_collate;";
        dbDelta($sql);

        // Add default system configurations
        self::add_default_configs();
    }

    private static function add_default_configs() {
        global $wpdb;
        $table = $wpdb->prefix . 'aimagic_system_config';

        $default_configs = array(
            'default_daily_quota' => '10',
            'default_gpu_level' => '1',
            'system_status' => 'active',
            'gpt4_api_endpoint' => 'https://api.openai.com/v1/chat/completions',
            'line_webhook_url' => site_url('wp-json/aimagic/v1/webhook/line'),
            'wechat_webhook_url' => site_url('wp-json/aimagic/v1/webhook/wechat'),
            'image_storage_path' => wp_upload_dir()['basedir'] . '/aimagic-images',
            'cache_expiry' => '3600',
            'task_timeout' => '300',
            'max_retries' => '3'
        );

        foreach ($default_configs as $key => $value) {
            $wpdb->replace(
                $table,
                array(
                    'config_key' => $key,
                    'config_value' => $value
                ),
                array('%s', '%s')
            );
        }
    }
}

目錄：/www/wwwroot/xart004.heatgroups.top/wp-content/plugins/ai_plateform_v2/files_2025/includes/Core
檔名：ProductionLogger.php
==================================================
<?php
namespace AIMagic\Core;

class ProductionLogger {
    private $error_handler;
    private $logger;
    private static $instance = null;

    private function __construct() {
        $this->error_handler = ErrorHandler::getInstance();
        $this->logger = Logger::getInstance();
    }

    public static function getInstance() {
        if (self::$instance === null) {
            self::$instance = new self();
        }
        return self::$instance;
    }

    public function logProduction($data) {
        global $wpdb;
        
        $this->logger->logme("Logging production for machine: " . $data['machine_identifier']);
        
        try {
            // Sanitize and prepare data
            $machine_identifier = $wpdb->_real_escape($data['machine_identifier']);
            $gpt_responses_id = $wpdb->_real_escape($data['gpt_responses_id']);
            $wordpress_post_ids = json_encode($data['wordpress_post_ids']);
            $media_ids = json_encode($data['media_ids']);
            $woocommerce_product_ids = json_encode($data['woocommerce_product_ids']);
            $running_time = floatval($data['running_time']);

            // Insert production log
            $result = $wpdb->insert(
                $wpdb->prefix . 'aimagic_production_log',
                [
                    'machine_identifier' => $machine_identifier,
                    'gpt_responses_id' => $gpt_responses_id,
                    'wordpress_post_ids' => $wordpress_post_ids,
                    'media_ids' => $media_ids,
                    'woocommerce_product_ids' => $woocommerce_product_ids,
                    'running_time' => $running_time
                ],
                ['%s', '%s', '%s', '%s', '%s', '%f']
            );

            if ($result === false) {
                throw new \Exception($wpdb->last_error);
            }

            // Update article info in gpt_responses
            $update_result = $wpdb->update(
                $wpdb->prefix . 'aimagic_gpt_responses',
                ['article_info' => $wordpress_post_ids],
                ['id' => $gpt_responses_id],
                ['%s'],
                ['%d']
            );

            if ($update_result === false) {
                throw new \Exception("Failed to update GPT response record");
            }

            // Get user_id and notify them
            $user_info = $this->getUserInfo($gpt_responses_id);
            if ($user_info) {
                $this->notifyUser($user_info['user_id'], $data['wordpress_post_ids']);
            }

            return $wpdb->insert_id;

        } catch (\Exception $e) {
            $this->error_handler->log_error($e, [
                'component' => 'production_logger',
                'operation' => 'logProduction',
                'data' => $data
            ]);
            return false;
        }
    }

    private function getUserInfo($gpt_responses_id) {
        global $wpdb;
        
        return $wpdb->get_row(
            $wpdb->prepare(
                "SELECT user_id, replytoken FROM {$wpdb->prefix}aimagic_gpt_responses WHERE id = %d",
                $gpt_responses_id
            ),
            ARRAY_A
        );
    }

    private function notifyUser($user_id, $wordpress_post_ids) {
        if (empty($wordpress_post_ids)) {
            return false;
        }

        $store_url = get_option('aimagic_store_url', 'https://example.com');
        $message = "New content has been generated, view it here: {$store_url}?p=" . $wordpress_post_ids[0];

        // Send LINE notification
        $this->sendLineNotification($user_id, $message);

        return true;
    }

    private function sendLineNotification($user_id, $message) {
        $access_token = get_option('aimagic_line_access_token');
        if (!$access_token) {
            $this->logger->logme("LINE access token not found");
            return false;
        }

        $url = 'https://api.line.me/v2/bot/message/push';
        $headers = [
            'Content-Type: application/json',
            'Authorization: Bearer ' . $access_token
        ];

        $data = [
            'to' => $user_id,
            'messages' => [
                [
                    'type' => 'text',
                    'text' => $message
                ]
            ]
        ];

        $ch = curl_init($url);
        curl_setopt($ch, CURLOPT_POST, true);
        curl_setopt($ch, CURLOPT_HTTPHEADER, $headers);
        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
        curl_setopt($ch, CURLOPT_POSTFIELDS, json_encode($data));
        $response = curl_exec($ch);
        $http_code = curl_getinfo($ch, CURLINFO_HTTP_CODE);
        curl_close($ch);

        if ($http_code !== 200) {
            $this->logger->logme("Failed to send LINE notification. HTTP Code: $http_code, Response: $response");
            return false;
        }

        return true;
    }
}

目錄：/www/wwwroot/xart004.heatgroups.top/wp-content/plugins/ai_plateform_v2/files_2025/includes/Core
檔名：MachineManager.php
==================================================
<?php
namespace AIMagic\Core;

class MachineManager {
    private $error_handler;
    private static $instance = null;

    private function __construct() {
        $this->error_handler = ErrorHandler::getInstance();
    }

    public static function getInstance() {
        if (self::$instance === null) {
            self::$instance = new self();
        }
        return self::$instance;
    }

    public function register_machine($machine_id, $machine_name, $gpu_level) {
        global $wpdb;
        
        try {
            return $wpdb->insert(
                $wpdb->prefix . 'aimagic_machine_status',
                array(
                    'machine_id' => $machine_id,
                    'machine_name' => $machine_name,
                    'gpu_level' => $gpu_level,
                    'status' => 'idle',
                    'switch' => 'on'
                ),
                array('%s', '%s', '%d', '%s', '%s')
            );
        } catch (\Exception $e) {
            $this->error_handler->log_error($e, array(
                'component' => 'machine_manager',
                'operation' => 'register_machine',
                'machine_id' => $machine_id
            ));
            return false;
        }
    }

    public function update_machine_status($machine_id, $status, $error_message = '') {
        global $wpdb;
        
        try {
            // Update machine status
            $wpdb->update(
                $wpdb->prefix . 'aimagic_machine_status',
                array('status' => $status),
                array('machine_id' => $machine_id),
                array('%s'),
                array('%s')
            );

            // Log status change
            $wpdb->insert(
                $wpdb->prefix . 'aimagic_machine_status_log',
                array(
                    'machine_id' => $machine_id,
                    'status' => $status,
                    'error_message' => $error_message
                ),
                array('%s', '%s', '%s')
            );

            return true;
        } catch (\Exception $e) {
            $this->error_handler->log_error($e, array(
                'component' => 'machine_manager',
                'operation' => 'update_machine_status',
                'machine_id' => $machine_id,
                'status' => $status
            ));
            return false;
        }
    }

    public function get_available_machine($gpu_level = null) {
        global $wpdb;
        
        $sql = "SELECT * FROM {$wpdb->prefix}aimagic_machine_status 
                WHERE status = 'idle' AND switch = 'on'";
        
        if ($gpu_level !== null) {
            $sql .= $wpdb->prepare(" AND gpu_level = %d", $gpu_level);
        }
        
        $sql .= " ORDER BY RAND() LIMIT 1";
        
        return $wpdb->get_row($sql);
    }

    public function toggle_machine($machine_id, $switch) {
        global $wpdb;
        
        try {
            return $wpdb->update(
                $wpdb->prefix . 'aimagic_machine_status',
                array('switch' => $switch),
                array('machine_id' => $machine_id),
                array('%s'),
                array('%s')
            );
        } catch (\Exception $e) {
            $this->error_handler->log_error($e, array(
                'component' => 'machine_manager',
                'operation' => 'toggle_machine',
                'machine_id' => $machine_id,
                'switch' => $switch
            ));
            return false;
        }
    }

    public function update_machine_config($machine_id, $config) {
        global $wpdb;
        
        try {
            return $wpdb->replace(
                $wpdb->prefix . 'aimagic_machine_configs',
                array(
                    'machine_id' => $machine_id,
                    'ini_content' => serialize($config)
                ),
                array('%s', '%s')
            );
        } catch (\Exception $e) {
            $this->error_handler->log_error($e, array(
                'component' => 'machine_manager',
                'operation' => 'update_machine_config',
                'machine_id' => $machine_id
            ));
            return false;
        }
    }

    public function get_machine_stats() {
        global $wpdb;
        
        return array(
            'total' => $wpdb->get_var("SELECT COUNT(*) FROM {$wpdb->prefix}aimagic_machine_status"),
            'active' => $wpdb->get_var("SELECT COUNT(*) FROM {$wpdb->prefix}aimagic_machine_status WHERE switch = 'on'"),
            'processing' => $wpdb->get_var("SELECT COUNT(*) FROM {$wpdb->prefix}aimagic_machine_status WHERE status = 'processing'"),
            'errors' => $wpdb->get_var("SELECT COUNT(*) FROM {$wpdb->prefix}aimagic_machine_status WHERE status = 'error'")
        );
    }

    public function clean_old_logs($days = 30) {
        global $wpdb;
        
        try {
            return $wpdb->query($wpdb->prepare(
                "DELETE FROM {$wpdb->prefix}aimagic_machine_status_log 
                 WHERE timestamp < DATE_SUB(NOW(), INTERVAL %d DAY)",
                $days
            ));
        } catch (\Exception $e) {
            $this->error_handler->log_error($e, array(
                'component' => 'machine_manager',
                'operation' => 'clean_old_logs',
                'days' => $days
            ));
            return false;
        }
    }
}

目錄：/www/wwwroot/xart004.heatgroups.top/wp-content/plugins/ai_plateform_v2/files_2025/includes/Core
檔名：AssetManager.php
==================================================
<?php
namespace AIMagic\Core;

class AssetManager {
    private $version;
    
    public function __construct($version) {
        $this->version = $version;
        
        add_action('admin_enqueue_scripts', array($this, 'enqueue_admin_assets'));
        add_action('wp_enqueue_scripts', array($this, 'enqueue_public_assets'));
    }

    public function enqueue_admin_assets($hook) {
        // Only load on plugin pages
        if (strpos($hook, 'aimagic') === false) {
            return;
        }

        // Admin styles
        wp_enqueue_style(
            'aimagic-admin',
            AIMAGIC_PLUGIN_URL . 'admin/css/admin.css',
            array(),
            $this->version
        );

        // Admin scripts
        wp_enqueue_script(
            'aimagic-admin',
            AIMAGIC_PLUGIN_URL . 'admin/js/admin.js',
            array('jquery'),
            $this->version,
            true
        );

        // Localize script
        wp_localize_script('aimagic-admin', 'aimagicData', array(
            'ajaxurl' => admin_url('admin-ajax.php'),
            'nonce' => wp_create_nonce('aimagic-admin'),
            'i18n' => array(
                'confirm_delete' => __('Are you sure you want to delete this item?', 'ai-magic-publisher'),
                'processing' => __('Processing...', 'ai-magic-publisher'),
                'success' => __('Operation completed successfully', 'ai-magic-publisher'),
                'error' => __('An error occurred', 'ai-magic-publisher')
            )
        ));
    }

    public function enqueue_public_assets() {
        // Public styles
        wp_enqueue_style(
            'aimagic-public',
            AIMAGIC_PLUGIN_URL . 'public/css/public.css',
            array(),
            $this->version
        );

        // Public scripts
        wp_enqueue_script(
            'aimagic-public',
            AIMAGIC_PLUGIN_URL . 'public/js/public.js',
            array('jquery'),
            $this->version,
            true
        );

        // Localize script
        wp_localize_script('aimagic-public', 'aimagicData', array(
            'ajaxurl' => admin_url('admin-ajax.php'),
            'nonce' => wp_create_nonce('aimagic-public')
        ));
    }

    public function register_block_assets() {
        // Register block editor assets if needed
        if (function_exists('register_block_type')) {
            wp_register_script(
                'aimagic-blocks',
                AIMAGIC_PLUGIN_URL . 'blocks/blocks.js',
                array('wp-blocks', 'wp-element', 'wp-editor'),
                $this->version
            );

            wp_register_style(
                'aimagic-blocks',
                AIMAGIC_PLUGIN_URL . 'blocks/blocks.css',
                array(),
                $this->version
            );

            register_block_type('aimagic/gallery', array(
                'editor_script' => 'aimagic-blocks',
                'editor_style' => 'aimagic-blocks',
                'render_callback' => array($this, 'render_gallery_block')
            ));
        }
    }

    public function render_gallery_block($attributes) {
        // Implementation of gallery block renderer
    }
}

目錄：/www/wwwroot/xart004.heatgroups.top/wp-content/plugins/ai_plateform_v2/files_2025/includes/Core
檔名：QuotaManager.php
==================================================
<?php
namespace AIMagic\Core;

class QuotaManager {
    private static $instance = null;
    private $logger;
    private $error_handler;

    private function __construct() {
        $this->logger = Logger::getInstance();
        $this->error_handler = ErrorHandler::getInstance();
        
        // Schedule daily quota reset
        if (!wp_next_scheduled('aimagic_reset_daily_quota')) {
            wp_schedule_event(strtotime('tomorrow 00:00:00'), 'daily', 'aimagic_reset_daily_quota');
        }
        add_action('aimagic_reset_daily_quota', array($this, 'reset_daily_quotas'));
    }

    public static function getInstance() {
        if (self::$instance === null) {
            self::$instance = new self();
        }
        return self::$instance;
    }

    public function get_user_quota($user_id) {
        global $wpdb;
        
        try {
            $user_data = $wpdb->get_row($wpdb->prepare(
                "SELECT daily_quota, remaining_quota, last_reset_date, balance 
                FROM {$wpdb->prefix}aimagic_user_data 
                WHERE user_id = %s",
                $user_id
            ));

            if (!$user_data) {
                return false;
            }

            // Check if quota needs reset
            if ($user_data->last_reset_date < current_time('Y-m-d')) {
                $this->reset_user_quota($user_id);
                $user_data->remaining_quota = $user_data->daily_quota;
            }

            return array(
                'daily_quota' => (int)$user_data->daily_quota,
                'remaining_quota' => (int)$user_data->remaining_quota,
                'balance' => (float)$user_data->balance
            );

        } catch (\Exception $e) {
            $this->error_handler->log_error($e, array(
                'component' => 'quota_manager',
                'operation' => 'get_user_quota',
                'user_id' => $user_id
            ));
            return false;
        }
    }

    public function deduct_quota($user_id, $amount = 1) {
        global $wpdb;
        
        $this->logger->logme("Deducting quota for user: $user_id, amount: $amount");
        
        try {
            $result = $wpdb->query($wpdb->prepare(
                "UPDATE {$wpdb->prefix}aimagic_user_data 
                SET remaining_quota = remaining_quota - %d 
                WHERE user_id = %s AND remaining_quota >= %d",
                $amount,
                $user_id,
                $amount
            ));

            return $result !== false;

        } catch (\Exception $e) {
            $this->error_handler->log_error($e, array(
                'component' => 'quota_manager',
                'operation' => 'deduct_quota',
                'user_id' => $user_id,
                'amount' => $amount
            ));
            return false;
        }
    }

    public function add_balance($user_id, $amount) {
        global $wpdb;
        
        $this->logger->logme("Adding balance for user: $user_id, amount: $amount");
        
        try {
            $result = $wpdb->query($wpdb->prepare(
                "UPDATE {$wpdb->prefix}aimagic_user_data 
                SET balance = balance + %f 
                WHERE user_id = %s",
                $amount,
                $user_id
            ));

            return $result !== false;

        } catch (\Exception $e) {
            $this->error_handler->log_error($e, array(
                'component' => 'quota_manager',
                'operation' => 'add_balance',
                'user_id' => $user_id,
                'amount' => $amount
            ));
            return false;
        }
    }

    public function reset_daily_quotas() {
        global $wpdb;
        
        $this->logger->logme("Resetting daily quotas for all users");
        
        try {
            $result = $wpdb->query(
                "UPDATE {$wpdb->prefix}aimagic_user_data 
                SET remaining_quota = daily_quota,
                    last_reset_date = CURRENT_DATE"
            );

            return $result !== false;

        } catch (\Exception $e) {
            $this->error_handler->log_error($e, array(
                'component' => 'quota_manager',
                'operation' => 'reset_daily_quotas'
            ));
            return false;
        }
    }

    public function reset_user_quota($user_id) {
        global $wpdb;
        
        $this->logger->logme("Resetting quota for user: $user_id");
        
        try {
            $result = $wpdb->query($wpdb->prepare(
                "UPDATE {$wpdb->prefix}aimagic_user_data 
                SET remaining_quota = daily_quota,
                    last_reset_date = CURRENT_DATE 
                WHERE user_id = %s",
                $user_id
            ));

            return $result !== false;

        } catch (\Exception $e) {
            $this->error_handler->log_error($e, array(
                'component' => 'quota_manager',
                'operation' => 'reset_user_quota',
                'user_id' => $user_id
            ));
            return false;
        }
    }
}

目錄：/www/wwwroot/xart004.heatgroups.top/wp-content/plugins/ai_plateform_v2/files_2025/includes/Core
檔名：MessageProcessor.php
==================================================
<?php
namespace AIMagic\Core;

class MessageProcessor {
    private $error_handler;
    private $logger;
    private $gpt_handler;
    private $image_handler;
    private static $instance = null;

    private function __construct() {
        $this->error_handler = ErrorHandler::getInstance();
        $this->logger = Logger::getInstance();
        $this->gpt_handler = GPTHandler::getInstance();
        $this->image_handler = ImageHandler::getInstance();
    }

    public static function getInstance() {
        if (self::$instance === null) {
            self::$instance = new self();
        }
        return self::$instance;
    }

    public function processMessage($event) {
        global $wpdb;
        
        try {
            $replyToken = $event['replyToken'];
            $user_id = $event['source']['userId'];
            $message_type = $event['message']['type'];

            $this->logger->logme("Processing event for user: $user_id");

            if ($message_type !== 'image') {
                return $this->createResponse("Sorry, only image messages are supported.");
            }

            // Download image
            $message_id = $event['message']['id'];
            $image_path = $this->image_handler->downloadImage($message_id);

            if (!$image_path) {
                $this->logger->logme("Failed to download image for user: $user_id");
                return $this->createResponse("Sorry, failed to process your image.");
            }

            // Get user profile and update user name
            $profile = $this->getUserProfile($user_id);
            $line_user_name = $profile['displayName'];
            $this->updateUserName($user_id, $line_user_name);

            // Check if new user
            $is_new_user = $this->isNewUser($user_id);

            if ($is_new_user) {
                return $this->handleNewUser($user_id, $line_user_name, $image_path);
            } else {
                return $this->handleExistingUser($user_id, $line_user_name, $image_path);
            }

        } catch (\Exception $e) {
            $this->error_handler->log_error($e, [
                'component' => 'message_processor',
                'operation' => 'processMessage',
                'user_id' => $user_id ?? 'unknown'
            ]);
            return $this->createResponse("An error occurred. Please try again later.");
        }
    }

    private function handleNewUser($user_id, $line_user_name, $image_path) {
        $this->logger->logme("Handling new user: $user_id");

        // Generate QR code
        $qr_code_path = $this->image_handler->saveQRCode($user_id);
        if (!$qr_code_path) {
            return $this->createResponse("Failed to generate QR code. Please try again.");
        }

        // Attach QR code to image
        $modified_image_path = $this->image_handler->attachQRCodeToImage($image_path, $qr_code_path);
        if (!$modified_image_path) {
            return $this->createResponse("Failed to process image. Please try again.");
        }

        // Generate QR content
        $qr_content = "HWAIS-" . $user_id;

        // Save new user data
        if (!$this->saveNewUserData($user_id, $line_user_name, $qr_content)) {
            return $this->createResponse("Registration failed. Please contact administrator.");
        }

        // Create welcome message
        $store_url = get_option('aimagic_store_url', 'https://example.com');
        $message = "{$line_user_name} Welcome to AI Magic! Registration successful!\n\n";
        $message .= "You have 2 free uses per day.\n\n";
        $message .= "Your image has been tagged with a QR code. Please download and share it to generate AI content.\n\n";
        $message .= "Content generation may take 5-10 minutes. Meanwhile, you can browse other works at our website.\n\n";
        $message .= "Channel website: {$store_url}\n\n";
        $message .= "Please support and promote our channel. Feel free to leave feedback - AI Art Promotion";

        return [
            'type' => 'multiple',
            'messages' => [
                [
                    'type' => 'text',
                    'text' => $message
                ],
                [
                    'type' => 'image',
                    'originalContentUrl' => $this->getImageUrl($modified_image_path),
                    'previewImageUrl' => $this->getImageUrl($modified_image_path)
                ]
            ]
        ];
    }

    private function handleExistingUser($user_id, $line_user_name, $image_path) {
        $this->logger->logme("Handling existing user: $user_id");

        // Decode QR code
        $qr_content = $this->decodeQRCode($image_path);

        if ($qr_content === 'QR_NOT_FOUND') {
            // No QR code found, add one
            $qr_code_path = $this->image_handler->saveQRCode($user_id);
            $modified_image_path = $this->image_handler->attachQRCodeToImage($image_path, $qr_code_path);
            $qr_content = "HWAIS-" . $user_id;
            $image_path = $modified_image_path;
        }

        // Validate QR code
        if (!$this->isValidQRCode($qr_content, $user_id)) {
            return $this->createResponse("{$line_user_name}, invalid QR code. Please contact administrator.");
        }

        // Check quota
        $quota = $this->hasQuota($user_id);
        if ($quota <= 0) {
            return $this->createResponse("{$line_user_name}, you've used all your quota. Please try again tomorrow.");
        }

        // Process with GPT
        $result = $this->gpt_handler->askGPT($user_id, $image_path, $qr_content);
        if (!$result) {
            return $this->createResponse("Sorry, couldn't get GPT response. Please try again.");
        }

        // Deduct quota
        $this->deductQuota($user_id);
        $remaining_quota = $this->hasQuota($user_id);

        // Create response message
        $response = "❤️ {$line_user_name} ❤️ Hello, AI Magic analysis complete:\n\n";
        $response .= "⭐Title: {$result['extracted_data']['专欄標題']}\n\n";
        $response .= "📝Image Analysis:\n{$result['extracted_data']['圖片分析']}\n\n";
        $response .= "💡Creative Inspiration:\n{$result['extracted_data']['創作靈感']}\n\n";
        $response .= "🔔Check your AI-generated work in about 5 minutes at: " . get_option('aimagic_store_url') . "\n\n";
        $response .= "🚨Remaining quota: {$remaining_quota}\n";
        $response .= "🚨Event code: {$result['event_code']}\n";
        $response .= "🚨Record ID: {$result['record_id']}\n";

        return $this->createResponse($response);
    }

    private function getUserProfile($user_id) {
        $access_token = get_option('aimagic_line_access_token');
        $response = wp_remote_get(
            "https://api.line.me/v2/bot/profile/{$user_id}",
            [
                'headers' => [
                    'Authorization' => "Bearer {$access_token}"
                ]
            ]
        );

        if (is_wp_error($response)) {
            throw new \Exception("Failed to get user profile: " . $response->get_error_message());
        }

        $body = json_decode(wp_remote_retrieve_body($response), true);
        if (!$body || !isset($body['displayName'])) {
            throw new \Exception("Invalid profile response");
        }

        return $body;
    }

    private function isNewUser($user_id) {
        global $wpdb;
        $count = $wpdb->get_var($wpdb->prepare(
            "SELECT COUNT(*) FROM {$wpdb->prefix}aimagic_user_data WHERE user_id = %s",
            $user_id
        ));
        return $count == 0;
    }

    private function saveNewUserData($user_id, $line_user_name, $qr_content) {
        global $wpdb;
        return $wpdb->insert(
            $wpdb->prefix . 'aimagic_user_data',
            [
                'user_id' => $user_id,
                'user_name' => $line_user_name,
                'status' => 'active',
                'daily_quota' => 2,
                'remaining_quota' => 2,
                'qr_content' => $qr_content,
                'last_reset_date' => current_time('mysql', true)
            ],
            ['%s', '%s', '%s', '%d', '%d', '%s', '%s']
        );
    }

    private function updateUserName($user_id, $line_user_name) {
        global $wpdb;
        $wpdb->update(
            $wpdb->prefix . 'aimagic_user_data',
            ['user_name' => $line_user_name],
            ['user_id' => $user_id],
            ['%s'],
            ['%s']
        );
    }

    private function hasQuota($user_id) {
        global $wpdb;
        return (int) $wpdb->get_var($wpdb->prepare(
            "SELECT remaining_quota FROM {$wpdb->prefix}aimagic_user_data WHERE user_id = %s",
            $user_id
        ));
    }

    private function deductQuota($user_id) {
        global $wpdb;
        return $wpdb->query($wpdb->prepare(
            "UPDATE {$wpdb->prefix}aimagic_user_data 
             SET remaining_quota = remaining_quota - 1 
             WHERE user_id = %s AND remaining_quota > 0",
            $user_id
        ));
    }

    private function isValidQRCode($qr_content, $user_id) {
        return $qr_content === "HWAIS-" . $user_id;
    }

    private function createResponse($text) {
        return [
            'type' => 'text',
            'text' => $text
        ];
    }

    private function getImageUrl($path) {
        return get_option('aimagic_image_url_base') . basename($path);
    }

    private function decodeQRCode($image_path) {
        // You might want to implement actual QR code reading here
        // For now, returning a constant for testing
        return 'QR_NOT_FOUND';
    }
}

目錄：/www/wwwroot/xart004.heatgroups.top/wp-content/plugins/ai_plateform_v2/files_2025/includes/Core
檔名：StatisticsManager.php
==================================================
<?php
namespace AIMagic\Core;

class StatisticsManager {
    private static $instance = null;
    private $logger;
    private $error_handler;

    private function __construct() {
        $this->logger = Logger::getInstance();
        $this->error_handler = ErrorHandler::getInstance();
    }

    public static function getInstance() {
        if (self::$instance === null) {
            self::$instance = new self();
        }
        return self::$instance;
    }

    public function get_system_stats() {
        global $wpdb;
        
        try {
            $stats = [
                'tasks' => [
                    'total' => 0,
                    'pending' => 0,
                    'in_progress' => 0,
                    'completed' => 0,
                    'failed' => 0
                ],
                'nodes' => [
                    'total' => 0,
                    'active' => 0,
                    'offline' => 0
                ],
                'users' => [
                    'total' => 0,
                    'active_today' => 0
                ],
                'content' => [
                    'total_images' => 0,
                    'total_posts' => 0
                ]
            ];

            // Get task statistics
            $task_stats = $wpdb->get_results(
                "SELECT status, COUNT(*) as count 
                 FROM {$wpdb->prefix}aimagic_gpt_responses 
                 GROUP BY status"
            );

            foreach ($task_stats as $stat) {
                $stats['tasks']['total'] += $stat->count;
                $stats['tasks'][$stat->status] = $stat->count;
            }

            // Get node statistics
            $node_stats = $wpdb->get_results(
                "SELECT status, COUNT(*) as count 
                 FROM {$wpdb->prefix}aimagic_machine_status 
                 GROUP BY status"
            );

            foreach ($node_stats as $stat) {
                $stats['nodes']['total'] += $stat->count;
                $stats['nodes'][$stat->status] = $stat->count;
            }

            // Get user statistics
            $stats['users']['total'] = $wpdb->get_var(
                "SELECT COUNT(*) FROM {$wpdb->prefix}aimagic_user_data"
            );

            $stats['users']['active_today'] = $wpdb->get_var(
                "SELECT COUNT(DISTINCT user_id) 
                 FROM {$wpdb->prefix}aimagic_gpt_responses 
                 WHERE DATE(q_date) = CURDATE()"
            );

            // Get content statistics
            $stats['content']['total_images'] = $wpdb->get_var(
                "SELECT COUNT(*) FROM {$wpdb->prefix}aimagic_user_images"
            );

            $stats['content']['total_posts'] = $wpdb->get_var(
                "SELECT COUNT(DISTINCT post_id) 
                 FROM {$wpdb->prefix}aimagic_production_log 
                 WHERE wordpress_post_ids IS NOT NULL"
            );

            return $stats;

        } catch (\Exception $e) {
            $this->error_handler->log_error($e, array(
                'component' => 'statistics_manager',
                'operation' => 'get_system_stats'
            ));
            return false;
        }
    }

    public function get_user_stats($user_id) {
        global $wpdb;
        
        try {
            $stats = [
                'total_requests' => 0,
                'completed_requests' => 0,
                'total_posts' => 0,
                'remaining_quota' => 0,
                'last_request' => null
            ];

            // Get request statistics
            $request_stats = $wpdb->get_row($wpdb->prepare(
                "SELECT 
                    COUNT(*) as total_requests,
                    SUM(CASE WHEN task_status = 'completed' THEN 1 ELSE 0 END) as completed_requests,
                    MAX(q_date) as last_request
                 FROM {$wpdb->prefix}aimagic_gpt_responses 
                 WHERE user_id = %s",
                $user_id
            ));

            if ($request_stats) {
                $stats['total_requests'] = $request_stats->total_requests;
                $stats['completed_requests'] = $request_stats->completed_requests;
                $stats['last_request'] = $request_stats->last_request;
            }

            // Get post statistics
            $stats['total_posts'] = $wpdb->get_var($wpdb->prepare(
                "SELECT COUNT(DISTINCT wordpress_post_ids) 
                 FROM {$wpdb->prefix}aimagic_production_log pl
                 JOIN {$wpdb->prefix}aimagic_gpt_responses gr ON pl.gpt_responses_id = gr.id
                 WHERE gr.user_id = %s",
                $user_id
            ));

            // Get remaining quota
            $stats['remaining_quota'] = $wpdb->get_var($wpdb->prepare(
                "SELECT remaining_quota 
                 FROM {$wpdb->prefix}aimagic_user_data 
                 WHERE user_id = %s",
                $user_id
            ));

            return $stats;

        } catch (\Exception $e) {
            $this->error_handler->log_error($e, array(
                'component' => 'statistics_manager',
                'operation' => 'get_user_stats',
                'user_id' => $user_id
            ));
            return false;
        }
    }

    public function get_node_stats($machine_id = null) {
        global $wpdb;
        
        try {
            if ($machine_id) {
                // Get statistics for specific node
                return $wpdb->get_row($wpdb->prepare(
                    "SELECT 
                        ms.*,
                        COUNT(pl.id) as total_tasks,
                        AVG(pl.running_time) as avg_running_time,
                        MAX(pl.created_time) as last_task_time
                     FROM {$wpdb->prefix}aimagic_machine_status ms
                     LEFT JOIN {$wpdb->prefix}aimagic_production_log pl ON ms.machine_id = pl.machine_identifier
                     WHERE ms.machine_id = %s
                     GROUP BY ms.machine_id",
                    $machine_id
                ));
            } else {
                // Get statistics for all nodes
                return $wpdb->get_results(
                    "SELECT 
                        ms.*,
                        COUNT(pl.id) as total_tasks,
                        AVG(pl.running_time) as avg_running_time,
                        MAX(pl.created_time) as last_task_time
                     FROM {$wpdb->prefix}aimagic_machine_status ms
                     LEFT JOIN {$wpdb->prefix}aimagic_production_log pl ON ms.machine_id = pl.machine_identifier
                     GROUP BY ms.machine_id"
                );
            }

        } catch (\Exception $e) {
            $this->error_handler->log_error($e, array(
                'component' => 'statistics_manager',
                'operation' => 'get_node_stats',
                'machine_id' => $machine_id
            ));
            return false;
        }
    }
}

目錄：/www/wwwroot/xart004.heatgroups.top/wp-content/plugins/ai_plateform_v2/files_2025/includes/Core
檔名：TemplateManager.php
==================================================
<?php
namespace AIMagic\Core;

class TemplateManager {
    private static $instance = null;
    private $logger;
    private $error_handler;

    private function __construct() {
        $this->logger = Logger::getInstance();
        $this->error_handler = ErrorHandler::getInstance();
    }

    public static function getInstance() {
        if (self::$instance === null) {
            self::$instance = new self();
        }
        return self::$instance;
    }

    public function save_template($data) {
        global $wpdb;
        
        try {
            $result = $wpdb->insert(
                $wpdb->prefix . 'aimagic_info_template',
                array(
                    'info_name' => $data['info_name'],
                    'info_type' => $data['info_type'],
                    'info_content' => $data['info_content'],
                    'info_language' => $data['info_language'] ?? 'en'
                ),
                array('%s', '%s', '%s', '%s')
            );

            if ($result === false) {
                throw new \Exception($wpdb->last_error);
            }

            return $wpdb->insert_id;

        } catch (\Exception $e) {
            $this->error_handler->log_error($e, array(
                'component' => 'template_manager',
                'operation' => 'save_template',
                'data' => $data
            ));
            return false;
        }
    }

    public function get_template($template_id) {
        global $wpdb;
        
        try {
            return $wpdb->get_row($wpdb->prepare(
                "SELECT * FROM {$wpdb->prefix}aimagic_info_template WHERE info_id = %d",
                $template_id
            ));

        } catch (\Exception $e) {
            $this->error_handler->log_error($e, array(
                'component' => 'template_manager',
                'operation' => 'get_template',
                'template_id' => $template_id
            ));
            return false;
        }
    }

    public function get_templates_by_type($type) {
        global $wpdb;
        
        try {
            return $wpdb->get_results($wpdb->prepare(
                "SELECT * FROM {$wpdb->prefix}aimagic_info_template WHERE info_type = %s",
                $type
            ));

        } catch (\Exception $e) {
            $this->error_handler->log_error($e, array(
                'component' => 'template_manager',
                'operation' => 'get_templates_by_type',
                'type' => $type
            ));
            return array();
        }
    }

    public function update_template($template_id, $data) {
        global $wpdb;
        
        try {
            $result = $wpdb->update(
                $wpdb->prefix . 'aimagic_info_template',
                array(
                    'info_name' => $data['info_name'],
                    'info_type' => $data['info_type'],
                    'info_content' => $data['info_content'],
                    'info_language' => $data['info_language'] ?? 'en'
                ),
                array('info_id' => $template_id),
                array('%s', '%s', '%s', '%s'),
                array('%d')
            );

            return $result !== false;

        } catch (\Exception $e) {
            $this->error_handler->log_error($e, array(
                'component' => 'template_manager',
                'operation' => 'update_template',
                'template_id' => $template_id,
                'data' => $data
            ));
            return false;
        }
    }

    public function delete_template($template_id) {
        global $wpdb;
        
        try {
            return $wpdb->delete(
                $wpdb->prefix . 'aimagic_info_template',
                array('info_id' => $template_id),
                array('%d')
            );

        } catch (\Exception $e) {
            $this->error_handler->log_error($e, array(
                'component' => 'template_manager',
                'operation' => 'delete_template',
                'template_id' => $template_id
            ));
            return false;
        }
    }
}

目錄：/www/wwwroot/xart004.heatgroups.top/wp-content/plugins/ai_plateform_v2/files_2025/includes/Core
檔名：TaskManager.php
==================================================
<?php
namespace AIMagic\Core;

class TaskManager {
    private static $instance = null;
    private $logger;
    private $error_handler;
    private $user_manager;
    private $quota_manager;

    private function __construct() {
        $this->logger = Logger::getInstance();
        $this->error_handler = ErrorHandler::getInstance();
        $this->user_manager = UserManager::getInstance();
        $this->quota_manager = QuotaManager::getInstance();
    }

    public static function getInstance() {
        if (self::$instance === null) {
            self::$instance = new self();
        }
        return self::$instance;
    }

    public function create_task($data) {
        global $wpdb;
        
        $this->logger->logme("Creating new task for user: " . $data['user_id']);
        
        try {
            // Check user quota
            $quota = $this->quota_manager->get_user_quota($data['user_id']);
            if (!$quota || $quota['remaining_quota'] <= 0) {
                throw new \Exception("Insufficient quota");
            }

            // Begin transaction
            $wpdb->query('START TRANSACTION');

            // Insert task
            $wpdb->insert(
                $wpdb->prefix . 'aimagic_gpt_responses',
                array(
                    'user_id' => $data['user_id'],
                    'replytoken' => $data['reply_token'] ?? null,
                    'image_path' => $data['image_path'],
                    'image_url' => $data['image_url'],
                    'gpt_question' => $data['gpt_question'],
                    'gpt_ans' => $data['gpt_ans'],
                    'gpt_prompt_json' => $data['gpt_prompt_json'],
                    'task_status' => 'pending',
                    'task_machine_uuid' => $data['machine_uuid'],
                    'event_code' => $data['event_code']
                ),
                array('%s', '%s', '%s', '%s', '%s', '%s', '%s', '%s', '%s', '%s')
            );

            if ($wpdb->last_error) {
                throw new \Exception($wpdb->last_error);
            }

            $task_id = $wpdb->insert_id;

            // Deduct quota
            if (!$this->quota_manager->deduct_quota($data['user_id'])) {
                throw new \Exception("Failed to deduct quota");
            }

            // Update last message time
            $this->user_manager->update_last_message_time($data['user_id']);

            // Commit transaction
            $wpdb->query('COMMIT');

            return $task_id;

        } catch (\Exception $e) {
            $wpdb->query('ROLLBACK');
            $this->error_handler->log_error($e, array(
                'component' => 'task_manager',
                'operation' => 'create_task',
                'data' => $data
            ));
            return false;
        }
    }

    public function update_task_status($task_id, $status, $error_message = null) {
        global $wpdb;
        
        $this->logger->logme("Updating task status: $task_id to $status");
        
        try {
            $data = array(
                'task_status' => $status,
                'updated_at' => current_time('mysql', true)
            );

            if ($error_message) {
                $data['error_message'] = $error_message;
            }

            $result = $wpdb->update(
                $wpdb->prefix . 'aimagic_gpt_responses',
                $data,
                array('id' => $task_id),
                array('%s', '%s', '%s'),
                array('%d')
            );

            return $result !== false;

        } catch (\Exception $e) {
            $this->error_handler->log_error($e, array(
                'component' => 'task_manager',
                'operation' => 'update_task_status',
                'task_id' => $task_id,
                'status' => $status
            ));
            return false;
        }
    }

    public function get_pending_tasks($machine_uuid) {
        global $wpdb;
        
        try {
            return $wpdb->get_results($wpdb->prepare(
                "SELECT * FROM {$wpdb->prefix}aimagic_gpt_responses 
                WHERE task_status = 'pending' 
                AND task_machine_uuid = %s 
                ORDER BY q_date ASC",
                $machine_uuid
            ));

        } catch (\Exception $e) {
            $this->error_handler->log_error($e, array(
                'component' => 'task_manager',
                'operation' => 'get_pending_tasks',
                'machine_uuid' => $machine_uuid
            ));
            return array();
        }
    }

    public function get_task_details($task_id) {
        global $wpdb;
        
        try {
            return $wpdb->get_row($wpdb->prepare(
                "SELECT gr.*, ud.user_name 
                FROM {$wpdb->prefix}aimagic_gpt_responses gr
                LEFT JOIN {$wpdb->prefix}aimagic_user_data ud ON gr.user_id = ud.user_id
                WHERE gr.id = %d",
                $task_id
            ));

        } catch (\Exception $e) {
            $this->error_handler->log_error($e, array(
                'component' => 'task_manager',
                'operation' => 'get_task_details',
                'task_id' => $task_id
            ));
            return null;
        }
    }
}

目錄：/www/wwwroot/xart004.heatgroups.top/wp-content/plugins/ai_plateform_v2/files_2025/includes/Core
檔名：Plugin.php
==================================================
<?php
namespace AIMagic\Core;

class Plugin {
    private $loader;
    private $plugin_name;
    private $version;

    public function __construct() {
        $this->version = AIMAGIC_VERSION;
        $this->plugin_name = 'ai-magic-publisher';
        $this->load_dependencies();
        $this->set_locale();
        $this->define_admin_hooks();
        $this->define_public_hooks();
        $this->init_modules();
    }

    private function load_dependencies() {
        require_once AIMAGIC_PLUGIN_DIR . 'includes/Core/Loader.php';
        require_once AIMAGIC_PLUGIN_DIR . 'includes/Core/I18n.php';
        require_once AIMAGIC_PLUGIN_DIR . 'includes/Admin/Admin.php';
        require_once AIMAGIC_PLUGIN_DIR . 'includes/Public/Public.php';
        
        $this->loader = new Loader();
    }

    private function set_locale() {
        $plugin_i18n = new I18n();
        $this->loader->add_action('plugins_loaded', $plugin_i18n, 'load_plugin_textdomain');
    }

    private function define_admin_hooks() {
        $plugin_admin = new \AIMagic\Admin\Admin($this->get_plugin_name(), $this->get_version());
        
        $this->loader->add_action('admin_enqueue_scripts', $plugin_admin, 'enqueue_styles');
        $this->loader->add_action('admin_enqueue_scripts', $plugin_admin, 'enqueue_scripts');
        $this->loader->add_action('admin_menu', $plugin_admin, 'add_plugin_admin_menu');
    }

    private function define_public_hooks() {
        $plugin_public = new \AIMagic\Public\Public($this->get_plugin_name(), $this->get_version());
        
        $this->loader->add_action('wp_enqueue_scripts', $plugin_public, 'enqueue_styles');
        $this->loader->add_action('wp_enqueue_scripts', $plugin_public, 'enqueue_scripts');
    }

    private function init_modules() {
        // Initialize Core Modules
        new \AIMagic\Modules\Webhook\WebhookReceiver();
        new \AIMagic\Modules\Tenant\TenantManager();
        new \AIMagic\Modules\Task\TaskManager();
        new \AIMagic\Modules\Worker\TaskWorker();
        new \AIMagic\Modules\Publisher\WordPressPublisher();
        new \AIMagic\Modules\Notification\NotificationManager();
    }

    public function run() {
        $this->loader->run();
    }

    public function get_plugin_name() {
        return $this->plugin_name;
    }

    public function get_version() {
        return $this->version;
    }
}

目錄：/www/wwwroot/xart004.heatgroups.top/wp-content/plugins/ai_plateform_v2/files_2025/includes/Core
檔名：GPTHandler.php
==================================================
<?php
namespace AIMagic\Core;

class GPTHandler {
    private $error_handler;
    private $logger;
    private $cache;
    private static $instance = null;

    private function __construct() {
        $this->error_handler = ErrorHandler::getInstance();
        $this->logger = Logger::getInstance();
        $this->cache = new Cache();
    }

    public static function getInstance() {
        if (self::$instance === null) {
            self::$instance = new self();
        }
        return self::$instance;
    }

    public function askGPT($user_id, $image_path, $qr_content) {
        $this->logger->logme("Starting GPT process for user: $user_id with image: $image_path");
        
        try {
            // First generate prompts for the image
            $prompts = $this->generateImagePrompts($image_path);
            
            // Generate event code
            $event_code = $this->generateEventCode();
            
            // Prepare GPT query
            $gpt_query = $this->prepareGPTQuery($image_path, $prompts);
            
            // Call GPT-4 API
            $gpt_response = $this->callGPTAPI($gpt_query);
            
            if (!$gpt_response) {
                $this->logger->logme("GPT API call failed for user: $user_id");
                return false;
            }

            // Save response to database
            $record_id = $this->saveGPTResponse($user_id, $image_path, $qr_content, $gpt_response, $event_code);

            if (!$record_id) {
                $this->logger->logme("Failed to save GPT response for user: $user_id");
                return false;
            }

            return [
                'extracted_data' => $this->parseGPTResponse($gpt_response),
                'event_code' => $event_code,
                'record_id' => $record_id
            ];

        } catch (\Exception $e) {
            $this->error_handler->log_error($e, array(
                'component' => 'gpt_handler',
                'operation' => 'askGPT',
                'user_id' => $user_id
            ));
            return false;
        }
    }

    private function generateImagePrompts($image_path) {
        global $wpdb;
        
        // Get random prompt template from database
        $prompt = $wpdb->get_row(
            "SELECT * FROM {$wpdb->prefix}aimagic_prompt_data 
             WHERE status = 'active' 
             ORDER BY RAND() 
             LIMIT 1"
        );

        if (!$prompt) {
            return [
                'positive' => 'high quality, masterpiece, best quality, ultra-detailed',
                'negative' => 'lowres, bad anatomy, worst quality, low quality'
            ];
        }

        return [
            'positive' => $prompt->positive_prompt,
            'negative' => $prompt->negative_prompt
        ];
    }

    private function generateEventCode() {
        return 'EVT-' . date('Ymd') . '-' . substr(uniqid(), -6);
    }

    private function prepareGPTQuery($image_path, $prompts) {
        $image_info = wp_get_image_metadata($image_path);
        $image_url = wp_get_attachment_url($image_path);

        return [
            'messages' => [
                [
                    'role' => 'system',
                    'content' => 'You are an expert art critic and creative writer. Analyze the image and provide creative insights.'
                ],
                [
                    'role' => 'user',
                    'content' => [
                        'type' => 'image',
                        'image' => $image_url,
                        'prompt' => "Please analyze this image and provide:\n1. A creative title\n2. Detailed image analysis\n3. Creative inspiration\n4. Recommended positive prompts\n5. Recommended negative prompts"
                    ]
                ]
            ],
            'prompts' => $prompts
        ];
    }

    private function callGPTAPI($query) {
        $api_key = get_option('aimagic_openai_api_key');
        if (!$api_key) {
            $this->logger->logme("OpenAI API key not found");
            return false;
        }

        $response = wp_remote_post('https://api.openai.com/v1/chat/completions', [
            'headers' => [
                'Authorization' => 'Bearer ' . $api_key,
                'Content-Type' => 'application/json'
            ],
            'body' => json_encode([
                'model' => 'gpt-4-vision-preview',
                'messages' => $query['messages'],
                'max_tokens' => 1000
            ])
        ]);

        if (is_wp_error($response)) {
            $this->logger->logme("GPT API error: " . $response->get_error_message());
            return false;
        }

        $body = json_decode(wp_remote_retrieve_body($response), true);
        if (!$body || !isset($body['choices'][0]['message']['content'])) {
            $this->logger->logme("Invalid GPT API response");
            return false;
        }

        return $body['choices'][0]['message']['content'];
    }

    private function parseGPTResponse($response) {
        // Parse the response into structured data
        $sections = [
            '专欄標題' => '',
            '圖片分析' => '',
            '創作靈感' => ''
        ];
        
        // Simple parsing based on section markers
        $current_section = '';
        foreach (explode("\n", $response) as $line) {
            $line = trim($line);
            if (empty($line)) continue;
            
            foreach ($sections as $section => $content) {
                if (strpos($line, $section) === 0) {
                    $current_section = $section;
                    continue 2;
                }
            }
            
            if ($current_section && isset($sections[$current_section])) {
                $sections[$current_section] .= $line . "\n";
            }
        }

        // Trim whitespace from all sections
        array_walk($sections, function(&$content) {
            $content = trim($content);
        });

        return $sections;
    }

    private function saveGPTResponse($user_id, $image_path, $qr_content, $gpt_response, $event_code) {
        global $wpdb;

        try {
            $wpdb->insert(
                $wpdb->prefix . 'aimagic_gpt_responses',
                array(
                    'user_id' => $user_id,
                    'image_path' => $image_path,
                    'image_url' => wp_get_attachment_url($image_path),
                    'gpt_question' => 'Image Analysis Request',
                    'gpt_ans' => $gpt_response,
                    'gpt_prompt_json' => json_encode($this->last_used_prompts),
                    'event_code' => $event_code,
                    'task_status' => 'pending'
                ),
                array('%s', '%s', '%s', '%s', '%s', '%s', '%s', '%s')
            );

            return $wpdb->insert_id;
        } catch (\Exception $e) {
            $this->error_handler->log_error($e, array(
                'component' => 'gpt_handler',
                'operation' => 'saveGPTResponse',
                'user_id' => $user_id
            ));
            return false;
        }
    }
}

目錄：/www/wwwroot/xart004.heatgroups.top/wp-content/plugins/ai_plateform_v2/files_2025/includes/Core
檔名：QueueManager.php
==================================================
<?php
namespace AIMagic\Core;

class QueueManager {
    private $table_name;
    private $error_handler;
    private $max_attempts = 3;
    private $batch_size = 10;

    public function __construct() {
        global $wpdb;
        $this->table_name = $wpdb->prefix . 'aimagic_queue';
        $this->error_handler = ErrorHandler::getInstance();

        add_action('aimagic_process_queue', array($this, 'process_queue'));
        
        if (!wp_next_scheduled('aimagic_process_queue')) {
            wp_schedule_event(time(), 'every_minute', 'aimagic_process_queue');
        }
    }

    public function push($job_data, $queue = 'default') {
        global $wpdb;

        $data = array(
            'queue' => $queue,
            'payload' => maybe_serialize($job_data),
            'attempts' => 0,
            'reserved_at' => null,
            'available_at' => current_time('mysql'),
            'created_at' => current_time('mysql')
        );

        try {
            return $wpdb->insert($this->table_name, $data);
        } catch (\Exception $e) {
            $this->error_handler->log_error($e, array(
                'component' => 'queue',
                'operation' => 'push',
                'data' => $job_data
            ));
            return false;
        }
    }

    public function process_queue() {
        global $wpdb;

        // Get jobs that are available and not reserved
        $jobs = $wpdb->get_results($wpdb->prepare(
            "SELECT * FROM {$this->table_name}
            WHERE queue = 'default'
            AND (reserved_at IS NULL OR reserved_at < %s)
            AND available_at <= %s
            AND attempts < %d
            ORDER BY id ASC
            LIMIT %d",
            date('Y-m-d H:i:s', strtotime('-5 minutes')),
            current_time('mysql'),
            $this->max_attempts,
            $this->batch_size
        ));

        foreach ($jobs as $job) {
            // Mark job as reserved
            $wpdb->update(
                $this->table_name,
                array(
                    'reserved_at' => current_time('mysql'),
                    'attempts' => $job->attempts + 1
                ),
                array('id' => $job->id)
            );

            try {
                $payload = maybe_unserialize($job->payload);
                $this->process_job($payload);

                // Job completed successfully, remove it
                $wpdb->delete($this->table_name, array('id' => $job->id));
            } catch (\Exception $e) {
                $this->error_handler->log_error($e, array(
                    'component' => 'queue',
                    'operation' => 'process',
                    'job_id' => $job->id
                ));

                // If max attempts reached, move to failed jobs
                if ($job->attempts >= $this->max_attempts) {
                    $this->move_to_failed_jobs($job, $e->getMessage());
                    $wpdb->delete($this->table_name, array('id' => $job->id));
                }
            }
        }
    }

    private function process_job($payload) {
        if (!isset($payload['type'])) {
            throw new \Exception('Invalid job payload: missing type');
        }

        switch ($payload['type']) {
            case 'image_processing':
                $task_manager = new TaskManager();
                $task_manager->process_task($payload['task_id']);
                break;
            
            case 'content_generation':
                $gpt4_handler = new GPT4Handler();
                $gpt4_handler->generate_content($payload['data']);
                break;
            
            case 'notification':
                $notification_manager = new NotificationManager();
                $notification_manager->send_notification($payload['user_id'], $payload['message']);
                break;
            
            default:
                throw new \Exception('Unknown job type: ' . $payload['type']);
        }
    }

    private function move_to_failed_jobs($job, $error) {
        global $wpdb;
        
        $wpdb->insert(
            $wpdb->prefix . 'aimagic_failed_jobs',
            array(
                'queue' => $job->queue,
                'payload' => $job->payload,
                'error' => $error,
                'failed_at' => current_time('mysql')
            )
        );
    }

    public function retry_failed_job($job_id) {
        global $wpdb;
        
        $failed_job = $wpdb->get_row($wpdb->prepare(
            "SELECT * FROM {$wpdb->prefix}aimagic_failed_jobs WHERE id = %d",
            $job_id
        ));

        if ($failed_job) {
            $this->push(maybe_unserialize($failed_job->payload));
            $wpdb->delete($wpdb->prefix . 'aimagic_failed_jobs', array('id' => $job_id));
            return true;
        }

        return false;
    }
}

目錄：/www/wwwroot/xart004.heatgroups.top/wp-content/plugins/ai_plateform_v2/files_2025/includes/Core
檔名：BTPanel.php
==================================================
<?php
namespace AIMagic\Core;

class BTPanel {
    private $panel_api_url;
    private $api_key;
    private $username;

    public function __construct() {
        $this->panel_api_url = get_option('aimagic_btpanel_url');
        $this->api_key = get_option('aimagic_btpanel_key');
        $this->username = get_option('aimagic_btpanel_username');
    }

    public function verify_environment() {
        // Verify Ubuntu 22.04
        if (strpos(php_uname('v'), 'Ubuntu') === false || strpos(php_uname('v'), '22.04') === false) {
            throw new \Exception(__('Server must be running Ubuntu 22.04', 'ai-magic-publisher'));
        }

        // Verify PHP version
        if (version_compare(PHP_VERSION, '8.1.0', '<')) {
            throw new \Exception(__('PHP 8.1 or higher is required', 'ai-magic-publisher'));
        }

        // Verify WordPress version
        global $wp_version;
        if (version_compare($wp_version, '6.7.2', '<')) {
            throw new \Exception(__('WordPress 6.7.2 or higher is required', 'ai-magic-publisher'));
        }
    }

    public function configure_bt_panel() {
        // Configure BT Panel settings for the plugin
        $config = array(
            'site_path' => ABSPATH,
            'php_version' => '8.1',
            'mysql_version' => '8.0',
            'ssl_enabled' => true,
            'cache_enabled' => true
        );

        return $this->send_bt_request('SetSiteConfig', $config);
    }

    private function send_bt_request($action, $data) {
        if (empty($this->panel_api_url) || empty($this->api_key)) {
            throw new \Exception(__('BT Panel configuration is incomplete', 'ai-magic-publisher'));
        }

        $response = wp_remote_post($this->panel_api_url . '/api/' . $action, array(
            'headers' => array(
                'Authorization' => $this->api_key,
                'Content-Type' => 'application/json'
            ),
            'body' => json_encode($data)
        ));

        if (is_wp_error($response)) {
            throw new \Exception($response->get_error_message());
        }

        return json_decode(wp_remote_retrieve_body($response), true);
    }
}

目錄：/www/wwwroot/xart004.heatgroups.top/wp-content/plugins/ai_plateform_v2/files_2025/includes/Core
檔名：TaskDownloader.php
==================================================
<?php
namespace AIMagic\Core;

class TaskDownloader {
    private $error_handler;
    private $logger;
    private static $instance = null;

    private function __construct() {
        $this->error_handler = ErrorHandler::getInstance();
        $this->logger = Logger::getInstance();
    }

    public static function getInstance() {
        if (self::$instance === null) {
            self::$instance = new self();
        }
        return self::$instance;
    }

    public function downloadPendingTasks($machine_uuid) {
        global $wpdb;
        
        $this->logger->logme("Downloading tasks for machine: $machine_uuid");
        
        try {
            // Set character set to utf8mb4
            $wpdb->set_charset("utf8mb4");
            
            // Get the most recent pending task for this machine
            $sql = $wpdb->prepare(
                "SELECT gr.id, gr.user_id, gr.gpt_prompt_json, gr.image_url, gr.gpt_question, gr.gpt_ans, ud.user_name 
                FROM {$wpdb->prefix}aimagic_gpt_responses gr
                JOIN {$wpdb->prefix}aimagic_user_data ud ON gr.user_id = ud.user_id
                WHERE gr.task_machine_uuid = %s AND gr.task_status = 'pending' 
                ORDER BY gr.q_date ASC 
                LIMIT 1",
                $machine_uuid
            );

            $result = $wpdb->get_row($sql);
            
            if (!$result) {
                $this->logger->logme("No pending tasks found for machine: $machine_uuid");
                return null;
            }

            // Process the GPT prompt JSON
            $gpt_prompt_json = mb_convert_encoding($result->gpt_prompt_json, 'UTF-8', 'auto');
            $json_data = json_decode($gpt_prompt_json, true);

            if (json_last_error() !== JSON_ERROR_NONE) {
                $this->logger->logme("Error decoding JSON for task ID: " . $result->id);
                return null;
            }

            // Format the output
            $output = [
                'id' => $result->id,
                'user_id' => $result->user_id,
                'category' => $json_data['category'] ?? '',
                'artist' => $json_data['artist'] ?? '',
                'style' => $json_data['style'] ?? '',
                'prompt' => $json_data['prompt'] ?? '',
                'user_name' => $result->user_name,
                'image_url' => $result->image_url,
                'gpt_question' => $result->gpt_question,
                'gpt_ans' => $result->gpt_ans
            ];

            return $output;

        } catch (\Exception $e) {
            $this->error_handler->log_error($e, [
                'component' => 'task_downloader',
                'operation' => 'downloadPendingTasks',
                'machine_uuid' => $machine_uuid
            ]);
            return null;
        }
    }

    public function updateTaskStatus($task_id, $status) {
        global $wpdb;
        
        $this->logger->logme("Updating task status: Task ID $task_id to $status");
        
        try {
            $result = $wpdb->update(
                $wpdb->prefix . 'aimagic_gpt_responses',
                ['task_status' => $status],
                ['id' => $task_id],
                ['%s'],
                ['%d']
            );

            return $result !== false;

        } catch (\Exception $e) {
            $this->error_handler->log_error($e, [
                'component' => 'task_downloader',
                'operation' => 'updateTaskStatus',
                'task_id' => $task_id,
                'status' => $status
            ]);
            return false;
        }
    }

    public function deleteTask($task_id) {
        global $wpdb;
        
        $this->logger->logme("Deleting task: $task_id");
        
        try {
            $result = $wpdb->delete(
                $wpdb->prefix . 'aimagic_gpt_responses',
                ['id' => $task_id],
                ['%d']
            );

            return $result !== false;

        } catch (\Exception $e) {
            $this->error_handler->log_error($e, [
                'component' => 'task_downloader',
                'operation' => 'deleteTask',
                'task_id' => $task_id
            ]);
            return false;
        }
    }
}

目錄：/www/wwwroot/xart004.heatgroups.top/wp-content/plugins/ai_plateform_v2/files_2025/includes/Core
檔名：UserManager.php
==================================================
<?php
namespace AIMagic\Core;

class UserManager {
    private static $instance = null;
    private $logger;
    private $error_handler;
    private $quota_manager;

    private function __construct() {
        $this->logger = Logger::getInstance();
        $this->error_handler = ErrorHandler::getInstance();
        $this->quota_manager = QuotaManager::getInstance();
    }

    public static function getInstance() {
        if (self::$instance === null) {
            self::$instance = new self();
        }
        return self::$instance;
    }

    public function register_user($user_id, $user_name, $qr_content = null) {
        global $wpdb;
        
        $this->logger->logme("Registering new user: $user_id ($user_name)");
        
        try {
            if (!$qr_content) {
                $qr_content = "HWAIS-" . $user_id;
            }

            $default_quota = get_option('aimagic_default_daily_quota', 2);
            
            $result = $wpdb->insert(
                $wpdb->prefix . 'aimagic_user_data',
                array(
                    'user_id' => $user_id,
                    'user_name' => $user_name,
                    'status' => 'active',
                    'daily_quota' => $default_quota,
                    'remaining_quota' => $default_quota,
                    'balance' => 0.00,
                    'qr_content' => $qr_content,
                    'last_reset_date' => current_time('mysql', true),
                    'created_at' => current_time('mysql', true)
                ),
                array('%s', '%s', '%s', '%d', '%d', '%f', '%s', '%s', '%s')
            );

            if ($result === false) {
                throw new \Exception($wpdb->last_error);
            }

            return true;

        } catch (\Exception $e) {
            $this->error_handler->log_error($e, array(
                'component' => 'user_manager',
                'operation' => 'register_user',
                'user_id' => $user_id,
                'user_name' => $user_name
            ));
            return false;
        }
    }

    public function update_user_name($user_id, $user_name) {
        global $wpdb;
        
        try {
            $result = $wpdb->update(
                $wpdb->prefix . 'aimagic_user_data',
                array(
                    'user_name' => $user_name,
                    'updated_at' => current_time('mysql', true)
                ),
                array('user_id' => $user_id),
                array('%s', '%s'),
                array('%s')
            );

            return $result !== false;

        } catch (\Exception $e) {
            $this->error_handler->log_error($e, array(
                'component' => 'user_manager',
                'operation' => 'update_user_name',
                'user_id' => $user_id,
                'user_name' => $user_name
            ));
            return false;
        }
    }

    public function get_user_info($user_id) {
        global $wpdb;
        
        try {
            $user_data = $wpdb->get_row($wpdb->prepare(
                "SELECT * FROM {$wpdb->prefix}aimagic_user_data WHERE user_id = %s",
                $user_id
            ));

            if (!$user_data) {
                return false;
            }

            return array(
                'user_id' => $user_data->user_id,
                'user_name' => $user_data->user_name,
                'status' => $user_data->status,
                'quota' => $this->quota_manager->get_user_quota($user_id),
                'qr_content' => $user_data->qr_content,
                'created_at' => $user_data->created_at,
                'last_message_time' => $user_data->last_message_time
            );

        } catch (\Exception $e) {
            $this->error_handler->log_error($e, array(
                'component' => 'user_manager',
                'operation' => 'get_user_info',
                'user_id' => $user_id
            ));
            return false;
        }
    }

    public function update_user_status($user_id, $status) {
        global $wpdb;
        
        $this->logger->logme("Updating status for user: $user_id to $status");
        
        try {
            $result = $wpdb->update(
                $wpdb->prefix . 'aimagic_user_data',
                array(
                    'status' => $status,
                    'updated_at' => current_time('mysql', true)
                ),
                array('user_id' => $user_id),
                array('%s', '%s'),
                array('%s')
            );

            return $result !== false;

        } catch (\Exception $e) {
            $this->error_handler->log_error($e, array(
                'component' => 'user_manager',
                'operation' => 'update_user_status',
                'user_id' => $user_id,
                'status' => $status
            ));
            return false;
        }
    }

    public function update_last_message_time($user_id) {
        global $wpdb;
        
        try {
            $result = $wpdb->update(
                $wpdb->prefix . 'aimagic_user_data',
                array('last_message_time' => current_time('mysql', true)),
                array('user_id' => $user_id),
                array('%s'),
                array('%s')
            );

            return $result !== false;

        } catch (\Exception $e) {
            $this->error_handler->log_error($e, array(
                'component' => 'user_manager',
                'operation' => 'update_last_message_time',
                'user_id' => $user_id
            ));
            return false;
        }
    }

    public function get_active_users($limit = 100, $offset = 0) {
        global $wpdb;
        
        try {
            return $wpdb->get_results($wpdb->prepare(
                "SELECT * FROM {$wpdb->prefix}aimagic_user_data 
                WHERE status = 'active' 
                ORDER BY last_message_time DESC 
                LIMIT %d OFFSET %d",
                $limit,
                $offset
            ));

        } catch (\Exception $e) {
            $this->error_handler->log_error($e, array(
                'component' => 'user_manager',
                'operation' => 'get_active_users',
                'limit' => $limit,
                'offset' => $offset
            ));
            return array();
        }
    }
}

目錄：/www/wwwroot/xart004.heatgroups.top/wp-content/plugins/ai_plateform_v2/files_2025/includes/Core
檔名：Migration.php
==================================================
<?php
namespace AIMagic\Core;

class Migration {
    private $current_version;
    private $error_handler;

    public function __construct() {
        $this->current_version = get_option('aimagic_db_version', '0');
        $this->error_handler = ErrorHandler::getInstance();
    }

    public function run_migrations() {
        $migrations = $this->get_migrations();
        
        foreach ($migrations as $version => $migration) {
            if (version_compare($this->current_version, $version, '<')) {
                try {
                    call_user_func(array($this, $migration));
                    update_option('aimagic_db_version', $version);
                    $this->error_handler->log_error(
                        "Migration to version $version completed successfully",
                        array('type' => 'migration')
                    );
                } catch (\Exception $e) {
                    $this->error_handler->log_error($e, array(
                        'type' => 'migration',
                        'version' => $version
                    ));
                    throw $e;
                }
            }
        }
    }

    private function get_migrations() {
        return array(
            '1.0.0' => 'create_initial_tables',
            '1.0.1' => 'add_tenant_settings',
            '1.0.2' => 'add_task_indexes',
            '1.1.0' => 'add_content_metadata'
        );
    }

    private function create_initial_tables() {
        global $wpdb;
        require_once(ABSPATH . 'wp-admin/includes/upgrade.php');

        $charset_collate = $wpdb->get_charset_collate();

        // Create tables with proper indexes and foreign keys
        $tables = array(
            // Tables creation SQL statements
            // ... (previously implemented in Activator class)
        );

        foreach ($tables as $sql) {
            dbDelta($sql);
        }
    }

    private function add_tenant_settings() {
        global $wpdb;
        
        $sql = "ALTER TABLE {$wpdb->prefix}aimagic_tenants 
                ADD COLUMN webhook_url VARCHAR(255) AFTER api_key,
                ADD COLUMN webhook_secret VARCHAR(255) AFTER webhook_url";
        
        $wpdb->query($sql);
    }

    private function add_task_indexes() {
        global $wpdb;
        
        $indexes = array(
            "ALTER TABLE {$wpdb->prefix}aimagic_tasks 
             ADD INDEX idx_status_created (status, created_at)",
            "ALTER TABLE {$wpdb->prefix}aimagic_tasks 
             ADD INDEX idx_user_tenant (user_id, tenant_id)"
        );

        foreach ($indexes as $sql) {
            $wpdb->query($sql);
        }
    }

    private function add_content_metadata() {
        global $wpdb;
        
        $sql = "CREATE TABLE IF NOT EXISTS {$wpdb->prefix}aimagic_content_metadata (
            id bigint(20) NOT NULL AUTO_INCREMENT,
            content_id bigint(20) NOT NULL,
            meta_key varchar(255) NOT NULL,
            meta_value longtext NOT NULL,
            created_at datetime NOT NULL,
            PRIMARY KEY (id),
            KEY content_id (content_id),
            KEY meta_key (meta_key)
        ) $charset_collate;";

        dbDelta($sql);
    }
}

目錄：/www/wwwroot/xart004.heatgroups.top/wp-content/plugins/ai_plateform_v2/files_2025/includes/Core
檔名：Logger.php
==================================================
<?php
namespace AIMagic\Core;

class Logger {
    private static $instance = null;
    private $log_file;

    private function __construct() {
        $upload_dir = wp_upload_dir();
        $this->log_file = $upload_dir['basedir'] . '/aimagic/logs/msg.log';
        
        // Create log directory if it doesn't exist
        wp_mkdir_p(dirname($this->log_file));
    }

    public static function getInstance() {
        if (self::$instance === null) {
            self::$instance = new self();
        }
        return self::$instance;
    }

    public function logme($text) {
        $message = "[" . date("Y-m-d H:i:s") . "] " . $text . "\n";
        error_log($message, 3, $this->log_file);
    }
}

目錄：/www/wwwroot/xart004.heatgroups.top/wp-content/plugins/ai_plateform_v2/files_2025/includes/Core
檔名：NodeManager.php
==================================================
<?php
namespace AIMagic\Core;

class NodeManager {
    private static $instance = null;
    private $error_handler;
    
    private function __construct() {
        $this->error_handler = ErrorHandler::getInstance();
        
        // Schedule node cleanup
        if (!wp_next_scheduled('aimagic_cleanup_nodes')) {
            wp_schedule_event(time(), 'fifteen_minutes', 'aimagic_cleanup_nodes');
        }
        add_action('aimagic_cleanup_nodes', array($this, 'cleanup_offline_nodes'));
    }

    public static function instance() {
        if (self::$instance === null) {
            self::$instance = new self();
        }
        return self::$instance;
    }

    public function register_node($node_type) {
        global $wpdb;
        
        try {
            $auth_token = wp_generate_password(32, false);
            
            $wpdb->insert(
                $wpdb->prefix . 'aimagic_nodes',
                array(
                    'node_type' => $node_type,
                    'auth_token' => $auth_token,
                    'status' => 'active',
                    'last_heartbeat' => current_time('mysql'),
                    'registered_at' => current_time('mysql')
                ),
                array('%s', '%s', '%s', '%s', '%s')
            );
            
            return array(
                'node_id' => $wpdb->insert_id,
                'auth_token' => $auth_token
            );
        } catch (\Exception $e) {
            $this->error_handler->log_error($e, array(
                'component' => 'node_manager',
                'operation' => 'register_node',
                'node_type' => $node_type
            ));
            return false;
        }
    }

    public function update_heartbeat($node_id) {
        global $wpdb;
        
        try {
            return $wpdb->update(
                $wpdb->prefix . 'aimagic_nodes',
                array('last_heartbeat' => current_time('mysql')),
                array('id' => $node_id),
                array('%s'),
                array('%d')
            );
        } catch (\Exception $e) {
            $this->error_handler->log_error($e, array(
                'component' => 'node_manager',
                'operation' => 'update_heartbeat',
                'node_id' => $node_id
            ));
            return false;
        }
    }

    public function get_available_nodes($node_type = null) {
        global $wpdb;
        
        $sql = "SELECT * FROM {$wpdb->prefix}aimagic_nodes 
                WHERE status = 'active' 
                AND last_heartbeat > DATE_SUB(NOW(), INTERVAL 10 MINUTE)";
                
        if ($node_type) {
            $sql .= $wpdb->prepare(" AND node_type = %s", $node_type);
        }
        
        try {
            return $wpdb->get_results($sql);
        } catch (\Exception $e) {
            $this->error_handler->log_error($e, array(
                'component' => 'node_manager',
                'operation' => 'get_available_nodes',
                'node_type' => $node_type
            ));
            return array();
        }
    }

    public function cleanup_offline_nodes() {
        global $wpdb;
        
        try {
            return $wpdb->query(
                "UPDATE {$wpdb->prefix}aimagic_nodes 
                 SET status = 'offline' 
                 WHERE last_heartbeat < DATE_SUB(NOW(), INTERVAL 10 MINUTE)"
            );
        } catch (\Exception $e) {
            $this->error_handler->log_error($e, array(
                'component' => 'node_manager',
                'operation' => 'cleanup_offline_nodes'
            ));
            return false;
        }
    }

    public function validate_node($node_id, $auth_token) {
        global $wpdb;
        
        try {
            $node = $wpdb->get_row(
                $wpdb->prepare(
                    "SELECT * FROM {$wpdb->prefix}aimagic_nodes 
                     WHERE id = %d AND auth_token = %s AND status = 'active'",
                    $node_id,
                    $auth_token
                )
            );
            
            return $node !== null;
        } catch (\Exception $e) {
            $this->error_handler->log_error($e, array(
                'component' => 'node_manager',
                'operation' => 'validate_node',
                'node_id' => $node_id
            ));
            return false;
        }
    }

    public function get_node_stats($node_type = null) {
        global $wpdb;
        
        $conditions = array("1=1");
        if ($node_type) {
            $conditions[] = $wpdb->prepare("node_type = %s", $node_type);
        }
        
        $where = implode(" AND ", $conditions);
        
        try {
            return array(
                'total' => $wpdb->get_var("SELECT COUNT(*) FROM {$wpdb->prefix}aimagic_nodes WHERE $where"),
                'active' => $wpdb->get_var("SELECT COUNT(*) FROM {$wpdb->prefix}aimagic_nodes WHERE $where AND status = 'active'"),
                'offline' => $wpdb->get_var("SELECT COUNT(*) FROM {$wpdb->prefix}aimagic_nodes WHERE $where AND status = 'offline'")
            );
        } catch (\Exception $e) {
            $this->error_handler->log_error($e, array(
                'component' => 'node_manager',
                'operation' => 'get_node_stats',
                'node_type' => $node_type
            ));
            return array(
                'total' => 0,
                'active' => 0,
                'offline' => 0
            );
        }
    }
}

